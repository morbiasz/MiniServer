   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"ff.c"
  23              	.Ltext0:
  24              		.file 1 "../sd_card/fatfs/ff.c"
 18792              		.align	2
 18793              		.thumb
 18794              		.thumb_func
 18796              	mem_cpy:
 18797              	.LFB29:
   1:../sd_card/fatfs/ff.c **** /*----------------------------------------------------------------------------/
   2:../sd_card/fatfs/ff.c **** /  FatFs - FAT file system module  R0.07e                    (C)ChaN, 2009
   3:../sd_card/fatfs/ff.c **** /-----------------------------------------------------------------------------/
   4:../sd_card/fatfs/ff.c **** / FatFs module is a generic FAT file system module for small embedded systems.
   5:../sd_card/fatfs/ff.c **** / This is a free software that opened for education, research and commercial
   6:../sd_card/fatfs/ff.c **** / developments under license policy of following terms.
   7:../sd_card/fatfs/ff.c **** /
   8:../sd_card/fatfs/ff.c **** /  Copyright (C) 2009, ChaN, all right reserved.
   9:../sd_card/fatfs/ff.c **** /
  10:../sd_card/fatfs/ff.c **** / * The FatFs module is a free software and there is NO WARRANTY.
  11:../sd_card/fatfs/ff.c **** / * No restriction on use. You can use, modify and redistribute it for
  12:../sd_card/fatfs/ff.c **** /   personal, non-profit or commercial products UNDER YOUR RESPONSIBILITY.
  13:../sd_card/fatfs/ff.c **** / * Redistributions of source code must retain the above copyright notice.
  14:../sd_card/fatfs/ff.c **** /
  15:../sd_card/fatfs/ff.c **** /-----------------------------------------------------------------------------/
  16:../sd_card/fatfs/ff.c **** / Feb 26,'06 R0.00  Prototype.
  17:../sd_card/fatfs/ff.c **** /
  18:../sd_card/fatfs/ff.c **** / Apr 29,'06 R0.01  First stable version.
  19:../sd_card/fatfs/ff.c **** /
  20:../sd_card/fatfs/ff.c **** / Jun 01,'06 R0.02  Added FAT12 support.
  21:../sd_card/fatfs/ff.c **** /                   Removed unbuffered mode.
  22:../sd_card/fatfs/ff.c **** /                   Fixed a problem on small (<32M) partition.
  23:../sd_card/fatfs/ff.c **** / Jun 10,'06 R0.02a Added a configuration option (_FS_MINIMUM).
  24:../sd_card/fatfs/ff.c **** /
  25:../sd_card/fatfs/ff.c **** / Sep 22,'06 R0.03  Added f_rename().
  26:../sd_card/fatfs/ff.c **** /                   Changed option _FS_MINIMUM to _FS_MINIMIZE.
  27:../sd_card/fatfs/ff.c **** / Dec 11,'06 R0.03a Improved cluster scan algorithm to write files fast.
  28:../sd_card/fatfs/ff.c **** /                   Fixed f_mkdir() creates incorrect directory on FAT32.
  29:../sd_card/fatfs/ff.c **** /
  30:../sd_card/fatfs/ff.c **** / Feb 04,'07 R0.04  Supported multiple drive system.
  31:../sd_card/fatfs/ff.c **** /                   Changed some interfaces for multiple drive system.
  32:../sd_card/fatfs/ff.c **** /                   Changed f_mountdrv() to f_mount().
  33:../sd_card/fatfs/ff.c **** /                   Added f_mkfs().
  34:../sd_card/fatfs/ff.c **** / Apr 01,'07 R0.04a Supported multiple partitions on a physical drive.
  35:../sd_card/fatfs/ff.c **** /                   Added a capability of extending file size to f_lseek().
  36:../sd_card/fatfs/ff.c **** /                   Added minimization level 3.
  37:../sd_card/fatfs/ff.c **** /                   Fixed an endian sensitive code in f_mkfs().
  38:../sd_card/fatfs/ff.c **** / May 05,'07 R0.04b Added a configuration option _USE_NTFLAG.
  39:../sd_card/fatfs/ff.c **** /                   Added FSInfo support.
  40:../sd_card/fatfs/ff.c **** /                   Fixed DBCS name can result FR_INVALID_NAME.
  41:../sd_card/fatfs/ff.c **** /                   Fixed short seek (<= csize) collapses the file object.
  42:../sd_card/fatfs/ff.c **** /
  43:../sd_card/fatfs/ff.c **** / Aug 25,'07 R0.05  Changed arguments of f_read(), f_write() and f_mkfs().
  44:../sd_card/fatfs/ff.c **** /                   Fixed f_mkfs() on FAT32 creates incorrect FSInfo.
  45:../sd_card/fatfs/ff.c **** /                   Fixed f_mkdir() on FAT32 creates incorrect directory.
  46:../sd_card/fatfs/ff.c **** / Feb 03,'08 R0.05a Added f_truncate() and f_utime().
  47:../sd_card/fatfs/ff.c **** /                   Fixed off by one error at FAT sub-type determination.
  48:../sd_card/fatfs/ff.c **** /                   Fixed btr in f_read() can be mistruncated.
  49:../sd_card/fatfs/ff.c **** /                   Fixed cached sector is not flushed when create and close
  50:../sd_card/fatfs/ff.c **** /                   without write.
  51:../sd_card/fatfs/ff.c **** /
  52:../sd_card/fatfs/ff.c **** / Apr 01,'08 R0.06  Added fputc(), fputs(), fprintf() and fgets().
  53:../sd_card/fatfs/ff.c **** /                   Improved performance of f_lseek() on moving to the same
  54:../sd_card/fatfs/ff.c **** /                   or following cluster.
  55:../sd_card/fatfs/ff.c **** /
  56:../sd_card/fatfs/ff.c **** / Apr 01,'09 R0.07  Merged Tiny-FatFs as a buffer configuration option.
  57:../sd_card/fatfs/ff.c **** /                   Added long file name support.
  58:../sd_card/fatfs/ff.c **** /                   Added multiple code page support.
  59:../sd_card/fatfs/ff.c **** /                   Added re-entrancy for multitask operation.
  60:../sd_card/fatfs/ff.c **** /                   Added auto cluster size selection to f_mkfs().
  61:../sd_card/fatfs/ff.c **** /                   Added rewind option to f_readdir().
  62:../sd_card/fatfs/ff.c **** /                   Changed result code of critical errors.
  63:../sd_card/fatfs/ff.c **** /                   Renamed string functions to avoid name collision.
  64:../sd_card/fatfs/ff.c **** / Apr 14,'09 R0.07a Separated out OS dependent code on reentrant cfg.
  65:../sd_card/fatfs/ff.c **** /                   Added multiple sector size support.
  66:../sd_card/fatfs/ff.c **** / Jun 21,'09 R0.07c Fixed f_unlink() can return FR_OK on error.
  67:../sd_card/fatfs/ff.c **** /                   Fixed wrong cache control in f_lseek().
  68:../sd_card/fatfs/ff.c **** /                   Added relative path feature.
  69:../sd_card/fatfs/ff.c **** /                   Added f_chdir() and f_chdrive().
  70:../sd_card/fatfs/ff.c **** /                   Added proper case conversion to extended char.
  71:../sd_card/fatfs/ff.c **** / Nov 03,'09 R0.07e Separated out configuration options from ff.h to ffconf.h.
  72:../sd_card/fatfs/ff.c **** /                   Fixed f_unlink() fails to remove a sub-dir on _FS_RPATH.
  73:../sd_card/fatfs/ff.c **** /                   Fixed name matching error on the 13 char boundary.
  74:../sd_card/fatfs/ff.c **** /                   Added a configuration option, _LFN_UNICODE.
  75:../sd_card/fatfs/ff.c **** /                   Changed f_readdir() to return the SFN with always upper
  76:../sd_card/fatfs/ff.c **** /                   case on non-LFN cfg.
  77:../sd_card/fatfs/ff.c **** /---------------------------------------------------------------------------*/
  78:../sd_card/fatfs/ff.c **** 
  79:../sd_card/fatfs/ff.c **** #include "ff.h"			/* FatFs configurations and declarations */
  80:../sd_card/fatfs/ff.c **** #include "ff_diskio.h"		/* Declarations of low level disk I/O functions */
  81:../sd_card/fatfs/ff.c **** 
  82:../sd_card/fatfs/ff.c **** /*--------------------------------------------------------------------------
  83:../sd_card/fatfs/ff.c **** 
  84:../sd_card/fatfs/ff.c ****    Module Private Definitions
  85:../sd_card/fatfs/ff.c **** 
  86:../sd_card/fatfs/ff.c **** ---------------------------------------------------------------------------*/
  87:../sd_card/fatfs/ff.c **** 
  88:../sd_card/fatfs/ff.c **** #if _FATFS != 0x007E
  89:../sd_card/fatfs/ff.c **** #error Wrong include file (ff.h).
  90:../sd_card/fatfs/ff.c **** #endif
  91:../sd_card/fatfs/ff.c **** 
  92:../sd_card/fatfs/ff.c **** #if _FS_REENTRANT
  93:../sd_card/fatfs/ff.c **** #if _USE_LFN == 1
  94:../sd_card/fatfs/ff.c **** #error Static LFN work area must not be used in re-entrant configuration.
  95:../sd_card/fatfs/ff.c **** #endif
  96:../sd_card/fatfs/ff.c **** #define	ENTER_FF(fs)		{ if (!lock_fs(fs)) return FR_TIMEOUT; }
  97:../sd_card/fatfs/ff.c **** #define	LEAVE_FF(fs, res)	{ unlock_fs(fs, res); return res; }
  98:../sd_card/fatfs/ff.c **** 
  99:../sd_card/fatfs/ff.c **** #else
 100:../sd_card/fatfs/ff.c **** #define	ENTER_FF(fs)
 101:../sd_card/fatfs/ff.c **** #define LEAVE_FF(fs, res)	return res
 102:../sd_card/fatfs/ff.c **** 
 103:../sd_card/fatfs/ff.c **** #endif
 104:../sd_card/fatfs/ff.c **** 
 105:../sd_card/fatfs/ff.c **** #define	ABORT(fs, res)		{ fp->flag |= FA__ERROR; LEAVE_FF(fs, res); }
 106:../sd_card/fatfs/ff.c **** 
 107:../sd_card/fatfs/ff.c **** #ifndef NULL
 108:../sd_card/fatfs/ff.c **** #define	NULL	0
 109:../sd_card/fatfs/ff.c **** #endif
 110:../sd_card/fatfs/ff.c **** 
 111:../sd_card/fatfs/ff.c **** /* Name status flags */
 112:../sd_card/fatfs/ff.c **** #define NS			11		/* Offset of name status byte */
 113:../sd_card/fatfs/ff.c **** #define NS_LOSS		0x01	/* Out of 8.3 format */
 114:../sd_card/fatfs/ff.c **** #define NS_LFN		0x02	/* Force to create LFN entry */
 115:../sd_card/fatfs/ff.c **** #define NS_LAST		0x04	/* Last segment */
 116:../sd_card/fatfs/ff.c **** #define NS_BODY		0x08	/* Lower case flag (body) */
 117:../sd_card/fatfs/ff.c **** #define NS_EXT		0x10	/* Lower case flag (ext) */
 118:../sd_card/fatfs/ff.c **** #define NS_DOT		0x20	/* Dot entry */
 119:../sd_card/fatfs/ff.c **** 
 120:../sd_card/fatfs/ff.c **** 
 121:../sd_card/fatfs/ff.c **** 
 122:../sd_card/fatfs/ff.c **** 
 123:../sd_card/fatfs/ff.c **** /*--------------------------------------------------------------------------
 124:../sd_card/fatfs/ff.c **** 
 125:../sd_card/fatfs/ff.c ****    Private Work Area
 126:../sd_card/fatfs/ff.c **** 
 127:../sd_card/fatfs/ff.c **** ---------------------------------------------------------------------------*/
 128:../sd_card/fatfs/ff.c **** 
 129:../sd_card/fatfs/ff.c **** #if _DRIVES < 1 || _DRIVES > 9
 130:../sd_card/fatfs/ff.c **** #error Number of drives must be 1-9.
 131:../sd_card/fatfs/ff.c **** #endif
 132:../sd_card/fatfs/ff.c **** static
 133:../sd_card/fatfs/ff.c **** FATFS *FatFs[_DRIVES];	/* Pointer to the file system objects (logical drives) */
 134:../sd_card/fatfs/ff.c **** 
 135:../sd_card/fatfs/ff.c **** static
 136:../sd_card/fatfs/ff.c **** WORD Fsid;				/* File system mount ID */
 137:../sd_card/fatfs/ff.c **** 
 138:../sd_card/fatfs/ff.c **** #if _FS_RPATH
 139:../sd_card/fatfs/ff.c **** static
 140:../sd_card/fatfs/ff.c **** BYTE Drive;				/* Current drive */
 141:../sd_card/fatfs/ff.c **** #endif
 142:../sd_card/fatfs/ff.c **** 
 143:../sd_card/fatfs/ff.c **** 
 144:../sd_card/fatfs/ff.c **** #if _USE_LFN == 1	/* LFN with static LFN working buffer */
 145:../sd_card/fatfs/ff.c **** static
 146:../sd_card/fatfs/ff.c **** WCHAR LfnBuf[_MAX_LFN + 1];
 147:../sd_card/fatfs/ff.c **** #define	NAMEBUF(sp,lp)	BYTE sp[12]; WCHAR *lp = LfnBuf
 148:../sd_card/fatfs/ff.c **** #define INITBUF(dj,sp,lp)	dj.fn = sp; dj.lfn = lp
 149:../sd_card/fatfs/ff.c **** 
 150:../sd_card/fatfs/ff.c **** #elif _USE_LFN > 1	/* LFN with dynamic LFN working buffer */
 151:../sd_card/fatfs/ff.c **** #define	NAMEBUF(sp,lp)	BYTE sp[12]; WCHAR lbuf[_MAX_LFN + 1], *lp = lbuf
 152:../sd_card/fatfs/ff.c **** #define INITBUF(dj,sp,lp)	dj.fn = sp; dj.lfn = lp
 153:../sd_card/fatfs/ff.c **** 
 154:../sd_card/fatfs/ff.c **** #else				/* No LFN */
 155:../sd_card/fatfs/ff.c **** #define	NAMEBUF(sp,lp)	BYTE sp[12]
 156:../sd_card/fatfs/ff.c **** #define INITBUF(dj,sp,lp)	dj.fn = sp
 157:../sd_card/fatfs/ff.c **** 
 158:../sd_card/fatfs/ff.c **** #endif
 159:../sd_card/fatfs/ff.c **** 
 160:../sd_card/fatfs/ff.c **** 
 161:../sd_card/fatfs/ff.c **** 
 162:../sd_card/fatfs/ff.c **** 
 163:../sd_card/fatfs/ff.c **** /*--------------------------------------------------------------------------
 164:../sd_card/fatfs/ff.c **** 
 165:../sd_card/fatfs/ff.c ****    Module Private Functions
 166:../sd_card/fatfs/ff.c **** 
 167:../sd_card/fatfs/ff.c **** ---------------------------------------------------------------------------*/
 168:../sd_card/fatfs/ff.c **** 
 169:../sd_card/fatfs/ff.c **** 
 170:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 171:../sd_card/fatfs/ff.c **** /* String functions                                                      */
 172:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 173:../sd_card/fatfs/ff.c **** 
 174:../sd_card/fatfs/ff.c **** /* Copy memory to memory */
 175:../sd_card/fatfs/ff.c **** static
 176:../sd_card/fatfs/ff.c **** void mem_cpy (void* dst, const void* src, int cnt) {
 18798              		.loc 1 176 0
 18799              		.cfi_startproc
 18800              		@ args = 0, pretend = 0, frame = 0
 18801              		@ frame_needed = 0, uses_anonymous_args = 0
 18802              		@ link register save eliminated.
 18803              	.LVL0:
 177:../sd_card/fatfs/ff.c **** 	char *d = (char*)dst;
 178:../sd_card/fatfs/ff.c **** 	const char *s = (const char *)src;
 179:../sd_card/fatfs/ff.c **** 	while (cnt--) *d++ = *s++;
 18804              		.loc 1 179 0
 18805 0000 1346     		mov	r3, r2
 18806 0002 4AB1     		cbz	r2, .L4
 18807 0004 4FF00002 		mov	r2, #0
 18808              	.LVL1:
 18809              	.L3:
 18810 0008 11F802C0 		ldrb	ip, [r1, r2]	@ zero_extendqisi2
 18811 000c 00F802C0 		strb	ip, [r0, r2]
 18812 0010 02F10102 		add	r2, r2, #1
 18813 0014 9342     		cmp	r3, r2
 18814 0016 F7D1     		bne	.L3
 18815              	.LVL2:
 18816              	.L4:
 18817 0018 7047     		bx	lr
 18818              		.cfi_endproc
 18819              	.LFE29:
 18821 001a 00BF     		.section	.text.mem_set,"ax",%progbits
 18822              		.align	2
 18823              		.thumb
 18824              		.thumb_func
 18826              	mem_set:
 18827              	.LFB30:
 180:../sd_card/fatfs/ff.c **** }
 181:../sd_card/fatfs/ff.c **** 
 182:../sd_card/fatfs/ff.c **** /* Fill memory */
 183:../sd_card/fatfs/ff.c **** static
 184:../sd_card/fatfs/ff.c **** void mem_set (void* dst, int val, int cnt) {
 18828              		.loc 1 184 0
 18829              		.cfi_startproc
 18830              		@ args = 0, pretend = 0, frame = 0
 18831              		@ frame_needed = 0, uses_anonymous_args = 0
 18832              		@ link register save eliminated.
 18833              	.LVL3:
 185:../sd_card/fatfs/ff.c **** 	char *d = (char*)dst;
 186:../sd_card/fatfs/ff.c **** 	while (cnt--) *d++ = (char)val;
 18834              		.loc 1 186 0
 18835 0000 1346     		mov	r3, r2
 18836 0002 32B1     		cbz	r2, .L9
 18837 0004 4FF00002 		mov	r2, #0
 18838              	.LVL4:
 18839              	.L8:
 18840 0008 8154     		strb	r1, [r0, r2]
 18841 000a 02F10102 		add	r2, r2, #1
 18842 000e 9342     		cmp	r3, r2
 18843 0010 FAD1     		bne	.L8
 18844              	.LVL5:
 18845              	.L9:
 18846 0012 7047     		bx	lr
 18847              		.cfi_endproc
 18848              	.LFE30:
 18850              		.section	.text.clust2sect,"ax",%progbits
 18851              		.align	2
 18852              		.global	clust2sect
 18853              		.thumb
 18854              		.thumb_func
 18856              	clust2sect:
 18857              	.LFB39:
 187:../sd_card/fatfs/ff.c **** }
 188:../sd_card/fatfs/ff.c **** 
 189:../sd_card/fatfs/ff.c **** /* Compare memory to memory */
 190:../sd_card/fatfs/ff.c **** static
 191:../sd_card/fatfs/ff.c **** int mem_cmp (const void* dst, const void* src, int cnt) {
 192:../sd_card/fatfs/ff.c **** 	const char *d = (const char *)dst, *s = (const char *)src;
 193:../sd_card/fatfs/ff.c **** 	int r = 0;
 194:../sd_card/fatfs/ff.c **** 	while (cnt-- && (r = *d++ - *s++) == 0) ;
 195:../sd_card/fatfs/ff.c **** 	return r;
 196:../sd_card/fatfs/ff.c **** }
 197:../sd_card/fatfs/ff.c **** 
 198:../sd_card/fatfs/ff.c **** /* Check if chr is contained in the string */
 199:../sd_card/fatfs/ff.c **** static
 200:../sd_card/fatfs/ff.c **** int chk_chr (const char* str, int chr) {
 201:../sd_card/fatfs/ff.c **** 	while (*str && *str != chr) str++;
 202:../sd_card/fatfs/ff.c **** 	return *str;
 203:../sd_card/fatfs/ff.c **** }
 204:../sd_card/fatfs/ff.c **** 
 205:../sd_card/fatfs/ff.c **** 
 206:../sd_card/fatfs/ff.c **** 
 207:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 208:../sd_card/fatfs/ff.c **** /* Request/Release grant to access the volume                            */
 209:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 210:../sd_card/fatfs/ff.c **** #if _FS_REENTRANT
 211:../sd_card/fatfs/ff.c **** 
 212:../sd_card/fatfs/ff.c **** static
 213:../sd_card/fatfs/ff.c **** BOOL lock_fs (
 214:../sd_card/fatfs/ff.c **** 	FATFS *fs		/* File system object */
 215:../sd_card/fatfs/ff.c **** )
 216:../sd_card/fatfs/ff.c **** {
 217:../sd_card/fatfs/ff.c **** 	return ff_req_grant(fs->sobj);
 218:../sd_card/fatfs/ff.c **** }
 219:../sd_card/fatfs/ff.c **** 
 220:../sd_card/fatfs/ff.c **** 
 221:../sd_card/fatfs/ff.c **** static
 222:../sd_card/fatfs/ff.c **** void unlock_fs (
 223:../sd_card/fatfs/ff.c **** 	FATFS *fs,		/* File system object */
 224:../sd_card/fatfs/ff.c **** 	FRESULT res		/* Result code to be returned */
 225:../sd_card/fatfs/ff.c **** )
 226:../sd_card/fatfs/ff.c **** {
 227:../sd_card/fatfs/ff.c **** 	if (res != FR_NOT_ENABLED &&
 228:../sd_card/fatfs/ff.c **** 		res != FR_INVALID_DRIVE &&
 229:../sd_card/fatfs/ff.c **** 		res != FR_INVALID_OBJECT &&
 230:../sd_card/fatfs/ff.c **** 		res != FR_TIMEOUT) {
 231:../sd_card/fatfs/ff.c **** 		ff_rel_grant(fs->sobj);
 232:../sd_card/fatfs/ff.c **** 	}
 233:../sd_card/fatfs/ff.c **** }
 234:../sd_card/fatfs/ff.c **** #endif
 235:../sd_card/fatfs/ff.c **** 
 236:../sd_card/fatfs/ff.c **** 
 237:../sd_card/fatfs/ff.c **** 
 238:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 239:../sd_card/fatfs/ff.c **** /* Change window offset                                                  */
 240:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 241:../sd_card/fatfs/ff.c **** 
 242:../sd_card/fatfs/ff.c **** static
 243:../sd_card/fatfs/ff.c **** FRESULT move_window (
 244:../sd_card/fatfs/ff.c **** 	FATFS *fs,		/* File system object */
 245:../sd_card/fatfs/ff.c **** 	DWORD sector	/* Sector number to make appearance in the fs->win[] */
 246:../sd_card/fatfs/ff.c **** )					/* Move to zero only writes back dirty window */
 247:../sd_card/fatfs/ff.c **** {
 248:../sd_card/fatfs/ff.c **** 	DWORD wsect;
 249:../sd_card/fatfs/ff.c **** 
 250:../sd_card/fatfs/ff.c **** 
 251:../sd_card/fatfs/ff.c **** 	wsect = fs->winsect;
 252:../sd_card/fatfs/ff.c **** 	if (wsect != sector) {	/* Changed current window */
 253:../sd_card/fatfs/ff.c **** #if !_FS_READONLY
 254:../sd_card/fatfs/ff.c **** 		if (fs->wflag) {	/* Write back dirty window if needed */
 255:../sd_card/fatfs/ff.c **** 			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
 256:../sd_card/fatfs/ff.c **** 				return FR_DISK_ERR;
 257:../sd_card/fatfs/ff.c **** 			fs->wflag = 0;
 258:../sd_card/fatfs/ff.c **** 			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
 259:../sd_card/fatfs/ff.c **** 				BYTE nf;
 260:../sd_card/fatfs/ff.c **** 				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 261:../sd_card/fatfs/ff.c **** 					wsect += fs->sects_fat;
 262:../sd_card/fatfs/ff.c **** 					disk_write(fs->drive, fs->win, wsect, 1);
 263:../sd_card/fatfs/ff.c **** 				}
 264:../sd_card/fatfs/ff.c **** 			}
 265:../sd_card/fatfs/ff.c **** 		}
 266:../sd_card/fatfs/ff.c **** #endif
 267:../sd_card/fatfs/ff.c **** 		if (sector) {
 268:../sd_card/fatfs/ff.c **** 			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
 269:../sd_card/fatfs/ff.c **** 				return FR_DISK_ERR;
 270:../sd_card/fatfs/ff.c **** 			fs->winsect = sector;
 271:../sd_card/fatfs/ff.c **** 		}
 272:../sd_card/fatfs/ff.c **** 	}
 273:../sd_card/fatfs/ff.c **** 
 274:../sd_card/fatfs/ff.c **** 	return FR_OK;
 275:../sd_card/fatfs/ff.c **** }
 276:../sd_card/fatfs/ff.c **** 
 277:../sd_card/fatfs/ff.c **** 
 278:../sd_card/fatfs/ff.c **** 
 279:../sd_card/fatfs/ff.c **** 
 280:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 281:../sd_card/fatfs/ff.c **** /* Clean-up cached data                                                  */
 282:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 283:../sd_card/fatfs/ff.c **** #if !_FS_READONLY
 284:../sd_card/fatfs/ff.c **** static
 285:../sd_card/fatfs/ff.c **** FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
 286:../sd_card/fatfs/ff.c **** 	FATFS *fs	/* File system object */
 287:../sd_card/fatfs/ff.c **** )
 288:../sd_card/fatfs/ff.c **** {
 289:../sd_card/fatfs/ff.c **** 	FRESULT res;
 290:../sd_card/fatfs/ff.c **** 
 291:../sd_card/fatfs/ff.c **** 
 292:../sd_card/fatfs/ff.c **** 	res = move_window(fs, 0);
 293:../sd_card/fatfs/ff.c **** 	if (res == FR_OK) {
 294:../sd_card/fatfs/ff.c **** 		/* Update FSInfo sector if needed */
 295:../sd_card/fatfs/ff.c **** 		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
 296:../sd_card/fatfs/ff.c **** 			fs->winsect = 0;
 297:../sd_card/fatfs/ff.c **** 			mem_set(fs->win, 0, 512);
 298:../sd_card/fatfs/ff.c **** 			ST_WORD(fs->win+BS_55AA, 0xAA55);
 299:../sd_card/fatfs/ff.c **** 			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 300:../sd_card/fatfs/ff.c **** 			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 301:../sd_card/fatfs/ff.c **** 			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 302:../sd_card/fatfs/ff.c **** 			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 303:../sd_card/fatfs/ff.c **** 			disk_write(fs->drive, fs->win, fs->fsi_sector, 1);
 304:../sd_card/fatfs/ff.c **** 			fs->fsi_flag = 0;
 305:../sd_card/fatfs/ff.c **** 		}
 306:../sd_card/fatfs/ff.c **** 		/* Make sure that no pending write process in the physical drive */
 307:../sd_card/fatfs/ff.c **** 		if (disk_ioctl(fs->drive, CTRL_SYNC, (void*)NULL) != RES_OK)
 308:../sd_card/fatfs/ff.c **** 			res = FR_DISK_ERR;
 309:../sd_card/fatfs/ff.c **** 	}
 310:../sd_card/fatfs/ff.c **** 
 311:../sd_card/fatfs/ff.c **** 	return res;
 312:../sd_card/fatfs/ff.c **** }
 313:../sd_card/fatfs/ff.c **** #endif
 314:../sd_card/fatfs/ff.c **** 
 315:../sd_card/fatfs/ff.c **** 
 316:../sd_card/fatfs/ff.c **** 
 317:../sd_card/fatfs/ff.c **** 
 318:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 319:../sd_card/fatfs/ff.c **** /* FAT access - Read value of a FAT entry                                */
 320:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 321:../sd_card/fatfs/ff.c **** 
 322:../sd_card/fatfs/ff.c **** 
 323:../sd_card/fatfs/ff.c **** DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
 324:../sd_card/fatfs/ff.c **** 	FATFS *fs,	/* File system object */
 325:../sd_card/fatfs/ff.c **** 	DWORD clst	/* Cluster# to get the link information */
 326:../sd_card/fatfs/ff.c **** )
 327:../sd_card/fatfs/ff.c **** {
 328:../sd_card/fatfs/ff.c **** 	UINT wc, bc;
 329:../sd_card/fatfs/ff.c **** 	DWORD fsect;
 330:../sd_card/fatfs/ff.c **** 
 331:../sd_card/fatfs/ff.c **** 
 332:../sd_card/fatfs/ff.c **** 	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
 333:../sd_card/fatfs/ff.c **** 		return 1;
 334:../sd_card/fatfs/ff.c **** 
 335:../sd_card/fatfs/ff.c **** 	fsect = fs->fatbase;
 336:../sd_card/fatfs/ff.c **** 	switch (fs->fs_type) {
 337:../sd_card/fatfs/ff.c **** 	case FS_FAT12 :
 338:../sd_card/fatfs/ff.c **** 		bc = clst; bc += bc / 2;
 339:../sd_card/fatfs/ff.c **** 		if (move_window(fs, fsect + (bc / SS(fs)))) break;
 340:../sd_card/fatfs/ff.c **** 		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
 341:../sd_card/fatfs/ff.c **** 		if (move_window(fs, fsect + (bc / SS(fs)))) break;
 342:../sd_card/fatfs/ff.c **** 		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
 343:../sd_card/fatfs/ff.c **** 		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 344:../sd_card/fatfs/ff.c **** 
 345:../sd_card/fatfs/ff.c **** 	case FS_FAT16 :
 346:../sd_card/fatfs/ff.c **** 		if (move_window(fs, fsect + (clst / (SS(fs) / 2)))) break;
 347:../sd_card/fatfs/ff.c **** 		return LD_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)]);
 348:../sd_card/fatfs/ff.c **** 
 349:../sd_card/fatfs/ff.c **** 	case FS_FAT32 :
 350:../sd_card/fatfs/ff.c **** 		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
 351:../sd_card/fatfs/ff.c **** 		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
 352:../sd_card/fatfs/ff.c **** 	}
 353:../sd_card/fatfs/ff.c **** 
 354:../sd_card/fatfs/ff.c **** 	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
 355:../sd_card/fatfs/ff.c **** }
 356:../sd_card/fatfs/ff.c **** 
 357:../sd_card/fatfs/ff.c **** 
 358:../sd_card/fatfs/ff.c **** 
 359:../sd_card/fatfs/ff.c **** 
 360:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 361:../sd_card/fatfs/ff.c **** /* FAT access - Change value of a FAT entry                              */
 362:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 363:../sd_card/fatfs/ff.c **** #if !_FS_READONLY
 364:../sd_card/fatfs/ff.c **** 
 365:../sd_card/fatfs/ff.c **** FRESULT put_fat (
 366:../sd_card/fatfs/ff.c **** 	FATFS *fs,	/* File system object */
 367:../sd_card/fatfs/ff.c **** 	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->max_clust - 1 */
 368:../sd_card/fatfs/ff.c **** 	DWORD val	/* New value to mark the cluster */
 369:../sd_card/fatfs/ff.c **** )
 370:../sd_card/fatfs/ff.c **** {
 371:../sd_card/fatfs/ff.c **** 	UINT bc;
 372:../sd_card/fatfs/ff.c **** 	BYTE *p;
 373:../sd_card/fatfs/ff.c **** 	DWORD fsect;
 374:../sd_card/fatfs/ff.c **** 	FRESULT res;
 375:../sd_card/fatfs/ff.c **** 
 376:../sd_card/fatfs/ff.c **** 
 377:../sd_card/fatfs/ff.c **** 	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
 378:../sd_card/fatfs/ff.c **** 		res = FR_INT_ERR;
 379:../sd_card/fatfs/ff.c **** 
 380:../sd_card/fatfs/ff.c **** 	} else {
 381:../sd_card/fatfs/ff.c **** 		fsect = fs->fatbase;
 382:../sd_card/fatfs/ff.c **** 		switch (fs->fs_type) {
 383:../sd_card/fatfs/ff.c **** 		case FS_FAT12 :
 384:../sd_card/fatfs/ff.c **** 			bc = clst; bc += bc / 2;
 385:../sd_card/fatfs/ff.c **** 			res = move_window(fs, fsect + (bc / SS(fs)));
 386:../sd_card/fatfs/ff.c **** 			if (res != FR_OK) break;
 387:../sd_card/fatfs/ff.c **** 			p = &fs->win[bc & (SS(fs) - 1)];
 388:../sd_card/fatfs/ff.c **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 389:../sd_card/fatfs/ff.c **** 			bc++;
 390:../sd_card/fatfs/ff.c **** 			fs->wflag = 1;
 391:../sd_card/fatfs/ff.c **** 			res = move_window(fs, fsect + (bc / SS(fs)));
 392:../sd_card/fatfs/ff.c **** 			if (res != FR_OK) break;
 393:../sd_card/fatfs/ff.c **** 			p = &fs->win[bc & (SS(fs) - 1)];
 394:../sd_card/fatfs/ff.c **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 395:../sd_card/fatfs/ff.c **** 			break;
 396:../sd_card/fatfs/ff.c **** 
 397:../sd_card/fatfs/ff.c **** 		case FS_FAT16 :
 398:../sd_card/fatfs/ff.c **** 			res = move_window(fs, fsect + (clst / (SS(fs) / 2)));
 399:../sd_card/fatfs/ff.c **** 			if (res != FR_OK) break;
 400:../sd_card/fatfs/ff.c **** 			ST_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)], (WORD)val);
 401:../sd_card/fatfs/ff.c **** 			break;
 402:../sd_card/fatfs/ff.c **** 
 403:../sd_card/fatfs/ff.c **** 		case FS_FAT32 :
 404:../sd_card/fatfs/ff.c **** 			res = move_window(fs, fsect + (clst / (SS(fs) / 4)));
 405:../sd_card/fatfs/ff.c **** 			if (res != FR_OK) break;
 406:../sd_card/fatfs/ff.c **** 			ST_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)], val);
 407:../sd_card/fatfs/ff.c **** 			break;
 408:../sd_card/fatfs/ff.c **** 
 409:../sd_card/fatfs/ff.c **** 		default :
 410:../sd_card/fatfs/ff.c **** 			res = FR_INT_ERR;
 411:../sd_card/fatfs/ff.c **** 		}
 412:../sd_card/fatfs/ff.c **** 		fs->wflag = 1;
 413:../sd_card/fatfs/ff.c **** 	}
 414:../sd_card/fatfs/ff.c **** 
 415:../sd_card/fatfs/ff.c **** 	return res;
 416:../sd_card/fatfs/ff.c **** }
 417:../sd_card/fatfs/ff.c **** #endif /* !_FS_READONLY */
 418:../sd_card/fatfs/ff.c **** 
 419:../sd_card/fatfs/ff.c **** 
 420:../sd_card/fatfs/ff.c **** 
 421:../sd_card/fatfs/ff.c **** 
 422:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 423:../sd_card/fatfs/ff.c **** /* FAT handling - Remove a cluster chain                                 */
 424:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 425:../sd_card/fatfs/ff.c **** #if !_FS_READONLY
 426:../sd_card/fatfs/ff.c **** static
 427:../sd_card/fatfs/ff.c **** FRESULT remove_chain (
 428:../sd_card/fatfs/ff.c **** 	FATFS *fs,			/* File system object */
 429:../sd_card/fatfs/ff.c **** 	DWORD clst			/* Cluster# to remove a chain from */
 430:../sd_card/fatfs/ff.c **** )
 431:../sd_card/fatfs/ff.c **** {
 432:../sd_card/fatfs/ff.c **** 	FRESULT res;
 433:../sd_card/fatfs/ff.c **** 	DWORD nxt;
 434:../sd_card/fatfs/ff.c **** 
 435:../sd_card/fatfs/ff.c **** 
 436:../sd_card/fatfs/ff.c **** 	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
 437:../sd_card/fatfs/ff.c **** 		res = FR_INT_ERR;
 438:../sd_card/fatfs/ff.c **** 
 439:../sd_card/fatfs/ff.c **** 	} else {
 440:../sd_card/fatfs/ff.c **** 		res = FR_OK;
 441:../sd_card/fatfs/ff.c **** 		while (clst < fs->max_clust) {			/* Not a last link? */
 442:../sd_card/fatfs/ff.c **** 			nxt = get_fat(fs, clst);			/* Get cluster status */
 443:../sd_card/fatfs/ff.c **** 			if (nxt == 0) break;				/* Empty cluster? */
 444:../sd_card/fatfs/ff.c **** 			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 445:../sd_card/fatfs/ff.c **** 			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 446:../sd_card/fatfs/ff.c **** 			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 447:../sd_card/fatfs/ff.c **** 			if (res != FR_OK) break;
 448:../sd_card/fatfs/ff.c **** 			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 449:../sd_card/fatfs/ff.c **** 				fs->free_clust++;
 450:../sd_card/fatfs/ff.c **** 				fs->fsi_flag = 1;
 451:../sd_card/fatfs/ff.c **** 			}
 452:../sd_card/fatfs/ff.c **** 			clst = nxt;	/* Next cluster */
 453:../sd_card/fatfs/ff.c **** 		}
 454:../sd_card/fatfs/ff.c **** 	}
 455:../sd_card/fatfs/ff.c **** 
 456:../sd_card/fatfs/ff.c **** 	return res;
 457:../sd_card/fatfs/ff.c **** }
 458:../sd_card/fatfs/ff.c **** #endif
 459:../sd_card/fatfs/ff.c **** 
 460:../sd_card/fatfs/ff.c **** 
 461:../sd_card/fatfs/ff.c **** 
 462:../sd_card/fatfs/ff.c **** 
 463:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 464:../sd_card/fatfs/ff.c **** /* FAT handling - Stretch or Create a cluster chain                      */
 465:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 466:../sd_card/fatfs/ff.c **** #if !_FS_READONLY
 467:../sd_card/fatfs/ff.c **** static
 468:../sd_card/fatfs/ff.c **** DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster
 469:../sd_card/fatfs/ff.c **** 	FATFS *fs,			/* File system object */
 470:../sd_card/fatfs/ff.c **** 	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
 471:../sd_card/fatfs/ff.c **** )
 472:../sd_card/fatfs/ff.c **** {
 473:../sd_card/fatfs/ff.c **** 	DWORD cs, ncl, scl, mcl;
 474:../sd_card/fatfs/ff.c **** 
 475:../sd_card/fatfs/ff.c **** 
 476:../sd_card/fatfs/ff.c **** 	mcl = fs->max_clust;
 477:../sd_card/fatfs/ff.c **** 	if (clst == 0) {		/* Create new chain */
 478:../sd_card/fatfs/ff.c **** 		scl = fs->last_clust;			/* Get suggested start point */
 479:../sd_card/fatfs/ff.c **** 		if (scl == 0 || scl >= mcl) scl = 1;
 480:../sd_card/fatfs/ff.c **** 	}
 481:../sd_card/fatfs/ff.c **** 	else {					/* Stretch existing chain */
 482:../sd_card/fatfs/ff.c **** 		cs = get_fat(fs, clst);			/* Check the cluster status */
 483:../sd_card/fatfs/ff.c **** 		if (cs < 2) return 1;			/* It is an invalid cluster */
 484:../sd_card/fatfs/ff.c **** 		if (cs < mcl) return cs;		/* It is already followed by next cluster */
 485:../sd_card/fatfs/ff.c **** 		scl = clst;
 486:../sd_card/fatfs/ff.c **** 	}
 487:../sd_card/fatfs/ff.c **** 
 488:../sd_card/fatfs/ff.c **** 	ncl = scl;				/* Start cluster */
 489:../sd_card/fatfs/ff.c **** 	for (;;) {
 490:../sd_card/fatfs/ff.c **** 		ncl++;							/* Next cluster */
 491:../sd_card/fatfs/ff.c **** 		if (ncl >= mcl) {				/* Wrap around */
 492:../sd_card/fatfs/ff.c **** 			ncl = 2;
 493:../sd_card/fatfs/ff.c **** 			if (ncl > scl) return 0;	/* No free cluster */
 494:../sd_card/fatfs/ff.c **** 		}
 495:../sd_card/fatfs/ff.c **** 		cs = get_fat(fs, ncl);			/* Get the cluster status */
 496:../sd_card/fatfs/ff.c **** 		if (cs == 0) break;				/* Found a free cluster */
 497:../sd_card/fatfs/ff.c **** 		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 498:../sd_card/fatfs/ff.c **** 			return cs;
 499:../sd_card/fatfs/ff.c **** 		if (ncl == scl) return 0;		/* No free cluster */
 500:../sd_card/fatfs/ff.c **** 	}
 501:../sd_card/fatfs/ff.c **** 
 502:../sd_card/fatfs/ff.c **** 	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "in use" */
 503:../sd_card/fatfs/ff.c **** 		return 0xFFFFFFFF;
 504:../sd_card/fatfs/ff.c **** 	if (clst != 0) {					/* Link it to the previous one if needed */
 505:../sd_card/fatfs/ff.c **** 		if (put_fat(fs, clst, ncl))
 506:../sd_card/fatfs/ff.c **** 			return 0xFFFFFFFF;
 507:../sd_card/fatfs/ff.c **** 	}
 508:../sd_card/fatfs/ff.c **** 
 509:../sd_card/fatfs/ff.c **** 	fs->last_clust = ncl;				/* Update FSINFO */
 510:../sd_card/fatfs/ff.c **** 	if (fs->free_clust != 0xFFFFFFFF) {
 511:../sd_card/fatfs/ff.c **** 		fs->free_clust--;
 512:../sd_card/fatfs/ff.c **** 		fs->fsi_flag = 1;
 513:../sd_card/fatfs/ff.c **** 	}
 514:../sd_card/fatfs/ff.c **** 
 515:../sd_card/fatfs/ff.c **** 	return ncl;		/* Return new cluster number */
 516:../sd_card/fatfs/ff.c **** }
 517:../sd_card/fatfs/ff.c **** #endif /* !_FS_READONLY */
 518:../sd_card/fatfs/ff.c **** 
 519:../sd_card/fatfs/ff.c **** 
 520:../sd_card/fatfs/ff.c **** 
 521:../sd_card/fatfs/ff.c **** 
 522:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 523:../sd_card/fatfs/ff.c **** /* Get sector# from cluster#                                             */
 524:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 525:../sd_card/fatfs/ff.c **** 
 526:../sd_card/fatfs/ff.c **** 
 527:../sd_card/fatfs/ff.c **** DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
 528:../sd_card/fatfs/ff.c **** 	FATFS *fs,		/* File system object */
 529:../sd_card/fatfs/ff.c **** 	DWORD clst		/* Cluster# to be converted */
 530:../sd_card/fatfs/ff.c **** )
 531:../sd_card/fatfs/ff.c **** {
 18858              		.loc 1 531 0
 18859              		.cfi_startproc
 18860              		@ args = 0, pretend = 0, frame = 0
 18861              		@ frame_needed = 0, uses_anonymous_args = 0
 18862              		@ link register save eliminated.
 18863              	.LVL6:
 532:../sd_card/fatfs/ff.c **** 	clst -= 2;
 18864              		.loc 1 532 0
 18865 0000 A1F10201 		sub	r1, r1, #2
 18866              	.LVL7:
 533:../sd_card/fatfs/ff.c **** 	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
 18867              		.loc 1 533 0
 18868 0004 C369     		ldr	r3, [r0, #28]
 18869 0006 A3F10203 		sub	r3, r3, #2
 18870 000a 9942     		cmp	r1, r3
 18871 000c 2FBF     		iteee	cs
 18872 000e 0020     		movcs	r0, #0
 18873              	.LVL8:
 534:../sd_card/fatfs/ff.c **** 	return clst * fs->csize + fs->database;
 18874              		.loc 1 534 0
 18875 0010 8278     		ldrbcc	r2, [r0, #2]	@ zero_extendqisi2
 18876              	.LVL9:
 18877 0012 836A     		ldrcc	r3, [r0, #40]
 18878 0014 02FB0130 		mlacc	r0, r2, r1, r3
 18879              	.LVL10:
 535:../sd_card/fatfs/ff.c **** }
 18880              		.loc 1 535 0
 18881 0018 7047     		bx	lr
 18882              		.cfi_endproc
 18883              	.LFE39:
 18885 001a 00BF     		.section	.text.f_mount,"ax",%progbits
 18886              		.align	2
 18887              		.global	f_mount
 18888              		.thumb
 18889              		.thumb_func
 18891              	f_mount:
 18892              	.LFB51:
 536:../sd_card/fatfs/ff.c **** 
 537:../sd_card/fatfs/ff.c **** 
 538:../sd_card/fatfs/ff.c **** 
 539:../sd_card/fatfs/ff.c **** 
 540:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 541:../sd_card/fatfs/ff.c **** /* Directory handling - Seek directory index                             */
 542:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 543:../sd_card/fatfs/ff.c **** 
 544:../sd_card/fatfs/ff.c **** static
 545:../sd_card/fatfs/ff.c **** FRESULT dir_seek (
 546:../sd_card/fatfs/ff.c **** 	DIR *dj,		/* Pointer to directory object */
 547:../sd_card/fatfs/ff.c **** 	WORD idx		/* Directory index number */
 548:../sd_card/fatfs/ff.c **** )
 549:../sd_card/fatfs/ff.c **** {
 550:../sd_card/fatfs/ff.c **** 	DWORD clst;
 551:../sd_card/fatfs/ff.c **** 	WORD ic;
 552:../sd_card/fatfs/ff.c **** 
 553:../sd_card/fatfs/ff.c **** 
 554:../sd_card/fatfs/ff.c **** 	dj->index = idx;
 555:../sd_card/fatfs/ff.c **** 	clst = dj->sclust;
 556:../sd_card/fatfs/ff.c **** 	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
 557:../sd_card/fatfs/ff.c **** 		return FR_INT_ERR;
 558:../sd_card/fatfs/ff.c **** 	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 559:../sd_card/fatfs/ff.c **** 		clst = dj->fs->dirbase;
 560:../sd_card/fatfs/ff.c **** 
 561:../sd_card/fatfs/ff.c **** 	if (clst == 0) {	/* Static table */
 562:../sd_card/fatfs/ff.c **** 		dj->clust = clst;
 563:../sd_card/fatfs/ff.c **** 		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
 564:../sd_card/fatfs/ff.c **** 			return FR_INT_ERR;
 565:../sd_card/fatfs/ff.c **** 		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
 566:../sd_card/fatfs/ff.c **** 	}
 567:../sd_card/fatfs/ff.c **** 	else {				/* Dynamic table */
 568:../sd_card/fatfs/ff.c **** 		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
 569:../sd_card/fatfs/ff.c **** 		while (idx >= ic) {	/* Follow cluster chain */
 570:../sd_card/fatfs/ff.c **** 			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 571:../sd_card/fatfs/ff.c **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 572:../sd_card/fatfs/ff.c **** 			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
 573:../sd_card/fatfs/ff.c **** 				return FR_INT_ERR;
 574:../sd_card/fatfs/ff.c **** 			idx -= ic;
 575:../sd_card/fatfs/ff.c **** 		}
 576:../sd_card/fatfs/ff.c **** 		dj->clust = clst;
 577:../sd_card/fatfs/ff.c **** 		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
 578:../sd_card/fatfs/ff.c **** 	}
 579:../sd_card/fatfs/ff.c **** 
 580:../sd_card/fatfs/ff.c **** 	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
 581:../sd_card/fatfs/ff.c **** 
 582:../sd_card/fatfs/ff.c **** 	return FR_OK;	/* Seek succeeded */
 583:../sd_card/fatfs/ff.c **** }
 584:../sd_card/fatfs/ff.c **** 
 585:../sd_card/fatfs/ff.c **** 
 586:../sd_card/fatfs/ff.c **** 
 587:../sd_card/fatfs/ff.c **** 
 588:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 589:../sd_card/fatfs/ff.c **** /* Directory handling - Move directory index next                        */
 590:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 591:../sd_card/fatfs/ff.c **** 
 592:../sd_card/fatfs/ff.c **** static
 593:../sd_card/fatfs/ff.c **** FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not streach
 594:../sd_card/fatfs/ff.c **** 	DIR *dj,		/* Pointer to directory object */
 595:../sd_card/fatfs/ff.c **** 	BOOL streach	/* FALSE: Do not stretch table, TRUE: Stretch table if needed */
 596:../sd_card/fatfs/ff.c **** )
 597:../sd_card/fatfs/ff.c **** {
 598:../sd_card/fatfs/ff.c **** 	DWORD clst;
 599:../sd_card/fatfs/ff.c **** 	WORD i;
 600:../sd_card/fatfs/ff.c **** 
 601:../sd_card/fatfs/ff.c **** 
 602:../sd_card/fatfs/ff.c **** 	i = dj->index + 1;
 603:../sd_card/fatfs/ff.c **** 	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 604:../sd_card/fatfs/ff.c **** 		return FR_NO_FILE;
 605:../sd_card/fatfs/ff.c **** 
 606:../sd_card/fatfs/ff.c **** 	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
 607:../sd_card/fatfs/ff.c **** 		dj->sect++;					/* Next sector */
 608:../sd_card/fatfs/ff.c **** 
 609:../sd_card/fatfs/ff.c **** 		if (dj->clust == 0) {	/* Static table */
 610:../sd_card/fatfs/ff.c **** 			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
 611:../sd_card/fatfs/ff.c **** 				return FR_NO_FILE;
 612:../sd_card/fatfs/ff.c **** 		}
 613:../sd_card/fatfs/ff.c **** 		else {					/* Dynamic table */
 614:../sd_card/fatfs/ff.c **** 			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
 615:../sd_card/fatfs/ff.c **** 				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
 616:../sd_card/fatfs/ff.c **** 				if (clst <= 1) return FR_INT_ERR;
 617:../sd_card/fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 618:../sd_card/fatfs/ff.c **** 				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
 619:../sd_card/fatfs/ff.c **** #if !_FS_READONLY
 620:../sd_card/fatfs/ff.c **** 					BYTE c;
 621:../sd_card/fatfs/ff.c **** 					if (!streach) return FR_NO_FILE;			/* When do not stretch, report EOT */
 622:../sd_card/fatfs/ff.c **** 					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
 623:../sd_card/fatfs/ff.c **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
 624:../sd_card/fatfs/ff.c **** 					if (clst == 1) return FR_INT_ERR;
 625:../sd_card/fatfs/ff.c **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 626:../sd_card/fatfs/ff.c **** 					/* Clean-up streached table */
 627:../sd_card/fatfs/ff.c **** 					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
 628:../sd_card/fatfs/ff.c **** 					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
 629:../sd_card/fatfs/ff.c **** 					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
 630:../sd_card/fatfs/ff.c **** 					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 631:../sd_card/fatfs/ff.c **** 						dj->fs->wflag = 1;
 632:../sd_card/fatfs/ff.c **** 						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
 633:../sd_card/fatfs/ff.c **** 						dj->fs->winsect++;
 634:../sd_card/fatfs/ff.c **** 					}
 635:../sd_card/fatfs/ff.c **** 					dj->fs->winsect -= c;						/* Rewind window address */
 636:../sd_card/fatfs/ff.c **** #else
 637:../sd_card/fatfs/ff.c **** 					return FR_NO_FILE;			/* Report EOT */
 638:../sd_card/fatfs/ff.c **** #endif
 639:../sd_card/fatfs/ff.c **** 				}
 640:../sd_card/fatfs/ff.c **** 				dj->clust = clst;				/* Initialize data for new cluster */
 641:../sd_card/fatfs/ff.c **** 				dj->sect = clust2sect(dj->fs, clst);
 642:../sd_card/fatfs/ff.c **** 			}
 643:../sd_card/fatfs/ff.c **** 		}
 644:../sd_card/fatfs/ff.c **** 	}
 645:../sd_card/fatfs/ff.c **** 
 646:../sd_card/fatfs/ff.c **** 	dj->index = i;
 647:../sd_card/fatfs/ff.c **** 	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
 648:../sd_card/fatfs/ff.c **** 
 649:../sd_card/fatfs/ff.c **** 	return FR_OK;
 650:../sd_card/fatfs/ff.c **** }
 651:../sd_card/fatfs/ff.c **** 
 652:../sd_card/fatfs/ff.c **** 
 653:../sd_card/fatfs/ff.c **** 
 654:../sd_card/fatfs/ff.c **** 
 655:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 656:../sd_card/fatfs/ff.c **** /* LFN handling - Test/Pick/Fit an LFN segment from/to directory entry   */
 657:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 658:../sd_card/fatfs/ff.c **** #if _USE_LFN
 659:../sd_card/fatfs/ff.c **** static
 660:../sd_card/fatfs/ff.c **** const BYTE LfnOfs[] = {1,3,5,7,9,14,16,18,20,22,24,28,30};	/* Offset of LFN chars in the directory 
 661:../sd_card/fatfs/ff.c **** 
 662:../sd_card/fatfs/ff.c **** 
 663:../sd_card/fatfs/ff.c **** static
 664:../sd_card/fatfs/ff.c **** BOOL cmp_lfn (			/* TRUE:Matched, FALSE:Not matched */
 665:../sd_card/fatfs/ff.c **** 	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
 666:../sd_card/fatfs/ff.c **** 	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
 667:../sd_card/fatfs/ff.c **** )
 668:../sd_card/fatfs/ff.c **** {
 669:../sd_card/fatfs/ff.c **** 	int i, s;
 670:../sd_card/fatfs/ff.c **** 	WCHAR wc, uc;
 671:../sd_card/fatfs/ff.c **** 
 672:../sd_card/fatfs/ff.c **** 
 673:../sd_card/fatfs/ff.c **** 	i = ((dir[LDIR_Ord] & 0xBF) - 1) * 13;	/* Get offset in the LFN buffer */
 674:../sd_card/fatfs/ff.c **** 	s = 0; wc = 1;
 675:../sd_card/fatfs/ff.c **** 	do {
 676:../sd_card/fatfs/ff.c **** 		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 677:../sd_card/fatfs/ff.c **** 		if (wc) {	/* Last char has not been processed */
 678:../sd_card/fatfs/ff.c **** 			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 679:../sd_card/fatfs/ff.c **** 			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 680:../sd_card/fatfs/ff.c **** 				return FALSE;			/* Not matched */
 681:../sd_card/fatfs/ff.c **** 		} else {
 682:../sd_card/fatfs/ff.c **** 			if (uc != 0xFFFF) return FALSE;	/* Check filler */
 683:../sd_card/fatfs/ff.c **** 		}
 684:../sd_card/fatfs/ff.c **** 	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
 685:../sd_card/fatfs/ff.c **** 
 686:../sd_card/fatfs/ff.c **** 	if ((dir[LDIR_Ord] & 0x40) && wc && lfnbuf[i])	/* Last segment matched but different length */
 687:../sd_card/fatfs/ff.c **** 		return FALSE;
 688:../sd_card/fatfs/ff.c **** 
 689:../sd_card/fatfs/ff.c **** 	return TRUE;					/* The part of LFN matched */
 690:../sd_card/fatfs/ff.c **** }
 691:../sd_card/fatfs/ff.c **** 
 692:../sd_card/fatfs/ff.c **** 
 693:../sd_card/fatfs/ff.c **** 
 694:../sd_card/fatfs/ff.c **** static
 695:../sd_card/fatfs/ff.c **** BOOL pick_lfn (			/* TRUE:Succeeded, FALSE:Buffer overflow */
 696:../sd_card/fatfs/ff.c **** 	WCHAR *lfnbuf,		/* Pointer to the Unicode-LFN buffer */
 697:../sd_card/fatfs/ff.c **** 	BYTE *dir			/* Pointer to the directory entry */
 698:../sd_card/fatfs/ff.c **** )
 699:../sd_card/fatfs/ff.c **** {
 700:../sd_card/fatfs/ff.c **** 	int i, s;
 701:../sd_card/fatfs/ff.c **** 	WCHAR wc, uc;
 702:../sd_card/fatfs/ff.c **** 
 703:../sd_card/fatfs/ff.c **** 
 704:../sd_card/fatfs/ff.c **** 	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 705:../sd_card/fatfs/ff.c **** 
 706:../sd_card/fatfs/ff.c **** 	s = 0; wc = 1;
 707:../sd_card/fatfs/ff.c **** 	do {
 708:../sd_card/fatfs/ff.c **** 		uc = LD_WORD(dir+LfnOfs[s]);			/* Pick an LFN character from the entry */
 709:../sd_card/fatfs/ff.c **** 		if (wc) {	/* Last char has not been processed */
 710:../sd_card/fatfs/ff.c **** 			if (i >= _MAX_LFN) return FALSE;	/* Buffer overflow? */
 711:../sd_card/fatfs/ff.c **** 			lfnbuf[i++] = wc = uc;				/* Store it */
 712:../sd_card/fatfs/ff.c **** 		} else {
 713:../sd_card/fatfs/ff.c **** 			if (uc != 0xFFFF) return FALSE;		/* Check filler */
 714:../sd_card/fatfs/ff.c **** 		}
 715:../sd_card/fatfs/ff.c **** 	} while (++s < 13);						/* Read all character in the entry */
 716:../sd_card/fatfs/ff.c **** 
 717:../sd_card/fatfs/ff.c **** 	if (dir[LDIR_Ord] & 0x40) {				/* Put terminator if it is the last LFN part */
 718:../sd_card/fatfs/ff.c **** 		if (i >= _MAX_LFN) return FALSE;	/* Buffer overflow? */
 719:../sd_card/fatfs/ff.c **** 		lfnbuf[i] = 0;
 720:../sd_card/fatfs/ff.c **** 	}
 721:../sd_card/fatfs/ff.c **** 
 722:../sd_card/fatfs/ff.c **** 	return TRUE;
 723:../sd_card/fatfs/ff.c **** }
 724:../sd_card/fatfs/ff.c **** 
 725:../sd_card/fatfs/ff.c **** 
 726:../sd_card/fatfs/ff.c **** #if !_FS_READONLY
 727:../sd_card/fatfs/ff.c **** static
 728:../sd_card/fatfs/ff.c **** void fit_lfn (
 729:../sd_card/fatfs/ff.c **** 	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
 730:../sd_card/fatfs/ff.c **** 	BYTE *dir,				/* Pointer to the directory entry */
 731:../sd_card/fatfs/ff.c **** 	BYTE ord,				/* LFN order (1-20) */
 732:../sd_card/fatfs/ff.c **** 	BYTE sum				/* SFN sum */
 733:../sd_card/fatfs/ff.c **** )
 734:../sd_card/fatfs/ff.c **** {
 735:../sd_card/fatfs/ff.c **** 	int i, s;
 736:../sd_card/fatfs/ff.c **** 	WCHAR wc;
 737:../sd_card/fatfs/ff.c **** 
 738:../sd_card/fatfs/ff.c **** 
 739:../sd_card/fatfs/ff.c **** 	dir[LDIR_Chksum] = sum;			/* Set check sum */
 740:../sd_card/fatfs/ff.c **** 	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 741:../sd_card/fatfs/ff.c **** 	dir[LDIR_Type] = 0;
 742:../sd_card/fatfs/ff.c **** 	ST_WORD(dir+LDIR_FstClusLO, 0);
 743:../sd_card/fatfs/ff.c **** 
 744:../sd_card/fatfs/ff.c **** 	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 745:../sd_card/fatfs/ff.c **** 	s = wc = 0;
 746:../sd_card/fatfs/ff.c **** 	do {
 747:../sd_card/fatfs/ff.c **** 		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
 748:../sd_card/fatfs/ff.c **** 		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 749:../sd_card/fatfs/ff.c **** 		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
 750:../sd_card/fatfs/ff.c **** 	} while (++s < 13);
 751:../sd_card/fatfs/ff.c **** 	if (wc == 0xFFFF || !lfnbuf[i]) ord |= 0x40;	/* Bottom LFN part is the start of LFN sequence */
 752:../sd_card/fatfs/ff.c **** 	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 753:../sd_card/fatfs/ff.c **** }
 754:../sd_card/fatfs/ff.c **** 
 755:../sd_card/fatfs/ff.c **** #endif
 756:../sd_card/fatfs/ff.c **** #endif
 757:../sd_card/fatfs/ff.c **** 
 758:../sd_card/fatfs/ff.c **** 
 759:../sd_card/fatfs/ff.c **** 
 760:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 761:../sd_card/fatfs/ff.c **** /* Create numbered name                                                  */
 762:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 763:../sd_card/fatfs/ff.c **** #if _USE_LFN
 764:../sd_card/fatfs/ff.c **** void gen_numname (
 765:../sd_card/fatfs/ff.c **** 	BYTE *dst,			/* Pointer to generated SFN */
 766:../sd_card/fatfs/ff.c **** 	const BYTE *src,	/* Pointer to source SFN to be modified */
 767:../sd_card/fatfs/ff.c **** 	const WCHAR *lfn,	/* Pointer to LFN */
 768:../sd_card/fatfs/ff.c **** 	WORD num			/* Sequence number */
 769:../sd_card/fatfs/ff.c **** )
 770:../sd_card/fatfs/ff.c **** {
 771:../sd_card/fatfs/ff.c **** 	char ns[8];
 772:../sd_card/fatfs/ff.c **** 	int i, j;
 773:../sd_card/fatfs/ff.c **** 
 774:../sd_card/fatfs/ff.c **** 
 775:../sd_card/fatfs/ff.c **** 	mem_cpy(dst, src, 11);
 776:../sd_card/fatfs/ff.c **** 
 777:../sd_card/fatfs/ff.c **** 	if (num > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 778:../sd_card/fatfs/ff.c **** 		do num = (num >> 1) + (num << 15) + (WORD)*lfn++; while (*lfn);
 779:../sd_card/fatfs/ff.c **** 	}
 780:../sd_card/fatfs/ff.c **** 
 781:../sd_card/fatfs/ff.c **** 	/* itoa */
 782:../sd_card/fatfs/ff.c **** 	i = 7;
 783:../sd_card/fatfs/ff.c **** 	do {
 784:../sd_card/fatfs/ff.c **** 		ns[i--] = (num % 10) + '0';
 785:../sd_card/fatfs/ff.c **** 		num /= 10;
 786:../sd_card/fatfs/ff.c **** 	} while (num);
 787:../sd_card/fatfs/ff.c **** 	ns[i] = '~';
 788:../sd_card/fatfs/ff.c **** 
 789:../sd_card/fatfs/ff.c **** 	/* Append the number */
 790:../sd_card/fatfs/ff.c **** 	for (j = 0; j < i && dst[j] != ' '; j++) {
 791:../sd_card/fatfs/ff.c **** 		if (IsDBCS1(dst[j])) {
 792:../sd_card/fatfs/ff.c **** 			if (j == i - 1) break;
 793:../sd_card/fatfs/ff.c **** 			j++;
 794:../sd_card/fatfs/ff.c **** 		}
 795:../sd_card/fatfs/ff.c **** 	}
 796:../sd_card/fatfs/ff.c **** 	do {
 797:../sd_card/fatfs/ff.c **** 		dst[j++] = (i < 8) ? ns[i++] : ' ';
 798:../sd_card/fatfs/ff.c **** 	} while (j < 8);
 799:../sd_card/fatfs/ff.c **** }
 800:../sd_card/fatfs/ff.c **** #endif
 801:../sd_card/fatfs/ff.c **** 
 802:../sd_card/fatfs/ff.c **** 
 803:../sd_card/fatfs/ff.c **** 
 804:../sd_card/fatfs/ff.c **** 
 805:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 806:../sd_card/fatfs/ff.c **** /* Calculate sum of an SFN                                               */
 807:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 808:../sd_card/fatfs/ff.c **** #if _USE_LFN
 809:../sd_card/fatfs/ff.c **** static
 810:../sd_card/fatfs/ff.c **** BYTE sum_sfn (
 811:../sd_card/fatfs/ff.c **** 	const BYTE *dir		/* Ptr to directory entry */
 812:../sd_card/fatfs/ff.c **** )
 813:../sd_card/fatfs/ff.c **** {
 814:../sd_card/fatfs/ff.c **** 	BYTE sum = 0;
 815:../sd_card/fatfs/ff.c **** 	int n = 11;
 816:../sd_card/fatfs/ff.c **** 
 817:../sd_card/fatfs/ff.c **** 	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 818:../sd_card/fatfs/ff.c **** 	return sum;
 819:../sd_card/fatfs/ff.c **** }
 820:../sd_card/fatfs/ff.c **** #endif
 821:../sd_card/fatfs/ff.c **** 
 822:../sd_card/fatfs/ff.c **** 
 823:../sd_card/fatfs/ff.c **** 
 824:../sd_card/fatfs/ff.c **** 
 825:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 826:../sd_card/fatfs/ff.c **** /* Directory handling - Find an object in the directory                  */
 827:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 828:../sd_card/fatfs/ff.c **** 
 829:../sd_card/fatfs/ff.c **** static
 830:../sd_card/fatfs/ff.c **** FRESULT dir_find (
 831:../sd_card/fatfs/ff.c **** 	DIR *dj			/* Pointer to the directory object linked to the file name */
 832:../sd_card/fatfs/ff.c **** )
 833:../sd_card/fatfs/ff.c **** {
 834:../sd_card/fatfs/ff.c **** 	FRESULT res;
 835:../sd_card/fatfs/ff.c **** 	BYTE c, *dir;
 836:../sd_card/fatfs/ff.c **** #if _USE_LFN
 837:../sd_card/fatfs/ff.c **** 	BYTE a, ord, sum;
 838:../sd_card/fatfs/ff.c **** #endif
 839:../sd_card/fatfs/ff.c **** 
 840:../sd_card/fatfs/ff.c **** 	res = dir_seek(dj, 0);			/* Rewind directory object */
 841:../sd_card/fatfs/ff.c **** 	if (res != FR_OK) return res;
 842:../sd_card/fatfs/ff.c **** 
 843:../sd_card/fatfs/ff.c **** #if _USE_LFN
 844:../sd_card/fatfs/ff.c **** 	ord = sum = 0xFF;
 845:../sd_card/fatfs/ff.c **** #endif
 846:../sd_card/fatfs/ff.c **** 	do {
 847:../sd_card/fatfs/ff.c **** 		res = move_window(dj->fs, dj->sect);
 848:../sd_card/fatfs/ff.c **** 		if (res != FR_OK) break;
 849:../sd_card/fatfs/ff.c **** 		dir = dj->dir;					/* Ptr to the directory entry of current index */
 850:../sd_card/fatfs/ff.c **** 		c = dir[DIR_Name];
 851:../sd_card/fatfs/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 852:../sd_card/fatfs/ff.c **** #if _USE_LFN	/* LFN configuration */
 853:../sd_card/fatfs/ff.c **** 		a = dir[DIR_Attr] & AM_MASK;
 854:../sd_card/fatfs/ff.c **** 		if (c == 0xE5 || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 855:../sd_card/fatfs/ff.c **** 			ord = 0xFF;
 856:../sd_card/fatfs/ff.c **** 		} else {
 857:../sd_card/fatfs/ff.c **** 			if (a == AM_LFN) {			/* An LFN entry is found */
 858:../sd_card/fatfs/ff.c **** 				if (dj->lfn) {
 859:../sd_card/fatfs/ff.c **** 					if (c & 0x40) {		/* Is it start of LFN sequence? */
 860:../sd_card/fatfs/ff.c **** 						sum = dir[LDIR_Chksum];
 861:../sd_card/fatfs/ff.c **** 						c &= 0xBF; ord = c;	/* LFN start order */
 862:../sd_card/fatfs/ff.c **** 						dj->lfn_idx = dj->index;
 863:../sd_card/fatfs/ff.c **** 					}
 864:../sd_card/fatfs/ff.c **** 					/* Check validity of the LFN entry and compare it with given name */
 865:../sd_card/fatfs/ff.c **** 					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
 866:../sd_card/fatfs/ff.c **** 				}
 867:../sd_card/fatfs/ff.c **** 			} else {					/* An SFN entry is found */
 868:../sd_card/fatfs/ff.c **** 				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 869:../sd_card/fatfs/ff.c **** 				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 870:../sd_card/fatfs/ff.c **** 				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
 871:../sd_card/fatfs/ff.c **** 			}
 872:../sd_card/fatfs/ff.c **** 		}
 873:../sd_card/fatfs/ff.c **** #else		/* Non LFN configuration */
 874:../sd_card/fatfs/ff.c **** 		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
 875:../sd_card/fatfs/ff.c **** 			break;
 876:../sd_card/fatfs/ff.c **** #endif
 877:../sd_card/fatfs/ff.c **** 		res = dir_next(dj, FALSE);		/* Next entry */
 878:../sd_card/fatfs/ff.c **** 	} while (res == FR_OK);
 879:../sd_card/fatfs/ff.c **** 
 880:../sd_card/fatfs/ff.c **** 	return res;
 881:../sd_card/fatfs/ff.c **** }
 882:../sd_card/fatfs/ff.c **** 
 883:../sd_card/fatfs/ff.c **** 
 884:../sd_card/fatfs/ff.c **** 
 885:../sd_card/fatfs/ff.c **** 
 886:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 887:../sd_card/fatfs/ff.c **** /* Read an object from the directory                                     */
 888:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 889:../sd_card/fatfs/ff.c **** #if _FS_MINIMIZE <= 1
 890:../sd_card/fatfs/ff.c **** static
 891:../sd_card/fatfs/ff.c **** FRESULT dir_read (
 892:../sd_card/fatfs/ff.c **** 	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
 893:../sd_card/fatfs/ff.c **** )
 894:../sd_card/fatfs/ff.c **** {
 895:../sd_card/fatfs/ff.c **** 	FRESULT res;
 896:../sd_card/fatfs/ff.c **** 	BYTE c, *dir;
 897:../sd_card/fatfs/ff.c **** #if _USE_LFN
 898:../sd_card/fatfs/ff.c **** 	BYTE a, ord = 0xFF, sum = 0xFF;
 899:../sd_card/fatfs/ff.c **** #endif
 900:../sd_card/fatfs/ff.c **** 
 901:../sd_card/fatfs/ff.c **** 	res = FR_NO_FILE;
 902:../sd_card/fatfs/ff.c **** 	while (dj->sect) {
 903:../sd_card/fatfs/ff.c **** 		res = move_window(dj->fs, dj->sect);
 904:../sd_card/fatfs/ff.c **** 		if (res != FR_OK) break;
 905:../sd_card/fatfs/ff.c **** 		dir = dj->dir;					/* Ptr to the directory entry of current index */
 906:../sd_card/fatfs/ff.c **** 		c = dir[DIR_Name];
 907:../sd_card/fatfs/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 908:../sd_card/fatfs/ff.c **** #if _USE_LFN	/* LFN configuration */
 909:../sd_card/fatfs/ff.c **** 		a = dir[DIR_Attr] & AM_MASK;
 910:../sd_card/fatfs/ff.c **** 		if (c == 0xE5 || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without
 911:../sd_card/fatfs/ff.c **** 			ord = 0xFF;
 912:../sd_card/fatfs/ff.c **** 		} else {
 913:../sd_card/fatfs/ff.c **** 			if (a == AM_LFN) {			/* An LFN entry is found */
 914:../sd_card/fatfs/ff.c **** 				if (c & 0x40) {			/* Is it start of LFN sequence? */
 915:../sd_card/fatfs/ff.c **** 					sum = dir[LDIR_Chksum];
 916:../sd_card/fatfs/ff.c **** 					c &= 0xBF; ord = c;
 917:../sd_card/fatfs/ff.c **** 					dj->lfn_idx = dj->index;
 918:../sd_card/fatfs/ff.c **** 				}
 919:../sd_card/fatfs/ff.c **** 				/* Check LFN validity and capture it */
 920:../sd_card/fatfs/ff.c **** 				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
 921:../sd_card/fatfs/ff.c **** 			} else {					/* An SFN entry is found */
 922:../sd_card/fatfs/ff.c **** 				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
 923:../sd_card/fatfs/ff.c **** 					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
 924:../sd_card/fatfs/ff.c **** 				break;
 925:../sd_card/fatfs/ff.c **** 			}
 926:../sd_card/fatfs/ff.c **** 		}
 927:../sd_card/fatfs/ff.c **** #else		/* Non LFN configuration */
 928:../sd_card/fatfs/ff.c **** 		if (c != 0xE5 && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
 929:../sd_card/fatfs/ff.c **** 			break;
 930:../sd_card/fatfs/ff.c **** #endif
 931:../sd_card/fatfs/ff.c **** 		res = dir_next(dj, FALSE);				/* Next entry */
 932:../sd_card/fatfs/ff.c **** 		if (res != FR_OK) break;
 933:../sd_card/fatfs/ff.c **** 	}
 934:../sd_card/fatfs/ff.c **** 
 935:../sd_card/fatfs/ff.c **** 	if (res != FR_OK) dj->sect = 0;
 936:../sd_card/fatfs/ff.c **** 
 937:../sd_card/fatfs/ff.c **** 	return res;
 938:../sd_card/fatfs/ff.c **** }
 939:../sd_card/fatfs/ff.c **** #endif
 940:../sd_card/fatfs/ff.c **** 
 941:../sd_card/fatfs/ff.c **** 
 942:../sd_card/fatfs/ff.c **** 
 943:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 944:../sd_card/fatfs/ff.c **** /* Register an object to the directory                                   */
 945:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 946:../sd_card/fatfs/ff.c **** #if !_FS_READONLY
 947:../sd_card/fatfs/ff.c **** static
 948:../sd_card/fatfs/ff.c **** FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_D
 949:../sd_card/fatfs/ff.c **** 	DIR *dj				/* Target directory with object name to be created */
 950:../sd_card/fatfs/ff.c **** )
 951:../sd_card/fatfs/ff.c **** {
 952:../sd_card/fatfs/ff.c **** 	FRESULT res;
 953:../sd_card/fatfs/ff.c **** 	BYTE c, *dir;
 954:../sd_card/fatfs/ff.c **** #if _USE_LFN	/* LFN configuration */
 955:../sd_card/fatfs/ff.c **** 	WORD n, ne, is;
 956:../sd_card/fatfs/ff.c **** 	BYTE sn[12], *fn, sum;
 957:../sd_card/fatfs/ff.c **** 	WCHAR *lfn;
 958:../sd_card/fatfs/ff.c **** 
 959:../sd_card/fatfs/ff.c **** 
 960:../sd_card/fatfs/ff.c **** 	fn = dj->fn; lfn = dj->lfn;
 961:../sd_card/fatfs/ff.c **** 	mem_cpy(sn, fn, 12);
 962:../sd_card/fatfs/ff.c **** 
 963:../sd_card/fatfs/ff.c **** 	if (_FS_RPATH && (sn[NS] & NS_DOT)) return FR_INVALID_NAME;	/* Cannot create dot entry */
 964:../sd_card/fatfs/ff.c **** 
 965:../sd_card/fatfs/ff.c **** 	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 966:../sd_card/fatfs/ff.c **** 		fn[NS] = 0; dj->lfn = NULL;			/* Find only SFN */
 967:../sd_card/fatfs/ff.c **** 		for (n = 1; n < 100; n++) {
 968:../sd_card/fatfs/ff.c **** 			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 969:../sd_card/fatfs/ff.c **** 			res = dir_find(dj);				/* Check if the name collides with existing SFN */
 970:../sd_card/fatfs/ff.c **** 			if (res != FR_OK) break;
 971:../sd_card/fatfs/ff.c **** 		}
 972:../sd_card/fatfs/ff.c **** 		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 973:../sd_card/fatfs/ff.c **** 		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 974:../sd_card/fatfs/ff.c **** 		fn[NS] = sn[NS]; dj->lfn = lfn;
 975:../sd_card/fatfs/ff.c **** 	}
 976:../sd_card/fatfs/ff.c **** 
 977:../sd_card/fatfs/ff.c **** 	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve reserve an SFN + LFN entries. */
 978:../sd_card/fatfs/ff.c **** 		for (ne = 0; lfn[ne]; ne++) ;
 979:../sd_card/fatfs/ff.c **** 		ne = (ne + 25) / 13;
 980:../sd_card/fatfs/ff.c **** 	} else {						/* Otherwise reserve only an SFN entry. */
 981:../sd_card/fatfs/ff.c **** 		ne = 1;
 982:../sd_card/fatfs/ff.c **** 	}
 983:../sd_card/fatfs/ff.c **** 
 984:../sd_card/fatfs/ff.c **** 	/* Reserve contiguous entries */
 985:../sd_card/fatfs/ff.c **** 	res = dir_seek(dj, 0);
 986:../sd_card/fatfs/ff.c **** 	if (res != FR_OK) return res;
 987:../sd_card/fatfs/ff.c **** 	n = is = 0;
 988:../sd_card/fatfs/ff.c **** 	do {
 989:../sd_card/fatfs/ff.c **** 		res = move_window(dj->fs, dj->sect);
 990:../sd_card/fatfs/ff.c **** 		if (res != FR_OK) break;
 991:../sd_card/fatfs/ff.c **** 		c = *dj->dir;				/* Check the entry status */
 992:../sd_card/fatfs/ff.c **** 		if (c == 0xE5 || c == 0) {	/* Is it a blank entry? */
 993:../sd_card/fatfs/ff.c **** 			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
 994:../sd_card/fatfs/ff.c **** 			if (++n == ne) break;	/* A contiguous entry that required count is found */
 995:../sd_card/fatfs/ff.c **** 		} else {
 996:../sd_card/fatfs/ff.c **** 			n = 0;					/* Not a blank entry. Restart to search */
 997:../sd_card/fatfs/ff.c **** 		}
 998:../sd_card/fatfs/ff.c **** 		res = dir_next(dj, TRUE);	/* Next entry with table stretch */
 999:../sd_card/fatfs/ff.c **** 	} while (res == FR_OK);
1000:../sd_card/fatfs/ff.c **** 
1001:../sd_card/fatfs/ff.c **** 	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
1002:../sd_card/fatfs/ff.c **** 		res = dir_seek(dj, is);
1003:../sd_card/fatfs/ff.c **** 		if (res == FR_OK) {
1004:../sd_card/fatfs/ff.c **** 			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
1005:../sd_card/fatfs/ff.c **** 			ne--;
1006:../sd_card/fatfs/ff.c **** 			do {					/* Store LFN entries in bottom first */
1007:../sd_card/fatfs/ff.c **** 				res = move_window(dj->fs, dj->sect);
1008:../sd_card/fatfs/ff.c **** 				if (res != FR_OK) break;
1009:../sd_card/fatfs/ff.c **** 				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
1010:../sd_card/fatfs/ff.c **** 				dj->fs->wflag = 1;
1011:../sd_card/fatfs/ff.c **** 				res = dir_next(dj, FALSE);	/* Next entry */
1012:../sd_card/fatfs/ff.c **** 			} while (res == FR_OK && --ne);
1013:../sd_card/fatfs/ff.c **** 		}
1014:../sd_card/fatfs/ff.c **** 	}
1015:../sd_card/fatfs/ff.c **** 
1016:../sd_card/fatfs/ff.c **** #else	/* Non LFN configuration */
1017:../sd_card/fatfs/ff.c **** 	res = dir_seek(dj, 0);
1018:../sd_card/fatfs/ff.c **** 	if (res == FR_OK) {
1019:../sd_card/fatfs/ff.c **** 		do {	/* Find a blank entry for the SFN */
1020:../sd_card/fatfs/ff.c **** 			res = move_window(dj->fs, dj->sect);
1021:../sd_card/fatfs/ff.c **** 			if (res != FR_OK) break;
1022:../sd_card/fatfs/ff.c **** 			c = *dj->dir;
1023:../sd_card/fatfs/ff.c **** 			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
1024:../sd_card/fatfs/ff.c **** 			res = dir_next(dj, TRUE);		/* Next entry with table streach */
1025:../sd_card/fatfs/ff.c **** 		} while (res == FR_OK);
1026:../sd_card/fatfs/ff.c **** 	}
1027:../sd_card/fatfs/ff.c **** #endif
1028:../sd_card/fatfs/ff.c **** 
1029:../sd_card/fatfs/ff.c **** 	if (res == FR_OK) {		/* Initialize the SFN entry */
1030:../sd_card/fatfs/ff.c **** 		res = move_window(dj->fs, dj->sect);
1031:../sd_card/fatfs/ff.c **** 		if (res == FR_OK) {
1032:../sd_card/fatfs/ff.c **** 			dir = dj->dir;
1033:../sd_card/fatfs/ff.c **** 			mem_set(dir, 0, 32);		/* Clean the entry */
1034:../sd_card/fatfs/ff.c **** 			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
1035:../sd_card/fatfs/ff.c **** 			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
1036:../sd_card/fatfs/ff.c **** 			dj->fs->wflag = 1;
1037:../sd_card/fatfs/ff.c **** 		}
1038:../sd_card/fatfs/ff.c **** 	}
1039:../sd_card/fatfs/ff.c **** 
1040:../sd_card/fatfs/ff.c **** 	return res;
1041:../sd_card/fatfs/ff.c **** }
1042:../sd_card/fatfs/ff.c **** #endif /* !_FS_READONLY */
1043:../sd_card/fatfs/ff.c **** 
1044:../sd_card/fatfs/ff.c **** 
1045:../sd_card/fatfs/ff.c **** 
1046:../sd_card/fatfs/ff.c **** 
1047:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1048:../sd_card/fatfs/ff.c **** /* Remove an object from the directory                                   */
1049:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1050:../sd_card/fatfs/ff.c **** #if !_FS_READONLY && !_FS_MINIMIZE
1051:../sd_card/fatfs/ff.c **** static
1052:../sd_card/fatfs/ff.c **** FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
1053:../sd_card/fatfs/ff.c **** 	DIR *dj				/* Directory object pointing the entry to be removed */
1054:../sd_card/fatfs/ff.c **** )
1055:../sd_card/fatfs/ff.c **** {
1056:../sd_card/fatfs/ff.c **** 	FRESULT res;
1057:../sd_card/fatfs/ff.c **** #if _USE_LFN	/* LFN configuration */
1058:../sd_card/fatfs/ff.c **** 	WORD i;
1059:../sd_card/fatfs/ff.c **** 
1060:../sd_card/fatfs/ff.c **** 	i = dj->index;	/* SFN index */
1061:../sd_card/fatfs/ff.c **** 	res = dir_seek(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of t
1062:../sd_card/fatfs/ff.c **** 	if (res == FR_OK) {
1063:../sd_card/fatfs/ff.c **** 		do {
1064:../sd_card/fatfs/ff.c **** 			res = move_window(dj->fs, dj->sect);
1065:../sd_card/fatfs/ff.c **** 			if (res != FR_OK) break;
1066:../sd_card/fatfs/ff.c **** 			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
1067:../sd_card/fatfs/ff.c **** 			dj->fs->wflag = 1;
1068:../sd_card/fatfs/ff.c **** 			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
1069:../sd_card/fatfs/ff.c **** 			res = dir_next(dj, FALSE);	/* Next entry */
1070:../sd_card/fatfs/ff.c **** 		} while (res == FR_OK);
1071:../sd_card/fatfs/ff.c **** 		if (res == FR_NO_FILE) res = FR_INT_ERR;
1072:../sd_card/fatfs/ff.c **** 	}
1073:../sd_card/fatfs/ff.c **** 
1074:../sd_card/fatfs/ff.c **** #else			/* Non LFN configuration */
1075:../sd_card/fatfs/ff.c **** 	res = dir_seek(dj, dj->index);
1076:../sd_card/fatfs/ff.c **** 	if (res == FR_OK) {
1077:../sd_card/fatfs/ff.c **** 		res = move_window(dj->fs, dj->sect);
1078:../sd_card/fatfs/ff.c **** 		if (res == FR_OK) {
1079:../sd_card/fatfs/ff.c **** 			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
1080:../sd_card/fatfs/ff.c **** 			dj->fs->wflag = 1;
1081:../sd_card/fatfs/ff.c **** 		}
1082:../sd_card/fatfs/ff.c **** 	}
1083:../sd_card/fatfs/ff.c **** #endif
1084:../sd_card/fatfs/ff.c **** 
1085:../sd_card/fatfs/ff.c **** 	return res;
1086:../sd_card/fatfs/ff.c **** }
1087:../sd_card/fatfs/ff.c **** #endif /* !_FS_READONLY */
1088:../sd_card/fatfs/ff.c **** 
1089:../sd_card/fatfs/ff.c **** 
1090:../sd_card/fatfs/ff.c **** 
1091:../sd_card/fatfs/ff.c **** 
1092:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1093:../sd_card/fatfs/ff.c **** /* Pick a segment and create the object name in directory form           */
1094:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1095:../sd_card/fatfs/ff.c **** 
1096:../sd_card/fatfs/ff.c **** static
1097:../sd_card/fatfs/ff.c **** FRESULT create_name (
1098:../sd_card/fatfs/ff.c **** 	DIR *dj,			/* Pointer to the directory object */
1099:../sd_card/fatfs/ff.c **** 	const XCHAR **path	/* Pointer to pointer to the segment in the path string */
1100:../sd_card/fatfs/ff.c **** )
1101:../sd_card/fatfs/ff.c **** {
1102:../sd_card/fatfs/ff.c **** #ifdef _EXCVT
1103:../sd_card/fatfs/ff.c **** 	static const BYTE cvt[] = _EXCVT;
1104:../sd_card/fatfs/ff.c **** #endif
1105:../sd_card/fatfs/ff.c **** 
1106:../sd_card/fatfs/ff.c **** #if _USE_LFN	/* LFN configuration */
1107:../sd_card/fatfs/ff.c **** 	BYTE b, cf;
1108:../sd_card/fatfs/ff.c **** 	WCHAR w, *lfn;
1109:../sd_card/fatfs/ff.c **** 	int i, ni, si, di;
1110:../sd_card/fatfs/ff.c **** 	const XCHAR *p;
1111:../sd_card/fatfs/ff.c **** 
1112:../sd_card/fatfs/ff.c **** 	/* Create LFN in Unicode */
1113:../sd_card/fatfs/ff.c **** 	si = di = 0;
1114:../sd_card/fatfs/ff.c **** 	p = *path;
1115:../sd_card/fatfs/ff.c **** 	lfn = dj->lfn;
1116:../sd_card/fatfs/ff.c **** 	for (;;) {
1117:../sd_card/fatfs/ff.c **** 		w = p[si++];					/* Get a character */
1118:../sd_card/fatfs/ff.c **** 		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
1119:../sd_card/fatfs/ff.c **** 		if (di >= _MAX_LFN)				/* Reject too long name */
1120:../sd_card/fatfs/ff.c **** 			return FR_INVALID_NAME;
1121:../sd_card/fatfs/ff.c **** #if !_LFN_UNICODE
1122:../sd_card/fatfs/ff.c **** 		w &= 0xFF;
1123:../sd_card/fatfs/ff.c **** 		if (IsDBCS1(w)) {				/* If it is a DBC 1st byte */
1124:../sd_card/fatfs/ff.c **** 			b = p[si++];				/* Get 2nd byte */
1125:../sd_card/fatfs/ff.c **** 			if (!IsDBCS2(b))			/* Reject invalid code for DBC */
1126:../sd_card/fatfs/ff.c **** 				return FR_INVALID_NAME;
1127:../sd_card/fatfs/ff.c **** 			w = (w << 8) + b;
1128:../sd_card/fatfs/ff.c **** 		}
1129:../sd_card/fatfs/ff.c **** 		w = ff_convert(w, 1);			/* Convert OEM to Unicode */
1130:../sd_card/fatfs/ff.c **** 		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
1131:../sd_card/fatfs/ff.c **** #endif
1132:../sd_card/fatfs/ff.c **** 		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
1133:../sd_card/fatfs/ff.c **** 			return FR_INVALID_NAME;
1134:../sd_card/fatfs/ff.c **** 		lfn[di++] = w;					/* Store the Unicode char */
1135:../sd_card/fatfs/ff.c **** 	}
1136:../sd_card/fatfs/ff.c **** 	*path = &p[si];						/* Return pointer to the next segment */
1137:../sd_card/fatfs/ff.c **** 	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
1138:../sd_card/fatfs/ff.c **** #if _FS_RPATH
1139:../sd_card/fatfs/ff.c **** 	if ((di == 1 && lfn[di - 1] == '.') || /* Is this a dot entry? */
1140:../sd_card/fatfs/ff.c **** 		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {
1141:../sd_card/fatfs/ff.c **** 		lfn[di] = 0;
1142:../sd_card/fatfs/ff.c **** 		for (i = 0; i < 11; i++)
1143:../sd_card/fatfs/ff.c **** 			dj->fn[i] = (i < di) ? '.' : ' ';
1144:../sd_card/fatfs/ff.c **** 		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
1145:../sd_card/fatfs/ff.c **** 		return FR_OK;
1146:../sd_card/fatfs/ff.c **** 	}
1147:../sd_card/fatfs/ff.c **** #endif
1148:../sd_card/fatfs/ff.c **** 	while (di) {						/* Strip trailing spaces and dots */
1149:../sd_card/fatfs/ff.c **** 		w = lfn[di - 1];
1150:../sd_card/fatfs/ff.c **** 		if (w != ' ' && w != '.') break;
1151:../sd_card/fatfs/ff.c **** 		di--;
1152:../sd_card/fatfs/ff.c **** 	}
1153:../sd_card/fatfs/ff.c **** 	if (!di) return FR_INVALID_NAME;	/* Reject null string */
1154:../sd_card/fatfs/ff.c **** 
1155:../sd_card/fatfs/ff.c **** 	lfn[di] = 0;						/* LFN is created */
1156:../sd_card/fatfs/ff.c **** 
1157:../sd_card/fatfs/ff.c **** 	/* Create SFN in directory form */
1158:../sd_card/fatfs/ff.c **** 	mem_set(dj->fn, ' ', 11);
1159:../sd_card/fatfs/ff.c **** 	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
1160:../sd_card/fatfs/ff.c **** 	if (si) cf |= NS_LOSS | NS_LFN;
1161:../sd_card/fatfs/ff.c **** 	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
1162:../sd_card/fatfs/ff.c **** 
1163:../sd_card/fatfs/ff.c **** 	b = i = 0; ni = 8;
1164:../sd_card/fatfs/ff.c **** 	for (;;) {
1165:../sd_card/fatfs/ff.c **** 		w = lfn[si++];					/* Get an LFN char */
1166:../sd_card/fatfs/ff.c **** 		if (!w) break;					/* Break on end of the LFN */
1167:../sd_card/fatfs/ff.c **** 		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
1168:../sd_card/fatfs/ff.c **** 			cf |= NS_LOSS | NS_LFN; continue;
1169:../sd_card/fatfs/ff.c **** 		}
1170:../sd_card/fatfs/ff.c **** 
1171:../sd_card/fatfs/ff.c **** 		if (i >= ni || si == di) {		/* Extension or end of SFN */
1172:../sd_card/fatfs/ff.c **** 			if (ni == 11) {				/* Long extension */
1173:../sd_card/fatfs/ff.c **** 				cf |= NS_LOSS | NS_LFN; break;
1174:../sd_card/fatfs/ff.c **** 			}
1175:../sd_card/fatfs/ff.c **** 			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
1176:../sd_card/fatfs/ff.c **** 			if (si > di) break;			/* No extension */
1177:../sd_card/fatfs/ff.c **** 			si = di; i = 8; ni = 11;	/* Enter extension section */
1178:../sd_card/fatfs/ff.c **** 			b <<= 2; continue;
1179:../sd_card/fatfs/ff.c **** 		}
1180:../sd_card/fatfs/ff.c **** 
1181:../sd_card/fatfs/ff.c **** 		if (w >= 0x80) {				/* Non ASCII char */
1182:../sd_card/fatfs/ff.c **** #ifdef _EXCVT
1183:../sd_card/fatfs/ff.c **** 			w = ff_convert(w, 0);		/* Unicode -> OEM code */
1184:../sd_card/fatfs/ff.c **** 			if (w) w = cvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
1185:../sd_card/fatfs/ff.c **** #else
1186:../sd_card/fatfs/ff.c **** 			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
1187:../sd_card/fatfs/ff.c **** #endif
1188:../sd_card/fatfs/ff.c **** 			cf |= NS_LFN;				/* Force create LFN entry */
1189:../sd_card/fatfs/ff.c **** 		}
1190:../sd_card/fatfs/ff.c **** 
1191:../sd_card/fatfs/ff.c **** 		if (_DF1S && w >= 0x100) {		/* Double byte char */
1192:../sd_card/fatfs/ff.c **** 			if (i >= ni - 1) {
1193:../sd_card/fatfs/ff.c **** 				cf |= NS_LOSS | NS_LFN; i = ni; continue;
1194:../sd_card/fatfs/ff.c **** 			}
1195:../sd_card/fatfs/ff.c **** 			dj->fn[i++] = (BYTE)(w >> 8);
1196:../sd_card/fatfs/ff.c **** 		} else {						/* Single byte char */
1197:../sd_card/fatfs/ff.c **** 			if (!w || chk_chr("+,;[=]", w)) {		/* Replace illegal chars for SFN */
1198:../sd_card/fatfs/ff.c **** 				w = '_'; cf |= NS_LOSS | NS_LFN;	/* Lossy conversion */
1199:../sd_card/fatfs/ff.c **** 			} else {
1200:../sd_card/fatfs/ff.c **** 				if (IsUpper(w)) {		/* ASCII large capital */
1201:../sd_card/fatfs/ff.c **** 					b |= 2;
1202:../sd_card/fatfs/ff.c **** 				} else {
1203:../sd_card/fatfs/ff.c **** 					if (IsLower(w)) {	/* ASCII small capital */
1204:../sd_card/fatfs/ff.c **** 						b |= 1; w -= 0x20;
1205:../sd_card/fatfs/ff.c **** 					}
1206:../sd_card/fatfs/ff.c **** 				}
1207:../sd_card/fatfs/ff.c **** 			}
1208:../sd_card/fatfs/ff.c **** 		}
1209:../sd_card/fatfs/ff.c **** 		dj->fn[i++] = (BYTE)w;
1210:../sd_card/fatfs/ff.c **** 	}
1211:../sd_card/fatfs/ff.c **** 
1212:../sd_card/fatfs/ff.c **** 	if (dj->fn[0] == 0xE5) dj->fn[0] = 0x05;	/* If the first char collides with deleted mark, replace 
1213:../sd_card/fatfs/ff.c **** 
1214:../sd_card/fatfs/ff.c **** 	if (ni == 8) b <<= 2;
1215:../sd_card/fatfs/ff.c **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capital
1216:../sd_card/fatfs/ff.c **** 		cf |= NS_LFN;
1217:../sd_card/fatfs/ff.c **** 	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are create
1218:../sd_card/fatfs/ff.c **** 		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
1219:../sd_card/fatfs/ff.c **** 		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
1220:../sd_card/fatfs/ff.c **** 	}
1221:../sd_card/fatfs/ff.c **** 
1222:../sd_card/fatfs/ff.c **** 	dj->fn[NS] = cf;	/* SFN is created */
1223:../sd_card/fatfs/ff.c **** 
1224:../sd_card/fatfs/ff.c **** 	return FR_OK;
1225:../sd_card/fatfs/ff.c **** 
1226:../sd_card/fatfs/ff.c **** 
1227:../sd_card/fatfs/ff.c **** #else	/* Non-LFN configuration */
1228:../sd_card/fatfs/ff.c **** 	BYTE b, c, d, *sfn;
1229:../sd_card/fatfs/ff.c **** 	int ni, si, i;
1230:../sd_card/fatfs/ff.c **** 	const char *p;
1231:../sd_card/fatfs/ff.c **** 
1232:../sd_card/fatfs/ff.c **** 	/* Create file name in directory form */
1233:../sd_card/fatfs/ff.c **** 	sfn = dj->fn;
1234:../sd_card/fatfs/ff.c **** 	mem_set(sfn, ' ', 11);
1235:../sd_card/fatfs/ff.c **** 	si = i = b = 0; ni = 8;
1236:../sd_card/fatfs/ff.c **** 	p = *path;
1237:../sd_card/fatfs/ff.c **** #if _FS_RPATH
1238:../sd_card/fatfs/ff.c **** 	if (p[si] == '.') { /* Is this a dot entry? */
1239:../sd_card/fatfs/ff.c **** 		for (;;) {
1240:../sd_card/fatfs/ff.c **** 			c = p[si++];
1241:../sd_card/fatfs/ff.c **** 			if (c != '.' || si >= 3) break;
1242:../sd_card/fatfs/ff.c **** 			sfn[i++] = c;
1243:../sd_card/fatfs/ff.c **** 		}
1244:../sd_card/fatfs/ff.c **** 		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
1245:../sd_card/fatfs/ff.c **** 		*path = &p[si];									/* Return pointer to the next segment */
1246:../sd_card/fatfs/ff.c **** 		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
1247:../sd_card/fatfs/ff.c **** 		return FR_OK;
1248:../sd_card/fatfs/ff.c **** 	}
1249:../sd_card/fatfs/ff.c **** #endif
1250:../sd_card/fatfs/ff.c **** 	for (;;) {
1251:../sd_card/fatfs/ff.c **** 		c = p[si++];
1252:../sd_card/fatfs/ff.c **** 		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
1253:../sd_card/fatfs/ff.c **** 		if (c == '.' || i >= ni) {
1254:../sd_card/fatfs/ff.c **** 			if (ni != 8 || c != '.') return FR_INVALID_NAME;
1255:../sd_card/fatfs/ff.c **** 			i = 8; ni = 11;
1256:../sd_card/fatfs/ff.c **** 			b <<= 2; continue;
1257:../sd_card/fatfs/ff.c **** 		}
1258:../sd_card/fatfs/ff.c **** 		if (c >= 0x80) {				/* Extended char */
1259:../sd_card/fatfs/ff.c **** #ifdef _EXCVT
1260:../sd_card/fatfs/ff.c **** 			c = cvt[c - 0x80];			/* Convert extend char (SBCS) */
1261:../sd_card/fatfs/ff.c **** #else
1262:../sd_card/fatfs/ff.c **** 			b |= 3;						/* Eliminate NT flag if ext char is exist */
1263:../sd_card/fatfs/ff.c **** #if !_DF1S	/* ASCII only cfg */
1264:../sd_card/fatfs/ff.c **** 			return FR_INVALID_NAME;
1265:../sd_card/fatfs/ff.c **** #endif
1266:../sd_card/fatfs/ff.c **** #endif
1267:../sd_card/fatfs/ff.c **** 		}
1268:../sd_card/fatfs/ff.c **** 		if (IsDBCS1(c)) {				/* DBC 1st byte? */
1269:../sd_card/fatfs/ff.c **** 			d = p[si++];				/* Get 2nd byte */
1270:../sd_card/fatfs/ff.c **** 			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
1271:../sd_card/fatfs/ff.c **** 				return FR_INVALID_NAME;
1272:../sd_card/fatfs/ff.c **** 			sfn[i++] = c;
1273:../sd_card/fatfs/ff.c **** 			sfn[i++] = d;
1274:../sd_card/fatfs/ff.c **** 		} else {						/* Single byte code */
1275:../sd_card/fatfs/ff.c **** 			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject illegal chrs for SFN */
1276:../sd_card/fatfs/ff.c **** 				return FR_INVALID_NAME;
1277:../sd_card/fatfs/ff.c **** 			if (IsUpper(c)) {			/* ASCII large capital? */
1278:../sd_card/fatfs/ff.c **** 				b |= 2;
1279:../sd_card/fatfs/ff.c **** 			} else {
1280:../sd_card/fatfs/ff.c **** 				if (IsLower(c)) {		/* ASCII small capital? */
1281:../sd_card/fatfs/ff.c **** 					b |= 1; c -= 0x20;
1282:../sd_card/fatfs/ff.c **** 				}
1283:../sd_card/fatfs/ff.c **** 			}
1284:../sd_card/fatfs/ff.c **** 			sfn[i++] = c;
1285:../sd_card/fatfs/ff.c **** 		}
1286:../sd_card/fatfs/ff.c **** 	}
1287:../sd_card/fatfs/ff.c **** 	*path = &p[si];						/* Return pointer to the next segment */
1288:../sd_card/fatfs/ff.c **** 	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
1289:../sd_card/fatfs/ff.c **** 
1290:../sd_card/fatfs/ff.c **** 	if (!i) return FR_INVALID_NAME;		/* Reject null string */
1291:../sd_card/fatfs/ff.c **** 	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
1292:../sd_card/fatfs/ff.c **** 
1293:../sd_card/fatfs/ff.c **** 	if (ni == 8) b <<= 2;
1294:../sd_card/fatfs/ff.c **** 	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
1295:../sd_card/fatfs/ff.c **** 	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */
1296:../sd_card/fatfs/ff.c **** 
1297:../sd_card/fatfs/ff.c **** 	sfn[NS] = c;		/* Store NT flag, File name is created */
1298:../sd_card/fatfs/ff.c **** 
1299:../sd_card/fatfs/ff.c **** 	return FR_OK;
1300:../sd_card/fatfs/ff.c **** #endif
1301:../sd_card/fatfs/ff.c **** }
1302:../sd_card/fatfs/ff.c **** 
1303:../sd_card/fatfs/ff.c **** 
1304:../sd_card/fatfs/ff.c **** 
1305:../sd_card/fatfs/ff.c **** 
1306:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1307:../sd_card/fatfs/ff.c **** /* Get file information from directory entry                             */
1308:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1309:../sd_card/fatfs/ff.c **** #if _FS_MINIMIZE <= 1
1310:../sd_card/fatfs/ff.c **** static
1311:../sd_card/fatfs/ff.c **** void get_fileinfo (		/* No return code */
1312:../sd_card/fatfs/ff.c **** 	DIR *dj,			/* Pointer to the directory object */
1313:../sd_card/fatfs/ff.c **** 	FILINFO *fno	 	/* Pointer to the file information to be filled */
1314:../sd_card/fatfs/ff.c **** )
1315:../sd_card/fatfs/ff.c **** {
1316:../sd_card/fatfs/ff.c **** 	int i;
1317:../sd_card/fatfs/ff.c **** 	BYTE c, nt, *dir;
1318:../sd_card/fatfs/ff.c **** 	char *p;
1319:../sd_card/fatfs/ff.c **** 
1320:../sd_card/fatfs/ff.c **** 
1321:../sd_card/fatfs/ff.c **** 	p = fno->fname;
1322:../sd_card/fatfs/ff.c **** 	if (dj->sect) {
1323:../sd_card/fatfs/ff.c **** 		dir = dj->dir;
1324:../sd_card/fatfs/ff.c **** 		nt = dir[DIR_NTres];		/* NT flag */
1325:../sd_card/fatfs/ff.c **** 		for (i = 0; i < 8; i++) {	/* Copy name body */
1326:../sd_card/fatfs/ff.c **** 			c = dir[i];
1327:../sd_card/fatfs/ff.c **** 			if (c == ' ') break;
1328:../sd_card/fatfs/ff.c **** 			if (c == 0x05) c = 0xE5;
1329:../sd_card/fatfs/ff.c **** 			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
1330:../sd_card/fatfs/ff.c **** 			*p++ = c;
1331:../sd_card/fatfs/ff.c **** 		}
1332:../sd_card/fatfs/ff.c **** 		if (dir[8] != ' ') {		/* Copy name extension */
1333:../sd_card/fatfs/ff.c **** 			*p++ = '.';
1334:../sd_card/fatfs/ff.c **** 			for (i = 8; i < 11; i++) {
1335:../sd_card/fatfs/ff.c **** 				c = dir[i];
1336:../sd_card/fatfs/ff.c **** 				if (c == ' ') break;
1337:../sd_card/fatfs/ff.c **** 				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
1338:../sd_card/fatfs/ff.c **** 				*p++ = c;
1339:../sd_card/fatfs/ff.c **** 			}
1340:../sd_card/fatfs/ff.c **** 		}
1341:../sd_card/fatfs/ff.c **** 		fno->fattrib = dir[DIR_Attr];				/* Attribute */
1342:../sd_card/fatfs/ff.c **** 		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
1343:../sd_card/fatfs/ff.c **** 		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
1344:../sd_card/fatfs/ff.c **** 		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
1345:../sd_card/fatfs/ff.c **** 	}
1346:../sd_card/fatfs/ff.c **** 	*p = 0;
1347:../sd_card/fatfs/ff.c **** 
1348:../sd_card/fatfs/ff.c **** #if _USE_LFN
1349:../sd_card/fatfs/ff.c **** 	if (fno->lfname) {
1350:../sd_card/fatfs/ff.c **** 		XCHAR *tp = fno->lfname;
1351:../sd_card/fatfs/ff.c **** 		WCHAR w, *lfn;
1352:../sd_card/fatfs/ff.c **** 
1353:../sd_card/fatfs/ff.c **** 		i = 0;
1354:../sd_card/fatfs/ff.c **** 		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
1355:../sd_card/fatfs/ff.c **** 			lfn = dj->lfn;
1356:../sd_card/fatfs/ff.c **** 			while ((w = *lfn++) != 0) {			/* Get an LFN char */
1357:../sd_card/fatfs/ff.c **** #if !_LFN_UNICODE
1358:../sd_card/fatfs/ff.c **** 				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
1359:../sd_card/fatfs/ff.c **** 				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
1360:../sd_card/fatfs/ff.c **** 				if (_DF1S && w >= 0x100)		/* Put 1st byte if it is a DBC */
1361:../sd_card/fatfs/ff.c **** 					tp[i++] = (XCHAR)(w >> 8);
1362:../sd_card/fatfs/ff.c **** #endif
1363:../sd_card/fatfs/ff.c **** 				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overrun, no LFN */
1364:../sd_card/fatfs/ff.c **** 				tp[i++] = (XCHAR)w;
1365:../sd_card/fatfs/ff.c **** 			}
1366:../sd_card/fatfs/ff.c **** 		}
1367:../sd_card/fatfs/ff.c **** 		tp[i] = 0;	/* Terminator */
1368:../sd_card/fatfs/ff.c **** 	}
1369:../sd_card/fatfs/ff.c **** #endif
1370:../sd_card/fatfs/ff.c **** }
1371:../sd_card/fatfs/ff.c **** #endif /* _FS_MINIMIZE <= 1 */
1372:../sd_card/fatfs/ff.c **** 
1373:../sd_card/fatfs/ff.c **** 
1374:../sd_card/fatfs/ff.c **** 
1375:../sd_card/fatfs/ff.c **** 
1376:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1377:../sd_card/fatfs/ff.c **** /* Follow a file path                                                    */
1378:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1379:../sd_card/fatfs/ff.c **** 
1380:../sd_card/fatfs/ff.c **** static
1381:../sd_card/fatfs/ff.c **** FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
1382:../sd_card/fatfs/ff.c **** 	DIR *dj,			/* Directory object to return last directory and found object */
1383:../sd_card/fatfs/ff.c **** 	const XCHAR *path	/* Full-path string to find a file or directory */
1384:../sd_card/fatfs/ff.c **** )
1385:../sd_card/fatfs/ff.c **** {
1386:../sd_card/fatfs/ff.c **** 	FRESULT res;
1387:../sd_card/fatfs/ff.c **** 	BYTE *dir, last;
1388:../sd_card/fatfs/ff.c **** 
1389:../sd_card/fatfs/ff.c **** 
1390:../sd_card/fatfs/ff.c **** 	while (!_USE_LFN && *path == ' ') path++;	/* Skip leading spaces */
1391:../sd_card/fatfs/ff.c **** #if _FS_RPATH
1392:../sd_card/fatfs/ff.c **** 	if (*path == '/' || *path == '\\') { /* There is a heading separator */
1393:../sd_card/fatfs/ff.c **** 		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
1394:../sd_card/fatfs/ff.c **** 	} else {							/* No heading separator */
1395:../sd_card/fatfs/ff.c **** 		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
1396:../sd_card/fatfs/ff.c **** 	}
1397:../sd_card/fatfs/ff.c **** #else
1398:../sd_card/fatfs/ff.c **** 	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
1399:../sd_card/fatfs/ff.c **** 		path++;
1400:../sd_card/fatfs/ff.c **** 	dj->sclust = 0;						/* Start from the root dir */
1401:../sd_card/fatfs/ff.c **** #endif
1402:../sd_card/fatfs/ff.c **** 
1403:../sd_card/fatfs/ff.c **** 	if ((UINT)*path < ' ') {			/* Null path means the start directory itself */
1404:../sd_card/fatfs/ff.c **** 		res = dir_seek(dj, 0);
1405:../sd_card/fatfs/ff.c **** 		dj->dir = NULL;
1406:../sd_card/fatfs/ff.c **** 
1407:../sd_card/fatfs/ff.c **** 	} else {							/* Follow path */
1408:../sd_card/fatfs/ff.c **** 		for (;;) {
1409:../sd_card/fatfs/ff.c **** 			res = create_name(dj, &path);	/* Get a segment */
1410:../sd_card/fatfs/ff.c **** 			if (res != FR_OK) break;
1411:../sd_card/fatfs/ff.c **** 			res = dir_find(dj);				/* Find it */
1412:../sd_card/fatfs/ff.c **** 			last = *(dj->fn+NS) & NS_LAST;
1413:../sd_card/fatfs/ff.c **** 			if (res != FR_OK) {				/* Could not find the object */
1414:../sd_card/fatfs/ff.c **** 				if (res == FR_NO_FILE && !last)
1415:../sd_card/fatfs/ff.c **** 					res = FR_NO_PATH;
1416:../sd_card/fatfs/ff.c **** 				break;
1417:../sd_card/fatfs/ff.c **** 			}
1418:../sd_card/fatfs/ff.c **** 			if (last) break;				/* Last segment match. Function completed. */
1419:../sd_card/fatfs/ff.c **** 			dir = dj->dir;					/* There is next segment. Follow the sub directory */
1420:../sd_card/fatfs/ff.c **** 			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
1421:../sd_card/fatfs/ff.c **** 				res = FR_NO_PATH; break;
1422:../sd_card/fatfs/ff.c **** 			}
1423:../sd_card/fatfs/ff.c **** 			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
1424:../sd_card/fatfs/ff.c **** 		}
1425:../sd_card/fatfs/ff.c **** 	}
1426:../sd_card/fatfs/ff.c **** 
1427:../sd_card/fatfs/ff.c **** 	return res;
1428:../sd_card/fatfs/ff.c **** }
1429:../sd_card/fatfs/ff.c **** 
1430:../sd_card/fatfs/ff.c **** 
1431:../sd_card/fatfs/ff.c **** 
1432:../sd_card/fatfs/ff.c **** 
1433:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1434:../sd_card/fatfs/ff.c **** /* Load boot record and check if it is an FAT boot record                */
1435:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1436:../sd_card/fatfs/ff.c **** 
1437:../sd_card/fatfs/ff.c **** static
1438:../sd_card/fatfs/ff.c **** BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 
1439:../sd_card/fatfs/ff.c **** 	FATFS *fs,	/* File system object */
1440:../sd_card/fatfs/ff.c **** 	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
1441:../sd_card/fatfs/ff.c **** )
1442:../sd_card/fatfs/ff.c **** {
1443:../sd_card/fatfs/ff.c **** 	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
1444:../sd_card/fatfs/ff.c **** 		return 3;
1445:../sd_card/fatfs/ff.c **** 	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 
1446:../sd_card/fatfs/ff.c **** 		return 2;
1447:../sd_card/fatfs/ff.c **** 
1448:../sd_card/fatfs/ff.c **** 	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
1449:../sd_card/fatfs/ff.c **** 		return 0;
1450:../sd_card/fatfs/ff.c **** 	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
1451:../sd_card/fatfs/ff.c **** 		return 0;
1452:../sd_card/fatfs/ff.c **** 
1453:../sd_card/fatfs/ff.c **** 	return 1;
1454:../sd_card/fatfs/ff.c **** }
1455:../sd_card/fatfs/ff.c **** 
1456:../sd_card/fatfs/ff.c **** 
1457:../sd_card/fatfs/ff.c **** 
1458:../sd_card/fatfs/ff.c **** 
1459:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1460:../sd_card/fatfs/ff.c **** /* Make sure that the file system is valid                               */
1461:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1462:../sd_card/fatfs/ff.c **** 
1463:../sd_card/fatfs/ff.c **** 
1464:../sd_card/fatfs/ff.c **** FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
1465:../sd_card/fatfs/ff.c **** 	const XCHAR **path,	/* Pointer to pointer to the path name (drive number) */
1466:../sd_card/fatfs/ff.c **** 	FATFS **rfs,		/* Pointer to pointer to the found file system object */
1467:../sd_card/fatfs/ff.c **** 	BYTE chk_wp			/* !=0: Check media write protection for write access */
1468:../sd_card/fatfs/ff.c **** )
1469:../sd_card/fatfs/ff.c **** {
1470:../sd_card/fatfs/ff.c **** 	BYTE fmt, *tbl;
1471:../sd_card/fatfs/ff.c **** 	UINT vol;
1472:../sd_card/fatfs/ff.c **** 	DSTATUS stat;
1473:../sd_card/fatfs/ff.c **** 	DWORD bsect, fsize, tsect, mclst;
1474:../sd_card/fatfs/ff.c **** 	const XCHAR *p = *path;
1475:../sd_card/fatfs/ff.c **** 	FATFS *fs;
1476:../sd_card/fatfs/ff.c **** 
1477:../sd_card/fatfs/ff.c **** 	/* Get logical drive number from the path name */
1478:../sd_card/fatfs/ff.c **** 	vol = p[0] - '0';				/* Is there a drive number? */
1479:../sd_card/fatfs/ff.c **** 	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
1480:../sd_card/fatfs/ff.c **** 		p += 2; *path = p;			/* Return pointer to the path name */
1481:../sd_card/fatfs/ff.c **** 	} else {						/* No drive number is given */
1482:../sd_card/fatfs/ff.c **** #if _FS_RPATH
1483:../sd_card/fatfs/ff.c **** 		vol = Drive;				/* Use current drive */
1484:../sd_card/fatfs/ff.c **** #else
1485:../sd_card/fatfs/ff.c **** 		vol = 0;					/* Use drive 0 */
1486:../sd_card/fatfs/ff.c **** #endif
1487:../sd_card/fatfs/ff.c **** 	}
1488:../sd_card/fatfs/ff.c **** 
1489:../sd_card/fatfs/ff.c **** 	/* Check if the logical drive is valid or not */
1490:../sd_card/fatfs/ff.c **** 	if (vol >= _DRIVES) 			/* Is the drive number valid? */
1491:../sd_card/fatfs/ff.c **** 		return FR_INVALID_DRIVE;
1492:../sd_card/fatfs/ff.c **** 	*rfs = fs = FatFs[vol];			/* Return pointer to the corresponding file system object */
1493:../sd_card/fatfs/ff.c **** 	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object available? */
1494:../sd_card/fatfs/ff.c **** 
1495:../sd_card/fatfs/ff.c **** 	ENTER_FF(fs);					/* Lock file system */
1496:../sd_card/fatfs/ff.c **** 
1497:../sd_card/fatfs/ff.c **** 	if (fs->fs_type) {				/* If the logical drive has been mounted */
1498:../sd_card/fatfs/ff.c **** 		stat = disk_status(fs->drive);
1499:../sd_card/fatfs/ff.c **** 		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed),
1500:../sd_card/fatfs/ff.c **** #if !_FS_READONLY
1501:../sd_card/fatfs/ff.c **** 			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
1502:../sd_card/fatfs/ff.c **** 				return FR_WRITE_PROTECTED;
1503:../sd_card/fatfs/ff.c **** #endif
1504:../sd_card/fatfs/ff.c **** 			return FR_OK;			/* The file system object is valid */
1505:../sd_card/fatfs/ff.c **** 		}
1506:../sd_card/fatfs/ff.c **** 	}
1507:../sd_card/fatfs/ff.c **** 
1508:../sd_card/fatfs/ff.c **** 	/* The logical drive must be mounted. Following code attempts to mount the volume */
1509:../sd_card/fatfs/ff.c **** 
1510:../sd_card/fatfs/ff.c **** 	fs->fs_type = 0;					/* Clear the file system object */
1511:../sd_card/fatfs/ff.c **** 	fs->drive = (BYTE)LD2PD(vol);		/* Bind the logical drive and a physical drive */
1512:../sd_card/fatfs/ff.c **** 	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
1513:../sd_card/fatfs/ff.c **** 	if (stat & STA_NOINIT)				/* Check if the drive is ready */
1514:../sd_card/fatfs/ff.c **** 		return FR_NOT_READY;
1515:../sd_card/fatfs/ff.c **** #if _MAX_SS != 512						/* Get disk sector size if needed */
1516:../sd_card/fatfs/ff.c **** 	if (disk_ioctl(fs->drive, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
1517:../sd_card/fatfs/ff.c **** 		return FR_NO_FILESYSTEM;
1518:../sd_card/fatfs/ff.c **** #endif
1519:../sd_card/fatfs/ff.c **** #if !_FS_READONLY
1520:../sd_card/fatfs/ff.c **** 	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
1521:../sd_card/fatfs/ff.c **** 		return FR_WRITE_PROTECTED;
1522:../sd_card/fatfs/ff.c **** #endif
1523:../sd_card/fatfs/ff.c **** 	/* Search FAT partition on the drive */
1524:../sd_card/fatfs/ff.c **** 	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
1525:../sd_card/fatfs/ff.c **** 	if (fmt == 1) {						/* Not an FAT boot record, it may be partitioned */
1526:../sd_card/fatfs/ff.c **** 		/* Check a partition listed in top of the partition table */
1527:../sd_card/fatfs/ff.c **** 		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
1528:../sd_card/fatfs/ff.c **** 		if (tbl[4]) {									/* Is the partition existing? */
1529:../sd_card/fatfs/ff.c **** 			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
1530:../sd_card/fatfs/ff.c **** 			fmt = check_fs(fs, bsect);					/* Check the partition */
1531:../sd_card/fatfs/ff.c **** 		}
1532:../sd_card/fatfs/ff.c **** 	}
1533:../sd_card/fatfs/ff.c **** 	if (fmt == 3) return FR_DISK_ERR;
1534:../sd_card/fatfs/ff.c **** 	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT partition is found */
1535:../sd_card/fatfs/ff.c **** 		return FR_NO_FILESYSTEM;
1536:../sd_card/fatfs/ff.c **** 
1537:../sd_card/fatfs/ff.c **** 	/* Initialize the file system object */
1538:../sd_card/fatfs/ff.c **** 	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
1539:../sd_card/fatfs/ff.c **** 	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
1540:../sd_card/fatfs/ff.c **** 	fs->sects_fat = fsize;
1541:../sd_card/fatfs/ff.c **** 	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
1542:../sd_card/fatfs/ff.c **** 	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
1543:../sd_card/fatfs/ff.c **** 	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
1544:../sd_card/fatfs/ff.c **** 	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
1545:../sd_card/fatfs/ff.c **** 	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
1546:../sd_card/fatfs/ff.c **** 	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
1547:../sd_card/fatfs/ff.c **** 	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
1548:../sd_card/fatfs/ff.c **** 	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 (Number of clusters + 2) */
1549:../sd_card/fatfs/ff.c **** 		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
1550:../sd_card/fatfs/ff.c **** 		) / fs->csize + 2;
1551:../sd_card/fatfs/ff.c **** 
1552:../sd_card/fatfs/ff.c **** 	fmt = FS_FAT12;										/* Determine the FAT sub type */
1553:../sd_card/fatfs/ff.c **** 	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
1554:../sd_card/fatfs/ff.c **** 	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
1555:../sd_card/fatfs/ff.c **** 
1556:../sd_card/fatfs/ff.c **** 	if (fmt == FS_FAT32)
1557:../sd_card/fatfs/ff.c **** 		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
1558:../sd_card/fatfs/ff.c **** 	else
1559:../sd_card/fatfs/ff.c **** 		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
1560:../sd_card/fatfs/ff.c **** 	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
1561:../sd_card/fatfs/ff.c **** 
1562:../sd_card/fatfs/ff.c **** #if !_FS_READONLY
1563:../sd_card/fatfs/ff.c **** 	/* Initialize allocation information */
1564:../sd_card/fatfs/ff.c **** 	fs->free_clust = 0xFFFFFFFF;
1565:../sd_card/fatfs/ff.c **** 	fs->wflag = 0;
1566:../sd_card/fatfs/ff.c **** 	/* Get fsinfo if needed */
1567:../sd_card/fatfs/ff.c **** 	if (fmt == FS_FAT32) {
1568:../sd_card/fatfs/ff.c **** 	 	fs->fsi_flag = 0;
1569:../sd_card/fatfs/ff.c **** 		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
1570:../sd_card/fatfs/ff.c **** 		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
1571:../sd_card/fatfs/ff.c **** 			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
1572:../sd_card/fatfs/ff.c **** 			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
1573:../sd_card/fatfs/ff.c **** 			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
1574:../sd_card/fatfs/ff.c **** 			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
1575:../sd_card/fatfs/ff.c **** 			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
1576:../sd_card/fatfs/ff.c **** 		}
1577:../sd_card/fatfs/ff.c **** 	}
1578:../sd_card/fatfs/ff.c **** #endif
1579:../sd_card/fatfs/ff.c **** 	fs->fs_type = fmt;		/* FAT sub-type */
1580:../sd_card/fatfs/ff.c **** 	fs->winsect = 0;		/* Invalidate sector cache */
1581:../sd_card/fatfs/ff.c **** #if _FS_RPATH
1582:../sd_card/fatfs/ff.c **** 	fs->cdir = 0;			/* Current directory (root dir) */
1583:../sd_card/fatfs/ff.c **** #endif
1584:../sd_card/fatfs/ff.c **** 	fs->id = ++Fsid;		/* File system mount ID */
1585:../sd_card/fatfs/ff.c **** 
1586:../sd_card/fatfs/ff.c **** 	return FR_OK;
1587:../sd_card/fatfs/ff.c **** }
1588:../sd_card/fatfs/ff.c **** 
1589:../sd_card/fatfs/ff.c **** 
1590:../sd_card/fatfs/ff.c **** 
1591:../sd_card/fatfs/ff.c **** 
1592:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1593:../sd_card/fatfs/ff.c **** /* Check if the file/dir object is valid or not                          */
1594:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1595:../sd_card/fatfs/ff.c **** 
1596:../sd_card/fatfs/ff.c **** static
1597:../sd_card/fatfs/ff.c **** FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
1598:../sd_card/fatfs/ff.c **** 	FATFS *fs,		/* Pointer to the file system object */
1599:../sd_card/fatfs/ff.c **** 	WORD id			/* Member id of the target object to be checked */
1600:../sd_card/fatfs/ff.c **** )
1601:../sd_card/fatfs/ff.c **** {
1602:../sd_card/fatfs/ff.c **** 	if (!fs || !fs->fs_type || fs->id != id)
1603:../sd_card/fatfs/ff.c **** 		return FR_INVALID_OBJECT;
1604:../sd_card/fatfs/ff.c **** 
1605:../sd_card/fatfs/ff.c **** 	ENTER_FF(fs);		/* Lock file system */
1606:../sd_card/fatfs/ff.c **** 
1607:../sd_card/fatfs/ff.c **** 	if (disk_status(fs->drive) & STA_NOINIT)
1608:../sd_card/fatfs/ff.c **** 		return FR_NOT_READY;
1609:../sd_card/fatfs/ff.c **** 
1610:../sd_card/fatfs/ff.c **** 	return FR_OK;
1611:../sd_card/fatfs/ff.c **** }
1612:../sd_card/fatfs/ff.c **** 
1613:../sd_card/fatfs/ff.c **** 
1614:../sd_card/fatfs/ff.c **** 
1615:../sd_card/fatfs/ff.c **** 
1616:../sd_card/fatfs/ff.c **** /*--------------------------------------------------------------------------
1617:../sd_card/fatfs/ff.c **** 
1618:../sd_card/fatfs/ff.c ****    Public Functions
1619:../sd_card/fatfs/ff.c **** 
1620:../sd_card/fatfs/ff.c **** --------------------------------------------------------------------------*/
1621:../sd_card/fatfs/ff.c **** 
1622:../sd_card/fatfs/ff.c **** 
1623:../sd_card/fatfs/ff.c **** 
1624:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1625:../sd_card/fatfs/ff.c **** /* Mount/Unmount a Logical Drive                                         */
1626:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1627:../sd_card/fatfs/ff.c **** 
1628:../sd_card/fatfs/ff.c **** FRESULT f_mount (
1629:../sd_card/fatfs/ff.c **** 	BYTE vol,		/* Logical drive number to be mounted/unmounted */
1630:../sd_card/fatfs/ff.c **** 	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
1631:../sd_card/fatfs/ff.c **** )
1632:../sd_card/fatfs/ff.c **** {
 18893              		.loc 1 1632 0
 18894              		.cfi_startproc
 18895              		@ args = 0, pretend = 0, frame = 0
 18896              		@ frame_needed = 0, uses_anonymous_args = 0
 18897              		@ link register save eliminated.
 18898              	.LVL11:
1633:../sd_card/fatfs/ff.c **** 	FATFS *rfs;
1634:../sd_card/fatfs/ff.c **** 
1635:../sd_card/fatfs/ff.c **** 
1636:../sd_card/fatfs/ff.c **** 	if (vol >= _DRIVES)				/* Check if the drive number is valid */
 18899              		.loc 1 1636 0
 18900 0000 10B1     		cbz	r0, .L16
 18901 0002 4FF00B00 		mov	r0, #11
 18902              	.LVL12:
 18903 0006 7047     		bx	lr
 18904              	.LVL13:
 18905              	.L16:
1637:../sd_card/fatfs/ff.c **** 		return FR_INVALID_DRIVE;
1638:../sd_card/fatfs/ff.c **** 	rfs = FatFs[vol];				/* Get current fs object */
 18906              		.loc 1 1638 0
 18907 0008 40F20003 		movw	r3, #:lower16:.LANCHOR0
 18908 000c C0F20003 		movt	r3, #:upper16:.LANCHOR0
 18909 0010 1B68     		ldr	r3, [r3, #0]
 18910              	.LVL14:
1639:../sd_card/fatfs/ff.c **** 
1640:../sd_card/fatfs/ff.c **** 	if (rfs) {
 18911              		.loc 1 1640 0
 18912 0012 13B1     		cbz	r3, .L18
1641:../sd_card/fatfs/ff.c **** #if _FS_REENTRANT					/* Discard sync object of the current volume */
1642:../sd_card/fatfs/ff.c **** 		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
1643:../sd_card/fatfs/ff.c **** #endif
1644:../sd_card/fatfs/ff.c **** 		rfs->fs_type = 0;			/* Clear old fs object */
 18913              		.loc 1 1644 0
 18914 0014 4FF00002 		mov	r2, #0
 18915 0018 1A70     		strb	r2, [r3, #0]
 18916              	.L18:
1645:../sd_card/fatfs/ff.c **** 	}
1646:../sd_card/fatfs/ff.c **** 
1647:../sd_card/fatfs/ff.c **** 	if (fs) {
 18917              		.loc 1 1647 0
 18918 001a 11B1     		cbz	r1, .L19
1648:../sd_card/fatfs/ff.c **** 		fs->fs_type = 0;			/* Clear new fs object */
 18919              		.loc 1 1648 0
 18920 001c 4FF00003 		mov	r3, #0
 18921              	.LVL15:
 18922 0020 0B70     		strb	r3, [r1, #0]
 18923              	.LVL16:
 18924              	.L19:
1649:../sd_card/fatfs/ff.c **** #if _FS_REENTRANT					/* Create sync object for the new volume */
1650:../sd_card/fatfs/ff.c **** 		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
1651:../sd_card/fatfs/ff.c **** #endif
1652:../sd_card/fatfs/ff.c **** 	}
1653:../sd_card/fatfs/ff.c **** 	FatFs[vol] = fs;				/* Register new fs object */
 18925              		.loc 1 1653 0
 18926 0022 40F20003 		movw	r3, #:lower16:.LANCHOR0
 18927              	.LVL17:
 18928 0026 C0F20003 		movt	r3, #:upper16:.LANCHOR0
 18929 002a 1960     		str	r1, [r3, #0]
 18930 002c 4FF00000 		mov	r0, #0
 18931              	.LVL18:
1654:../sd_card/fatfs/ff.c **** 
1655:../sd_card/fatfs/ff.c **** 	return FR_OK;
1656:../sd_card/fatfs/ff.c **** }
 18932              		.loc 1 1656 0
 18933 0030 7047     		bx	lr
 18934              		.cfi_endproc
 18935              	.LFE51:
 18937 0032 00BF     		.section	.text.f_mkfs,"ax",%progbits
 18938              		.align	2
 18939              		.global	f_mkfs
 18940              		.thumb
 18941              		.thumb_func
 18943              	f_mkfs:
 18944              	.LFB60:
1657:../sd_card/fatfs/ff.c **** 
1658:../sd_card/fatfs/ff.c **** 
1659:../sd_card/fatfs/ff.c **** 
1660:../sd_card/fatfs/ff.c **** 
1661:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1662:../sd_card/fatfs/ff.c **** /* Open or Create a File                                                 */
1663:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1664:../sd_card/fatfs/ff.c **** 
1665:../sd_card/fatfs/ff.c **** FRESULT f_open (
1666:../sd_card/fatfs/ff.c **** 	FIL *fp,			/* Pointer to the blank file object */
1667:../sd_card/fatfs/ff.c **** 	const XCHAR *path,	/* Pointer to the file name */
1668:../sd_card/fatfs/ff.c **** 	BYTE mode			/* Access mode and file open mode flags */
1669:../sd_card/fatfs/ff.c **** )
1670:../sd_card/fatfs/ff.c **** {
1671:../sd_card/fatfs/ff.c **** 	FRESULT res;
1672:../sd_card/fatfs/ff.c **** 	DIR dj;
1673:../sd_card/fatfs/ff.c **** 	NAMEBUF(sfn, lfn);
1674:../sd_card/fatfs/ff.c **** 	BYTE *dir;
1675:../sd_card/fatfs/ff.c **** 
1676:../sd_card/fatfs/ff.c **** 
1677:../sd_card/fatfs/ff.c **** 	fp->fs = NULL;		/* Clear file object */
1678:../sd_card/fatfs/ff.c **** #if !_FS_READONLY
1679:../sd_card/fatfs/ff.c **** 	mode &= (FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW);
1680:../sd_card/fatfs/ff.c **** 	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_
1681:../sd_card/fatfs/ff.c **** #else
1682:../sd_card/fatfs/ff.c **** 	mode &= FA_READ;
1683:../sd_card/fatfs/ff.c **** 	res = chk_mounted(&path, &dj.fs, 0);
1684:../sd_card/fatfs/ff.c **** #endif
1685:../sd_card/fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(dj.fs, res);
1686:../sd_card/fatfs/ff.c **** 	INITBUF(dj, sfn, lfn);
1687:../sd_card/fatfs/ff.c **** 	res = follow_path(&dj, path);	/* Follow the file path */
1688:../sd_card/fatfs/ff.c **** 
1689:../sd_card/fatfs/ff.c **** #if !_FS_READONLY
1690:../sd_card/fatfs/ff.c **** 	/* Create or Open a file */
1691:../sd_card/fatfs/ff.c **** 	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
1692:../sd_card/fatfs/ff.c **** 		DWORD ps, cl;
1693:../sd_card/fatfs/ff.c **** 
1694:../sd_card/fatfs/ff.c **** 		if (res != FR_OK) {			/* No file, create new */
1695:../sd_card/fatfs/ff.c **** 			if (res == FR_NO_FILE)	/* There is no file to open, create a new entry */
1696:../sd_card/fatfs/ff.c **** 				res = dir_register(&dj);
1697:../sd_card/fatfs/ff.c **** 			if (res != FR_OK) LEAVE_FF(dj.fs, res);
1698:../sd_card/fatfs/ff.c **** 			mode |= FA_CREATE_ALWAYS;
1699:../sd_card/fatfs/ff.c **** 			dir = dj.dir;			/* Created entry (SFN entry) */
1700:../sd_card/fatfs/ff.c **** 		}
1701:../sd_card/fatfs/ff.c **** 		else {						/* Any object is already existing */
1702:../sd_card/fatfs/ff.c **** 			if (mode & FA_CREATE_NEW)			/* Cannot create new */
1703:../sd_card/fatfs/ff.c **** 				LEAVE_FF(dj.fs, FR_EXIST);
1704:../sd_card/fatfs/ff.c **** 			dir = dj.dir;
1705:../sd_card/fatfs/ff.c **** 			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
1706:../sd_card/fatfs/ff.c **** 				LEAVE_FF(dj.fs, FR_DENIED);
1707:../sd_card/fatfs/ff.c **** 			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
1708:../sd_card/fatfs/ff.c **** 				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start clust
1709:../sd_card/fatfs/ff.c **** 				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
1710:../sd_card/fatfs/ff.c **** 				ST_WORD(dir+DIR_FstClusLO, 0);
1711:../sd_card/fatfs/ff.c **** 				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
1712:../sd_card/fatfs/ff.c **** 				dj.fs->wflag = 1;
1713:../sd_card/fatfs/ff.c **** 				ps = dj.fs->winsect;			/* Remove the cluster chain */
1714:../sd_card/fatfs/ff.c **** 				if (cl) {
1715:../sd_card/fatfs/ff.c **** 					res = remove_chain(dj.fs, cl);
1716:../sd_card/fatfs/ff.c **** 					if (res) LEAVE_FF(dj.fs, res);
1717:../sd_card/fatfs/ff.c **** 					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
1718:../sd_card/fatfs/ff.c **** 				}
1719:../sd_card/fatfs/ff.c **** 				res = move_window(dj.fs, ps);
1720:../sd_card/fatfs/ff.c **** 				if (res != FR_OK) LEAVE_FF(dj.fs, res);
1721:../sd_card/fatfs/ff.c **** 			}
1722:../sd_card/fatfs/ff.c **** 		}
1723:../sd_card/fatfs/ff.c **** 		if (mode & FA_CREATE_ALWAYS) {
1724:../sd_card/fatfs/ff.c **** 			dir[DIR_Attr] = 0;					/* Reset attribute */
1725:../sd_card/fatfs/ff.c **** 			ps = get_fattime();
1726:../sd_card/fatfs/ff.c **** 			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
1727:../sd_card/fatfs/ff.c **** 			dj.fs->wflag = 1;
1728:../sd_card/fatfs/ff.c **** 			mode |= FA__WRITTEN;				/* Set file changed flag */
1729:../sd_card/fatfs/ff.c **** 		}
1730:../sd_card/fatfs/ff.c **** 	}
1731:../sd_card/fatfs/ff.c **** 	/* Open an existing file */
1732:../sd_card/fatfs/ff.c **** 	else {
1733:../sd_card/fatfs/ff.c **** #endif /* !_FS_READONLY */
1734:../sd_card/fatfs/ff.c **** 		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
1735:../sd_card/fatfs/ff.c **** 		dir = dj.dir;
1736:../sd_card/fatfs/ff.c **** 		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
1737:../sd_card/fatfs/ff.c **** 			LEAVE_FF(dj.fs, FR_NO_FILE);
1738:../sd_card/fatfs/ff.c **** #if !_FS_READONLY
1739:../sd_card/fatfs/ff.c **** 		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
1740:../sd_card/fatfs/ff.c **** 			LEAVE_FF(dj.fs, FR_DENIED);
1741:../sd_card/fatfs/ff.c **** 	}
1742:../sd_card/fatfs/ff.c **** 	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
1743:../sd_card/fatfs/ff.c **** 	fp->dir_ptr = dj.dir;
1744:../sd_card/fatfs/ff.c **** #endif
1745:../sd_card/fatfs/ff.c **** 	fp->flag = mode;					/* File access mode */
1746:../sd_card/fatfs/ff.c **** 	fp->org_clust =						/* File start cluster */
1747:../sd_card/fatfs/ff.c **** 		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
1748:../sd_card/fatfs/ff.c **** 	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
1749:../sd_card/fatfs/ff.c **** 	fp->fptr = 0; fp->csect = 255;		/* File pointer */
1750:../sd_card/fatfs/ff.c **** 	fp->dsect = 0;
1751:../sd_card/fatfs/ff.c **** 	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
1752:../sd_card/fatfs/ff.c **** 
1753:../sd_card/fatfs/ff.c **** 	LEAVE_FF(dj.fs, FR_OK);
1754:../sd_card/fatfs/ff.c **** }
1755:../sd_card/fatfs/ff.c **** 
1756:../sd_card/fatfs/ff.c **** 
1757:../sd_card/fatfs/ff.c **** 
1758:../sd_card/fatfs/ff.c **** 
1759:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1760:../sd_card/fatfs/ff.c **** /* Read File                                                             */
1761:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1762:../sd_card/fatfs/ff.c **** 
1763:../sd_card/fatfs/ff.c **** FRESULT f_read (
1764:../sd_card/fatfs/ff.c **** 	FIL *fp, 		/* Pointer to the file object */
1765:../sd_card/fatfs/ff.c **** 	void *buff,		/* Pointer to data buffer */
1766:../sd_card/fatfs/ff.c **** 	UINT btr,		/* Number of bytes to read */
1767:../sd_card/fatfs/ff.c **** 	UINT *br		/* Pointer to number of bytes read */
1768:../sd_card/fatfs/ff.c **** )
1769:../sd_card/fatfs/ff.c **** {
1770:../sd_card/fatfs/ff.c **** 	FRESULT res;
1771:../sd_card/fatfs/ff.c **** 	DWORD clst, sect, remain;
1772:../sd_card/fatfs/ff.c **** 	UINT rcnt, cc;
1773:../sd_card/fatfs/ff.c **** 	BYTE *rbuff = buff;
1774:../sd_card/fatfs/ff.c **** 
1775:../sd_card/fatfs/ff.c **** 
1776:../sd_card/fatfs/ff.c **** 	*br = 0;	/* Initialize bytes read */
1777:../sd_card/fatfs/ff.c **** 
1778:../sd_card/fatfs/ff.c **** 	res = validate(fp->fs, fp->id);					/* Check validity of the object */
1779:../sd_card/fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
1780:../sd_card/fatfs/ff.c **** 	if (fp->flag & FA__ERROR)						/* Check abort flag */
1781:../sd_card/fatfs/ff.c **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
1782:../sd_card/fatfs/ff.c **** 	if (!(fp->flag & FA_READ)) 						/* Check access mode */
1783:../sd_card/fatfs/ff.c **** 		LEAVE_FF(fp->fs, FR_DENIED);
1784:../sd_card/fatfs/ff.c **** 	remain = fp->fsize - fp->fptr;
1785:../sd_card/fatfs/ff.c **** 	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
1786:../sd_card/fatfs/ff.c **** 
1787:../sd_card/fatfs/ff.c **** 	for ( ;  btr;									/* Repeat until all data transferred */
1788:../sd_card/fatfs/ff.c **** 		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
1789:../sd_card/fatfs/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
1790:../sd_card/fatfs/ff.c **** 			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
1791:../sd_card/fatfs/ff.c **** 				clst = (fp->fptr == 0) ?			/* On the top of the file? */
1792:../sd_card/fatfs/ff.c **** 					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
1793:../sd_card/fatfs/ff.c **** 				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
1794:../sd_card/fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
1795:../sd_card/fatfs/ff.c **** 				fp->curr_clust = clst;				/* Update current cluster */
1796:../sd_card/fatfs/ff.c **** 				fp->csect = 0;						/* Reset sector offset in the cluster */
1797:../sd_card/fatfs/ff.c **** 			}
1798:../sd_card/fatfs/ff.c **** 			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
1799:../sd_card/fatfs/ff.c **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
1800:../sd_card/fatfs/ff.c **** 			sect += fp->csect;
1801:../sd_card/fatfs/ff.c **** 			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
1802:../sd_card/fatfs/ff.c **** 			if (cc) {								/* Read maximum contiguous sectors directly */
1803:../sd_card/fatfs/ff.c **** 				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
1804:../sd_card/fatfs/ff.c **** 					cc = fp->fs->csize - fp->csect;
1805:../sd_card/fatfs/ff.c **** 				if (disk_read(fp->fs->drive, rbuff, sect, (BYTE)cc) != RES_OK)
1806:../sd_card/fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
1807:../sd_card/fatfs/ff.c **** #if !_FS_READONLY && _FS_MINIMIZE <= 2
1808:../sd_card/fatfs/ff.c **** #if _FS_TINY
1809:../sd_card/fatfs/ff.c **** 				if (fp->fs->wflag && fp->fs->winsect - sect < cc)		/* Replace one of the read sectors with cach
1810:../sd_card/fatfs/ff.c **** 					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
1811:../sd_card/fatfs/ff.c **** #else
1812:../sd_card/fatfs/ff.c **** 				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with ca
1813:../sd_card/fatfs/ff.c **** 					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
1814:../sd_card/fatfs/ff.c **** #endif
1815:../sd_card/fatfs/ff.c **** #endif
1816:../sd_card/fatfs/ff.c **** 				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
1817:../sd_card/fatfs/ff.c **** 				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
1818:../sd_card/fatfs/ff.c **** 				continue;
1819:../sd_card/fatfs/ff.c **** 			}
1820:../sd_card/fatfs/ff.c **** #if !_FS_TINY
1821:../sd_card/fatfs/ff.c **** #if !_FS_READONLY
1822:../sd_card/fatfs/ff.c **** 			if (fp->flag & FA__DIRTY) {			/* Write sector I/O buffer if needed */
1823:../sd_card/fatfs/ff.c **** 				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
1824:../sd_card/fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
1825:../sd_card/fatfs/ff.c **** 				fp->flag &= ~FA__DIRTY;
1826:../sd_card/fatfs/ff.c **** 			}
1827:../sd_card/fatfs/ff.c **** #endif
1828:../sd_card/fatfs/ff.c **** 			if (fp->dsect != sect) {			/* Fill sector buffer with file data */
1829:../sd_card/fatfs/ff.c **** 				if (disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
1830:../sd_card/fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
1831:../sd_card/fatfs/ff.c **** 			}
1832:../sd_card/fatfs/ff.c **** #endif
1833:../sd_card/fatfs/ff.c **** 			fp->dsect = sect;
1834:../sd_card/fatfs/ff.c **** 			fp->csect++;							/* Next sector address in the cluster */
1835:../sd_card/fatfs/ff.c **** 		}
1836:../sd_card/fatfs/ff.c **** 		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
1837:../sd_card/fatfs/ff.c **** 		if (rcnt > btr) rcnt = btr;
1838:../sd_card/fatfs/ff.c **** #if _FS_TINY
1839:../sd_card/fatfs/ff.c **** 		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
1840:../sd_card/fatfs/ff.c **** 			ABORT(fp->fs, FR_DISK_ERR);
1841:../sd_card/fatfs/ff.c **** 		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
1842:../sd_card/fatfs/ff.c **** #else
1843:../sd_card/fatfs/ff.c **** 		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
1844:../sd_card/fatfs/ff.c **** #endif
1845:../sd_card/fatfs/ff.c **** 	}
1846:../sd_card/fatfs/ff.c **** 
1847:../sd_card/fatfs/ff.c **** 	LEAVE_FF(fp->fs, FR_OK);
1848:../sd_card/fatfs/ff.c **** }
1849:../sd_card/fatfs/ff.c **** 
1850:../sd_card/fatfs/ff.c **** 
1851:../sd_card/fatfs/ff.c **** 
1852:../sd_card/fatfs/ff.c **** 
1853:../sd_card/fatfs/ff.c **** #if !_FS_READONLY
1854:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1855:../sd_card/fatfs/ff.c **** /* Write File                                                            */
1856:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1857:../sd_card/fatfs/ff.c **** 
1858:../sd_card/fatfs/ff.c **** FRESULT f_write (
1859:../sd_card/fatfs/ff.c **** 	FIL *fp,			/* Pointer to the file object */
1860:../sd_card/fatfs/ff.c **** 	const void *buff,	/* Pointer to the data to be written */
1861:../sd_card/fatfs/ff.c **** 	UINT btw,			/* Number of bytes to write */
1862:../sd_card/fatfs/ff.c **** 	UINT *bw			/* Pointer to number of bytes written */
1863:../sd_card/fatfs/ff.c **** )
1864:../sd_card/fatfs/ff.c **** {
1865:../sd_card/fatfs/ff.c **** 	FRESULT res;
1866:../sd_card/fatfs/ff.c **** 	DWORD clst, sect;
1867:../sd_card/fatfs/ff.c **** 	UINT wcnt, cc;
1868:../sd_card/fatfs/ff.c **** 	const BYTE *wbuff = buff;
1869:../sd_card/fatfs/ff.c **** 
1870:../sd_card/fatfs/ff.c **** 
1871:../sd_card/fatfs/ff.c **** 	*bw = 0;	/* Initialize bytes written */
1872:../sd_card/fatfs/ff.c **** 
1873:../sd_card/fatfs/ff.c **** 	res = validate(fp->fs, fp->id);					/* Check validity of the object */
1874:../sd_card/fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
1875:../sd_card/fatfs/ff.c **** 	if (fp->flag & FA__ERROR)						/* Check abort flag */
1876:../sd_card/fatfs/ff.c **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
1877:../sd_card/fatfs/ff.c **** 	if (!(fp->flag & FA_WRITE))						/* Check access mode */
1878:../sd_card/fatfs/ff.c **** 		LEAVE_FF(fp->fs, FR_DENIED);
1879:../sd_card/fatfs/ff.c **** 	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
1880:../sd_card/fatfs/ff.c **** 
1881:../sd_card/fatfs/ff.c **** 	for ( ;  btw;									/* Repeat until all data transferred */
1882:../sd_card/fatfs/ff.c **** 		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
1883:../sd_card/fatfs/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
1884:../sd_card/fatfs/ff.c **** 			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
1885:../sd_card/fatfs/ff.c **** 				if (fp->fptr == 0) {				/* On the top of the file? */
1886:../sd_card/fatfs/ff.c **** 					clst = fp->org_clust;			/* Follow from the origin */
1887:../sd_card/fatfs/ff.c **** 					if (clst == 0)					/* When there is no cluster chain, */
1888:../sd_card/fatfs/ff.c **** 						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
1889:../sd_card/fatfs/ff.c **** 				} else {							/* Middle or end of the file */
1890:../sd_card/fatfs/ff.c **** 					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or stretch cluster chain */
1891:../sd_card/fatfs/ff.c **** 				}
1892:../sd_card/fatfs/ff.c **** 				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
1893:../sd_card/fatfs/ff.c **** 				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
1894:../sd_card/fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
1895:../sd_card/fatfs/ff.c **** 				fp->curr_clust = clst;				/* Update current cluster */
1896:../sd_card/fatfs/ff.c **** 				fp->csect = 0;						/* Reset sector address in the cluster */
1897:../sd_card/fatfs/ff.c **** 			}
1898:../sd_card/fatfs/ff.c **** #if _FS_TINY
1899:../sd_card/fatfs/ff.c **** 			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to f
1900:../sd_card/fatfs/ff.c **** 				ABORT(fp->fs, FR_DISK_ERR);
1901:../sd_card/fatfs/ff.c **** #else
1902:../sd_card/fatfs/ff.c **** 			if (fp->flag & FA__DIRTY) {		/* Write back data buffer prior to following direct transfer */
1903:../sd_card/fatfs/ff.c **** 				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
1904:../sd_card/fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
1905:../sd_card/fatfs/ff.c **** 				fp->flag &= ~FA__DIRTY;
1906:../sd_card/fatfs/ff.c **** 			}
1907:../sd_card/fatfs/ff.c **** #endif
1908:../sd_card/fatfs/ff.c **** 			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
1909:../sd_card/fatfs/ff.c **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
1910:../sd_card/fatfs/ff.c **** 			sect += fp->csect;
1911:../sd_card/fatfs/ff.c **** 			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
1912:../sd_card/fatfs/ff.c **** 			if (cc) {								/* Write maximum contiguous sectors directly */
1913:../sd_card/fatfs/ff.c **** 				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
1914:../sd_card/fatfs/ff.c **** 					cc = fp->fs->csize - fp->csect;
1915:../sd_card/fatfs/ff.c **** 				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
1916:../sd_card/fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
1917:../sd_card/fatfs/ff.c **** #if _FS_TINY
1918:../sd_card/fatfs/ff.c **** 				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write 
1919:../sd_card/fatfs/ff.c **** 					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
1920:../sd_card/fatfs/ff.c **** 					fp->fs->wflag = 0;
1921:../sd_card/fatfs/ff.c **** 				}
1922:../sd_card/fatfs/ff.c **** #else
1923:../sd_card/fatfs/ff.c **** 				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
1924:../sd_card/fatfs/ff.c **** 					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
1925:../sd_card/fatfs/ff.c **** 					fp->flag &= ~FA__DIRTY;
1926:../sd_card/fatfs/ff.c **** 				}
1927:../sd_card/fatfs/ff.c **** #endif
1928:../sd_card/fatfs/ff.c **** 				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
1929:../sd_card/fatfs/ff.c **** 				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
1930:../sd_card/fatfs/ff.c **** 				continue;
1931:../sd_card/fatfs/ff.c **** 			}
1932:../sd_card/fatfs/ff.c **** #if _FS_TINY
1933:../sd_card/fatfs/ff.c **** 			if (fp->fptr >= fp->fsize) {			/* Avoid silly buffer filling at growing edge */
1934:../sd_card/fatfs/ff.c **** 				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
1935:../sd_card/fatfs/ff.c **** 				fp->fs->winsect = sect;
1936:../sd_card/fatfs/ff.c **** 			}
1937:../sd_card/fatfs/ff.c **** #else
1938:../sd_card/fatfs/ff.c **** 			if (fp->dsect != sect) {				/* Fill sector buffer with file data */
1939:../sd_card/fatfs/ff.c **** 				if (fp->fptr < fp->fsize &&
1940:../sd_card/fatfs/ff.c **** 					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
1941:../sd_card/fatfs/ff.c **** 						ABORT(fp->fs, FR_DISK_ERR);
1942:../sd_card/fatfs/ff.c **** 			}
1943:../sd_card/fatfs/ff.c **** #endif
1944:../sd_card/fatfs/ff.c **** 			fp->dsect = sect;
1945:../sd_card/fatfs/ff.c **** 			fp->csect++;							/* Next sector address in the cluster */
1946:../sd_card/fatfs/ff.c **** 		}
1947:../sd_card/fatfs/ff.c **** 		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
1948:../sd_card/fatfs/ff.c **** 		if (wcnt > btw) wcnt = btw;
1949:../sd_card/fatfs/ff.c **** #if _FS_TINY
1950:../sd_card/fatfs/ff.c **** 		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
1951:../sd_card/fatfs/ff.c **** 			ABORT(fp->fs, FR_DISK_ERR);
1952:../sd_card/fatfs/ff.c **** 		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
1953:../sd_card/fatfs/ff.c **** 		fp->fs->wflag = 1;
1954:../sd_card/fatfs/ff.c **** #else
1955:../sd_card/fatfs/ff.c **** 		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
1956:../sd_card/fatfs/ff.c **** 		fp->flag |= FA__DIRTY;
1957:../sd_card/fatfs/ff.c **** #endif
1958:../sd_card/fatfs/ff.c **** 	}
1959:../sd_card/fatfs/ff.c **** 
1960:../sd_card/fatfs/ff.c **** 	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
1961:../sd_card/fatfs/ff.c **** 	fp->flag |= FA__WRITTEN;						/* Set file changed flag */
1962:../sd_card/fatfs/ff.c **** 
1963:../sd_card/fatfs/ff.c **** 	LEAVE_FF(fp->fs, FR_OK);
1964:../sd_card/fatfs/ff.c **** }
1965:../sd_card/fatfs/ff.c **** 
1966:../sd_card/fatfs/ff.c **** 
1967:../sd_card/fatfs/ff.c **** 
1968:../sd_card/fatfs/ff.c **** 
1969:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1970:../sd_card/fatfs/ff.c **** /* Synchronize the File Object                                           */
1971:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1972:../sd_card/fatfs/ff.c **** 
1973:../sd_card/fatfs/ff.c **** FRESULT f_sync (
1974:../sd_card/fatfs/ff.c **** 	FIL *fp		/* Pointer to the file object */
1975:../sd_card/fatfs/ff.c **** )
1976:../sd_card/fatfs/ff.c **** {
1977:../sd_card/fatfs/ff.c **** 	FRESULT res;
1978:../sd_card/fatfs/ff.c **** 	DWORD tim;
1979:../sd_card/fatfs/ff.c **** 	BYTE *dir;
1980:../sd_card/fatfs/ff.c **** 
1981:../sd_card/fatfs/ff.c **** 
1982:../sd_card/fatfs/ff.c **** 	res = validate(fp->fs, fp->id);		/* Check validity of the object */
1983:../sd_card/fatfs/ff.c **** 	if (res == FR_OK) {
1984:../sd_card/fatfs/ff.c **** 		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
1985:../sd_card/fatfs/ff.c **** #if !_FS_TINY	/* Write-back dirty buffer */
1986:../sd_card/fatfs/ff.c **** 			if (fp->flag & FA__DIRTY) {
1987:../sd_card/fatfs/ff.c **** 				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
1988:../sd_card/fatfs/ff.c **** 					LEAVE_FF(fp->fs, FR_DISK_ERR);
1989:../sd_card/fatfs/ff.c **** 				fp->flag &= ~FA__DIRTY;
1990:../sd_card/fatfs/ff.c **** 			}
1991:../sd_card/fatfs/ff.c **** #endif
1992:../sd_card/fatfs/ff.c **** 			/* Update the directory entry */
1993:../sd_card/fatfs/ff.c **** 			res = move_window(fp->fs, fp->dir_sect);
1994:../sd_card/fatfs/ff.c **** 			if (res == FR_OK) {
1995:../sd_card/fatfs/ff.c **** 				dir = fp->dir_ptr;
1996:../sd_card/fatfs/ff.c **** 				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
1997:../sd_card/fatfs/ff.c **** 				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
1998:../sd_card/fatfs/ff.c **** 				ST_WORD(dir+DIR_FstClusLO, fp->org_clust);	/* Update start cluster */
1999:../sd_card/fatfs/ff.c **** 				ST_WORD(dir+DIR_FstClusHI, fp->org_clust >> 16);
2000:../sd_card/fatfs/ff.c **** 				tim = get_fattime();			/* Updated time */
2001:../sd_card/fatfs/ff.c **** 				ST_DWORD(dir+DIR_WrtTime, tim);
2002:../sd_card/fatfs/ff.c **** 				fp->flag &= ~FA__WRITTEN;
2003:../sd_card/fatfs/ff.c **** 				fp->fs->wflag = 1;
2004:../sd_card/fatfs/ff.c **** 				res = sync(fp->fs);
2005:../sd_card/fatfs/ff.c **** 			}
2006:../sd_card/fatfs/ff.c **** 		}
2007:../sd_card/fatfs/ff.c **** 	}
2008:../sd_card/fatfs/ff.c **** 
2009:../sd_card/fatfs/ff.c **** 	LEAVE_FF(fp->fs, res);
2010:../sd_card/fatfs/ff.c **** }
2011:../sd_card/fatfs/ff.c **** 
2012:../sd_card/fatfs/ff.c **** #endif /* !_FS_READONLY */
2013:../sd_card/fatfs/ff.c **** 
2014:../sd_card/fatfs/ff.c **** 
2015:../sd_card/fatfs/ff.c **** 
2016:../sd_card/fatfs/ff.c **** 
2017:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2018:../sd_card/fatfs/ff.c **** /* Close File                                                            */
2019:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2020:../sd_card/fatfs/ff.c **** 
2021:../sd_card/fatfs/ff.c **** FRESULT f_close (
2022:../sd_card/fatfs/ff.c **** 	FIL *fp		/* Pointer to the file object to be closed */
2023:../sd_card/fatfs/ff.c **** )
2024:../sd_card/fatfs/ff.c **** {
2025:../sd_card/fatfs/ff.c **** 	FRESULT res;
2026:../sd_card/fatfs/ff.c **** 
2027:../sd_card/fatfs/ff.c **** 
2028:../sd_card/fatfs/ff.c **** #if _FS_READONLY
2029:../sd_card/fatfs/ff.c ****     FATFS *fs = fp->fs; /* Patch for FatFs R0.07e Jan 15, 2010 */
2030:../sd_card/fatfs/ff.c **** 	res = validate(fp->fs, fp->id);
2031:../sd_card/fatfs/ff.c **** 	if (res == FR_OK) fp->fs = NULL;
2032:../sd_card/fatfs/ff.c **** 	/* Patch(ed out): LEAVE_FF(fp->fs, res); */
2033:../sd_card/fatfs/ff.c **** 	LEAVE_FF(fs, res); /* Patch for FatFs R0.07e Jan 15, 2010 */
2034:../sd_card/fatfs/ff.c **** #else
2035:../sd_card/fatfs/ff.c **** 	res = f_sync(fp);
2036:../sd_card/fatfs/ff.c **** 	if (res == FR_OK) fp->fs = NULL;
2037:../sd_card/fatfs/ff.c **** 	return res;
2038:../sd_card/fatfs/ff.c **** #endif
2039:../sd_card/fatfs/ff.c **** }
2040:../sd_card/fatfs/ff.c **** 
2041:../sd_card/fatfs/ff.c **** 
2042:../sd_card/fatfs/ff.c **** 
2043:../sd_card/fatfs/ff.c **** 
2044:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2045:../sd_card/fatfs/ff.c **** /* Change Current Drive/Directory                                        */
2046:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2047:../sd_card/fatfs/ff.c **** 
2048:../sd_card/fatfs/ff.c **** #if _FS_RPATH
2049:../sd_card/fatfs/ff.c **** 
2050:../sd_card/fatfs/ff.c **** FRESULT f_chdrive (
2051:../sd_card/fatfs/ff.c **** 	BYTE drv		/* Drive number */
2052:../sd_card/fatfs/ff.c **** )
2053:../sd_card/fatfs/ff.c **** {
2054:../sd_card/fatfs/ff.c **** 	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
2055:../sd_card/fatfs/ff.c **** 
2056:../sd_card/fatfs/ff.c **** 	Drive = drv;
2057:../sd_card/fatfs/ff.c **** 
2058:../sd_card/fatfs/ff.c **** 	return FR_OK;
2059:../sd_card/fatfs/ff.c **** }
2060:../sd_card/fatfs/ff.c **** 
2061:../sd_card/fatfs/ff.c **** 
2062:../sd_card/fatfs/ff.c **** 
2063:../sd_card/fatfs/ff.c **** 
2064:../sd_card/fatfs/ff.c **** FRESULT f_chdir (
2065:../sd_card/fatfs/ff.c **** 	const XCHAR *path	/* Pointer to the directory path */
2066:../sd_card/fatfs/ff.c **** )
2067:../sd_card/fatfs/ff.c **** {
2068:../sd_card/fatfs/ff.c **** 	FRESULT res;
2069:../sd_card/fatfs/ff.c **** 	DIR dj;
2070:../sd_card/fatfs/ff.c **** 	NAMEBUF(sfn, lfn);
2071:../sd_card/fatfs/ff.c **** 	BYTE *dir;
2072:../sd_card/fatfs/ff.c **** 
2073:../sd_card/fatfs/ff.c **** 
2074:../sd_card/fatfs/ff.c **** 	res = chk_mounted(&path, &dj.fs, 0);
2075:../sd_card/fatfs/ff.c **** 	if (res == FR_OK) {
2076:../sd_card/fatfs/ff.c **** 		INITBUF(dj, sfn, lfn);
2077:../sd_card/fatfs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
2078:../sd_card/fatfs/ff.c **** 		if (res == FR_OK) {					/* Follow completed */
2079:../sd_card/fatfs/ff.c **** 			dir = dj.dir;					/* Pointer to the entry */
2080:../sd_card/fatfs/ff.c **** 			if (!dir) {
2081:../sd_card/fatfs/ff.c **** 				dj.fs->cdir = 0;			/* No entry (root dir) */
2082:../sd_card/fatfs/ff.c **** 			} else {
2083:../sd_card/fatfs/ff.c **** 				if (dir[DIR_Attr] & AM_DIR)	/* Reached to the dir */
2084:../sd_card/fatfs/ff.c **** 					dj.fs->cdir = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
2085:../sd_card/fatfs/ff.c **** 				else
2086:../sd_card/fatfs/ff.c **** 					res = FR_NO_PATH;		/* Could not reach the dir (it is a file) */
2087:../sd_card/fatfs/ff.c **** 			}
2088:../sd_card/fatfs/ff.c **** 		}
2089:../sd_card/fatfs/ff.c **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
2090:../sd_card/fatfs/ff.c **** 	}
2091:../sd_card/fatfs/ff.c **** 
2092:../sd_card/fatfs/ff.c **** 	LEAVE_FF(dj.fs, res);
2093:../sd_card/fatfs/ff.c **** }
2094:../sd_card/fatfs/ff.c **** 
2095:../sd_card/fatfs/ff.c **** #endif
2096:../sd_card/fatfs/ff.c **** 
2097:../sd_card/fatfs/ff.c **** 
2098:../sd_card/fatfs/ff.c **** 
2099:../sd_card/fatfs/ff.c **** #if _FS_MINIMIZE <= 2
2100:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2101:../sd_card/fatfs/ff.c **** /* Seek File R/W Pointer                                                 */
2102:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2103:../sd_card/fatfs/ff.c **** 
2104:../sd_card/fatfs/ff.c **** FRESULT f_lseek (
2105:../sd_card/fatfs/ff.c **** 	FIL *fp,		/* Pointer to the file object */
2106:../sd_card/fatfs/ff.c **** 	DWORD ofs		/* File pointer from top of file */
2107:../sd_card/fatfs/ff.c **** )
2108:../sd_card/fatfs/ff.c **** {
2109:../sd_card/fatfs/ff.c **** 	FRESULT res;
2110:../sd_card/fatfs/ff.c **** 	DWORD clst, bcs, nsect, ifptr;
2111:../sd_card/fatfs/ff.c **** 
2112:../sd_card/fatfs/ff.c **** 
2113:../sd_card/fatfs/ff.c **** 	res = validate(fp->fs, fp->id);		/* Check validity of the object */
2114:../sd_card/fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
2115:../sd_card/fatfs/ff.c **** 	if (fp->flag & FA__ERROR)			/* Check abort flag */
2116:../sd_card/fatfs/ff.c **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
2117:../sd_card/fatfs/ff.c **** 	if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
2118:../sd_card/fatfs/ff.c **** #if !_FS_READONLY
2119:../sd_card/fatfs/ff.c **** 		 && !(fp->flag & FA_WRITE)
2120:../sd_card/fatfs/ff.c **** #endif
2121:../sd_card/fatfs/ff.c **** 		) ofs = fp->fsize;
2122:../sd_card/fatfs/ff.c **** 
2123:../sd_card/fatfs/ff.c **** 	ifptr = fp->fptr;
2124:../sd_card/fatfs/ff.c **** 	fp->fptr = nsect = 0; fp->csect = 255;
2125:../sd_card/fatfs/ff.c **** 	if (ofs > 0) {
2126:../sd_card/fatfs/ff.c **** 		bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
2127:../sd_card/fatfs/ff.c **** 		if (ifptr > 0 &&
2128:../sd_card/fatfs/ff.c **** 			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
2129:../sd_card/fatfs/ff.c **** 			fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
2130:../sd_card/fatfs/ff.c **** 			ofs -= fp->fptr;
2131:../sd_card/fatfs/ff.c **** 			clst = fp->curr_clust;
2132:../sd_card/fatfs/ff.c **** 		} else {									/* When seek to back cluster, */
2133:../sd_card/fatfs/ff.c **** 			clst = fp->org_clust;					/* start from the first cluster */
2134:../sd_card/fatfs/ff.c **** #if !_FS_READONLY
2135:../sd_card/fatfs/ff.c **** 			if (clst == 0) {						/* If no cluster chain, create a new chain */
2136:../sd_card/fatfs/ff.c **** 				clst = create_chain(fp->fs, 0);
2137:../sd_card/fatfs/ff.c **** 				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
2138:../sd_card/fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
2139:../sd_card/fatfs/ff.c **** 				fp->org_clust = clst;
2140:../sd_card/fatfs/ff.c **** 			}
2141:../sd_card/fatfs/ff.c **** #endif
2142:../sd_card/fatfs/ff.c **** 			fp->curr_clust = clst;
2143:../sd_card/fatfs/ff.c **** 		}
2144:../sd_card/fatfs/ff.c **** 		if (clst != 0) {
2145:../sd_card/fatfs/ff.c **** 			while (ofs > bcs) {						/* Cluster following loop */
2146:../sd_card/fatfs/ff.c **** #if !_FS_READONLY
2147:../sd_card/fatfs/ff.c **** 				if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
2148:../sd_card/fatfs/ff.c **** 					clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
2149:../sd_card/fatfs/ff.c **** 					if (clst == 0) {				/* When disk gets full, clip file size */
2150:../sd_card/fatfs/ff.c **** 						ofs = bcs; break;
2151:../sd_card/fatfs/ff.c **** 					}
2152:../sd_card/fatfs/ff.c **** 				} else
2153:../sd_card/fatfs/ff.c **** #endif
2154:../sd_card/fatfs/ff.c **** 					clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
2155:../sd_card/fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
2156:../sd_card/fatfs/ff.c **** 				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
2157:../sd_card/fatfs/ff.c **** 				fp->curr_clust = clst;
2158:../sd_card/fatfs/ff.c **** 				fp->fptr += bcs;
2159:../sd_card/fatfs/ff.c **** 				ofs -= bcs;
2160:../sd_card/fatfs/ff.c **** 			}
2161:../sd_card/fatfs/ff.c **** 			fp->fptr += ofs;
2162:../sd_card/fatfs/ff.c **** 			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
2163:../sd_card/fatfs/ff.c **** 			if (ofs % SS(fp->fs)) {
2164:../sd_card/fatfs/ff.c **** 				nsect = clust2sect(fp->fs, clst);	/* Current sector */
2165:../sd_card/fatfs/ff.c **** 				if (!nsect) ABORT(fp->fs, FR_INT_ERR);
2166:../sd_card/fatfs/ff.c **** 				nsect += fp->csect;
2167:../sd_card/fatfs/ff.c **** 				fp->csect++;
2168:../sd_card/fatfs/ff.c **** 			}
2169:../sd_card/fatfs/ff.c **** 		}
2170:../sd_card/fatfs/ff.c **** 	}
2171:../sd_card/fatfs/ff.c **** 	if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
2172:../sd_card/fatfs/ff.c **** #if !_FS_TINY
2173:../sd_card/fatfs/ff.c **** #if !_FS_READONLY
2174:../sd_card/fatfs/ff.c **** 		if (fp->flag & FA__DIRTY) {			/* Write-back dirty buffer if needed */
2175:../sd_card/fatfs/ff.c **** 			if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
2176:../sd_card/fatfs/ff.c **** 				ABORT(fp->fs, FR_DISK_ERR);
2177:../sd_card/fatfs/ff.c **** 			fp->flag &= ~FA__DIRTY;
2178:../sd_card/fatfs/ff.c **** 		}
2179:../sd_card/fatfs/ff.c **** #endif
2180:../sd_card/fatfs/ff.c **** 		if (disk_read(fp->fs->drive, fp->buf, nsect, 1) != RES_OK)
2181:../sd_card/fatfs/ff.c **** 			ABORT(fp->fs, FR_DISK_ERR);
2182:../sd_card/fatfs/ff.c **** #endif
2183:../sd_card/fatfs/ff.c **** 		fp->dsect = nsect;
2184:../sd_card/fatfs/ff.c **** 	}
2185:../sd_card/fatfs/ff.c **** #if !_FS_READONLY
2186:../sd_card/fatfs/ff.c **** 	if (fp->fptr > fp->fsize) {			/* Set changed flag if the file size is extended */
2187:../sd_card/fatfs/ff.c **** 		fp->fsize = fp->fptr;
2188:../sd_card/fatfs/ff.c **** 		fp->flag |= FA__WRITTEN;
2189:../sd_card/fatfs/ff.c **** 	}
2190:../sd_card/fatfs/ff.c **** #endif
2191:../sd_card/fatfs/ff.c **** 
2192:../sd_card/fatfs/ff.c **** 	LEAVE_FF(fp->fs, res);
2193:../sd_card/fatfs/ff.c **** }
2194:../sd_card/fatfs/ff.c **** 
2195:../sd_card/fatfs/ff.c **** 
2196:../sd_card/fatfs/ff.c **** 
2197:../sd_card/fatfs/ff.c **** 
2198:../sd_card/fatfs/ff.c **** #if _FS_MINIMIZE <= 1
2199:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2200:../sd_card/fatfs/ff.c **** /* Create a Directroy Object                                             */
2201:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2202:../sd_card/fatfs/ff.c **** 
2203:../sd_card/fatfs/ff.c **** FRESULT f_opendir (
2204:../sd_card/fatfs/ff.c **** 	DIR *dj,			/* Pointer to directory object to create */
2205:../sd_card/fatfs/ff.c **** 	const XCHAR *path	/* Pointer to the directory path */
2206:../sd_card/fatfs/ff.c **** )
2207:../sd_card/fatfs/ff.c **** {
2208:../sd_card/fatfs/ff.c **** 	FRESULT res;
2209:../sd_card/fatfs/ff.c **** 	NAMEBUF(sfn, lfn);
2210:../sd_card/fatfs/ff.c **** 	BYTE *dir;
2211:../sd_card/fatfs/ff.c **** 
2212:../sd_card/fatfs/ff.c **** 
2213:../sd_card/fatfs/ff.c **** 	res = chk_mounted(&path, &dj->fs, 0);
2214:../sd_card/fatfs/ff.c **** 	if (res == FR_OK) {
2215:../sd_card/fatfs/ff.c **** 		INITBUF((*dj), sfn, lfn);
2216:../sd_card/fatfs/ff.c **** 		res = follow_path(dj, path);			/* Follow the path to the directory */
2217:../sd_card/fatfs/ff.c **** 		if (res == FR_OK) {						/* Follow completed */
2218:../sd_card/fatfs/ff.c **** 			dir = dj->dir;
2219:../sd_card/fatfs/ff.c **** 			if (dir) {							/* It is not the root dir */
2220:../sd_card/fatfs/ff.c **** 				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
2221:../sd_card/fatfs/ff.c **** 					dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
2222:../sd_card/fatfs/ff.c **** 				} else {						/* The object is not a directory */
2223:../sd_card/fatfs/ff.c **** 					res = FR_NO_PATH;
2224:../sd_card/fatfs/ff.c **** 				}
2225:../sd_card/fatfs/ff.c **** 			}
2226:../sd_card/fatfs/ff.c **** 			if (res == FR_OK) {
2227:../sd_card/fatfs/ff.c **** 				dj->id = dj->fs->id;
2228:../sd_card/fatfs/ff.c **** 				res = dir_seek(dj, 0);			/* Rewind dir */
2229:../sd_card/fatfs/ff.c **** 			}
2230:../sd_card/fatfs/ff.c **** 		}
2231:../sd_card/fatfs/ff.c **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
2232:../sd_card/fatfs/ff.c **** 	}
2233:../sd_card/fatfs/ff.c **** 
2234:../sd_card/fatfs/ff.c **** 	LEAVE_FF(dj->fs, res);
2235:../sd_card/fatfs/ff.c **** }
2236:../sd_card/fatfs/ff.c **** 
2237:../sd_card/fatfs/ff.c **** 
2238:../sd_card/fatfs/ff.c **** 
2239:../sd_card/fatfs/ff.c **** 
2240:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2241:../sd_card/fatfs/ff.c **** /* Read Directory Entry in Sequense                                      */
2242:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2243:../sd_card/fatfs/ff.c **** 
2244:../sd_card/fatfs/ff.c **** FRESULT f_readdir (
2245:../sd_card/fatfs/ff.c **** 	DIR *dj,			/* Pointer to the open directory object */
2246:../sd_card/fatfs/ff.c **** 	FILINFO *fno		/* Pointer to file information to return */
2247:../sd_card/fatfs/ff.c **** )
2248:../sd_card/fatfs/ff.c **** {
2249:../sd_card/fatfs/ff.c **** 	FRESULT res;
2250:../sd_card/fatfs/ff.c **** 	NAMEBUF(sfn, lfn);
2251:../sd_card/fatfs/ff.c **** 
2252:../sd_card/fatfs/ff.c **** 
2253:../sd_card/fatfs/ff.c **** 	res = validate(dj->fs, dj->id);			/* Check validity of the object */
2254:../sd_card/fatfs/ff.c **** 	if (res == FR_OK) {
2255:../sd_card/fatfs/ff.c **** 		INITBUF((*dj), sfn, lfn);
2256:../sd_card/fatfs/ff.c **** 		if (!fno) {
2257:../sd_card/fatfs/ff.c **** 			res = dir_seek(dj, 0);
2258:../sd_card/fatfs/ff.c **** 		} else {
2259:../sd_card/fatfs/ff.c **** 			res = dir_read(dj);
2260:../sd_card/fatfs/ff.c **** 			if (res == FR_NO_FILE) {
2261:../sd_card/fatfs/ff.c **** 				dj->sect = 0;
2262:../sd_card/fatfs/ff.c **** 				res = FR_OK;
2263:../sd_card/fatfs/ff.c **** 			}
2264:../sd_card/fatfs/ff.c **** 			if (res == FR_OK) {				/* A valid entry is found */
2265:../sd_card/fatfs/ff.c **** 				get_fileinfo(dj, fno);		/* Get the object information */
2266:../sd_card/fatfs/ff.c **** 				res = dir_next(dj, FALSE);	/* Increment index for next */
2267:../sd_card/fatfs/ff.c **** 				if (res == FR_NO_FILE) {
2268:../sd_card/fatfs/ff.c **** 					dj->sect = 0;
2269:../sd_card/fatfs/ff.c **** 					res = FR_OK;
2270:../sd_card/fatfs/ff.c **** 				}
2271:../sd_card/fatfs/ff.c **** 			}
2272:../sd_card/fatfs/ff.c **** 		}
2273:../sd_card/fatfs/ff.c **** 	}
2274:../sd_card/fatfs/ff.c **** 
2275:../sd_card/fatfs/ff.c **** 	LEAVE_FF(dj->fs, res);
2276:../sd_card/fatfs/ff.c **** }
2277:../sd_card/fatfs/ff.c **** 
2278:../sd_card/fatfs/ff.c **** 
2279:../sd_card/fatfs/ff.c **** 
2280:../sd_card/fatfs/ff.c **** #if _FS_MINIMIZE == 0
2281:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2282:../sd_card/fatfs/ff.c **** /* Get File Status                                                       */
2283:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2284:../sd_card/fatfs/ff.c **** 
2285:../sd_card/fatfs/ff.c **** FRESULT f_stat (
2286:../sd_card/fatfs/ff.c **** 	const XCHAR *path,	/* Pointer to the file path */
2287:../sd_card/fatfs/ff.c **** 	FILINFO *fno		/* Pointer to file information to return */
2288:../sd_card/fatfs/ff.c **** )
2289:../sd_card/fatfs/ff.c **** {
2290:../sd_card/fatfs/ff.c **** 	FRESULT res;
2291:../sd_card/fatfs/ff.c **** 	DIR dj;
2292:../sd_card/fatfs/ff.c **** 	NAMEBUF(sfn, lfn);
2293:../sd_card/fatfs/ff.c **** 
2294:../sd_card/fatfs/ff.c **** 
2295:../sd_card/fatfs/ff.c **** 	res = chk_mounted(&path, &dj.fs, 0);
2296:../sd_card/fatfs/ff.c **** 	if (res == FR_OK) {
2297:../sd_card/fatfs/ff.c **** 		INITBUF(dj, sfn, lfn);
2298:../sd_card/fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
2299:../sd_card/fatfs/ff.c **** 		if (res == FR_OK) {				/* Follow completed */
2300:../sd_card/fatfs/ff.c **** 			if (dj.dir)	/* Found an object */
2301:../sd_card/fatfs/ff.c **** 				get_fileinfo(&dj, fno);
2302:../sd_card/fatfs/ff.c **** 			else		/* It is root dir */
2303:../sd_card/fatfs/ff.c **** 				res = FR_INVALID_NAME;
2304:../sd_card/fatfs/ff.c **** 		}
2305:../sd_card/fatfs/ff.c **** 	}
2306:../sd_card/fatfs/ff.c **** 
2307:../sd_card/fatfs/ff.c **** 	LEAVE_FF(dj.fs, res);
2308:../sd_card/fatfs/ff.c **** }
2309:../sd_card/fatfs/ff.c **** 
2310:../sd_card/fatfs/ff.c **** 
2311:../sd_card/fatfs/ff.c **** 
2312:../sd_card/fatfs/ff.c **** #if !_FS_READONLY
2313:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2314:../sd_card/fatfs/ff.c **** /* Get Number of Free Clusters                                           */
2315:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2316:../sd_card/fatfs/ff.c **** 
2317:../sd_card/fatfs/ff.c **** FRESULT f_getfree (
2318:../sd_card/fatfs/ff.c **** 	const XCHAR *path,	/* Pointer to the logical drive number (root dir) */
2319:../sd_card/fatfs/ff.c **** 	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
2320:../sd_card/fatfs/ff.c **** 	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
2321:../sd_card/fatfs/ff.c **** )
2322:../sd_card/fatfs/ff.c **** {
2323:../sd_card/fatfs/ff.c **** 	FRESULT res;
2324:../sd_card/fatfs/ff.c **** 	DWORD n, clst, sect, stat;
2325:../sd_card/fatfs/ff.c **** 	UINT i;
2326:../sd_card/fatfs/ff.c **** 	BYTE fat, *p;
2327:../sd_card/fatfs/ff.c **** 
2328:../sd_card/fatfs/ff.c **** 
2329:../sd_card/fatfs/ff.c **** 	/* Get drive number */
2330:../sd_card/fatfs/ff.c **** 	res = chk_mounted(&path, fatfs, 0);
2331:../sd_card/fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(*fatfs, res);
2332:../sd_card/fatfs/ff.c **** 
2333:../sd_card/fatfs/ff.c **** 	/* If number of free cluster is valid, return it without cluster scan. */
2334:../sd_card/fatfs/ff.c **** 	if ((*fatfs)->free_clust <= (*fatfs)->max_clust - 2) {
2335:../sd_card/fatfs/ff.c **** 		*nclst = (*fatfs)->free_clust;
2336:../sd_card/fatfs/ff.c **** 		LEAVE_FF(*fatfs, FR_OK);
2337:../sd_card/fatfs/ff.c **** 	}
2338:../sd_card/fatfs/ff.c **** 
2339:../sd_card/fatfs/ff.c **** 	/* Get number of free clusters */
2340:../sd_card/fatfs/ff.c **** 	fat = (*fatfs)->fs_type;
2341:../sd_card/fatfs/ff.c **** 	n = 0;
2342:../sd_card/fatfs/ff.c **** 	if (fat == FS_FAT12) {
2343:../sd_card/fatfs/ff.c **** 		clst = 2;
2344:../sd_card/fatfs/ff.c **** 		do {
2345:../sd_card/fatfs/ff.c **** 			stat = get_fat(*fatfs, clst);
2346:../sd_card/fatfs/ff.c **** 			if (stat == 0xFFFFFFFF) LEAVE_FF(*fatfs, FR_DISK_ERR);
2347:../sd_card/fatfs/ff.c **** 			if (stat == 1) LEAVE_FF(*fatfs, FR_INT_ERR);
2348:../sd_card/fatfs/ff.c **** 			if (stat == 0) n++;
2349:../sd_card/fatfs/ff.c **** 		} while (++clst < (*fatfs)->max_clust);
2350:../sd_card/fatfs/ff.c **** 	} else {
2351:../sd_card/fatfs/ff.c **** 		clst = (*fatfs)->max_clust;
2352:../sd_card/fatfs/ff.c **** 		sect = (*fatfs)->fatbase;
2353:../sd_card/fatfs/ff.c **** 		i = 0; p = 0;
2354:../sd_card/fatfs/ff.c **** 		do {
2355:../sd_card/fatfs/ff.c **** 			if (!i) {
2356:../sd_card/fatfs/ff.c **** 				res = move_window(*fatfs, sect++);
2357:../sd_card/fatfs/ff.c **** 				if (res != FR_OK)
2358:../sd_card/fatfs/ff.c **** 					LEAVE_FF(*fatfs, res);
2359:../sd_card/fatfs/ff.c **** 				p = (*fatfs)->win;
2360:../sd_card/fatfs/ff.c **** 				i = SS(*fatfs);
2361:../sd_card/fatfs/ff.c **** 			}
2362:../sd_card/fatfs/ff.c **** 			if (fat == FS_FAT16) {
2363:../sd_card/fatfs/ff.c **** 				if (LD_WORD(p) == 0) n++;
2364:../sd_card/fatfs/ff.c **** 				p += 2; i -= 2;
2365:../sd_card/fatfs/ff.c **** 			} else {
2366:../sd_card/fatfs/ff.c **** 				if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
2367:../sd_card/fatfs/ff.c **** 				p += 4; i -= 4;
2368:../sd_card/fatfs/ff.c **** 			}
2369:../sd_card/fatfs/ff.c **** 		} while (--clst);
2370:../sd_card/fatfs/ff.c **** 	}
2371:../sd_card/fatfs/ff.c **** 	(*fatfs)->free_clust = n;
2372:../sd_card/fatfs/ff.c **** 	if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
2373:../sd_card/fatfs/ff.c **** 	*nclst = n;
2374:../sd_card/fatfs/ff.c **** 
2375:../sd_card/fatfs/ff.c **** 	LEAVE_FF(*fatfs, FR_OK);
2376:../sd_card/fatfs/ff.c **** }
2377:../sd_card/fatfs/ff.c **** 
2378:../sd_card/fatfs/ff.c **** 
2379:../sd_card/fatfs/ff.c **** 
2380:../sd_card/fatfs/ff.c **** 
2381:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2382:../sd_card/fatfs/ff.c **** /* Truncate File                                                         */
2383:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2384:../sd_card/fatfs/ff.c **** 
2385:../sd_card/fatfs/ff.c **** FRESULT f_truncate (
2386:../sd_card/fatfs/ff.c **** 	FIL *fp		/* Pointer to the file object */
2387:../sd_card/fatfs/ff.c **** )
2388:../sd_card/fatfs/ff.c **** {
2389:../sd_card/fatfs/ff.c **** 	FRESULT res;
2390:../sd_card/fatfs/ff.c **** 	DWORD ncl;
2391:../sd_card/fatfs/ff.c **** 
2392:../sd_card/fatfs/ff.c **** 
2393:../sd_card/fatfs/ff.c **** 	res = validate(fp->fs, fp->id);		/* Check validity of the object */
2394:../sd_card/fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
2395:../sd_card/fatfs/ff.c **** 	if (fp->flag & FA__ERROR)			/* Check abort flag */
2396:../sd_card/fatfs/ff.c **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
2397:../sd_card/fatfs/ff.c **** 	if (!(fp->flag & FA_WRITE))			/* Check access mode */
2398:../sd_card/fatfs/ff.c **** 		LEAVE_FF(fp->fs, FR_DENIED);
2399:../sd_card/fatfs/ff.c **** 
2400:../sd_card/fatfs/ff.c **** 	if (fp->fsize > fp->fptr) {
2401:../sd_card/fatfs/ff.c **** 		fp->fsize = fp->fptr;	/* Set file size to current R/W point */
2402:../sd_card/fatfs/ff.c **** 		fp->flag |= FA__WRITTEN;
2403:../sd_card/fatfs/ff.c **** 		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
2404:../sd_card/fatfs/ff.c **** 			res = remove_chain(fp->fs, fp->org_clust);
2405:../sd_card/fatfs/ff.c **** 			fp->org_clust = 0;
2406:../sd_card/fatfs/ff.c **** 		} else {				/* When truncate a part of the file, remove remaining clusters */
2407:../sd_card/fatfs/ff.c **** 			ncl = get_fat(fp->fs, fp->curr_clust);
2408:../sd_card/fatfs/ff.c **** 			res = FR_OK;
2409:../sd_card/fatfs/ff.c **** 			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
2410:../sd_card/fatfs/ff.c **** 			if (ncl == 1) res = FR_INT_ERR;
2411:../sd_card/fatfs/ff.c **** 			if (res == FR_OK && ncl < fp->fs->max_clust) {
2412:../sd_card/fatfs/ff.c **** 				res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
2413:../sd_card/fatfs/ff.c **** 				if (res == FR_OK) res = remove_chain(fp->fs, ncl);
2414:../sd_card/fatfs/ff.c **** 			}
2415:../sd_card/fatfs/ff.c **** 		}
2416:../sd_card/fatfs/ff.c **** 	}
2417:../sd_card/fatfs/ff.c **** 	if (res != FR_OK) fp->flag |= FA__ERROR;
2418:../sd_card/fatfs/ff.c **** 
2419:../sd_card/fatfs/ff.c **** 	LEAVE_FF(fp->fs, res);
2420:../sd_card/fatfs/ff.c **** }
2421:../sd_card/fatfs/ff.c **** 
2422:../sd_card/fatfs/ff.c **** 
2423:../sd_card/fatfs/ff.c **** 
2424:../sd_card/fatfs/ff.c **** 
2425:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2426:../sd_card/fatfs/ff.c **** /* Delete a File or Directory                                            */
2427:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2428:../sd_card/fatfs/ff.c **** 
2429:../sd_card/fatfs/ff.c **** FRESULT f_unlink (
2430:../sd_card/fatfs/ff.c **** 	const XCHAR *path		/* Pointer to the file or directory path */
2431:../sd_card/fatfs/ff.c **** )
2432:../sd_card/fatfs/ff.c **** {
2433:../sd_card/fatfs/ff.c **** 	FRESULT res;
2434:../sd_card/fatfs/ff.c **** 	DIR dj, sdj;
2435:../sd_card/fatfs/ff.c **** 	NAMEBUF(sfn, lfn);
2436:../sd_card/fatfs/ff.c **** 	BYTE *dir;
2437:../sd_card/fatfs/ff.c **** 	DWORD dclst;
2438:../sd_card/fatfs/ff.c **** 
2439:../sd_card/fatfs/ff.c **** 
2440:../sd_card/fatfs/ff.c **** 	res = chk_mounted(&path, &dj.fs, 1);
2441:../sd_card/fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(dj.fs, res);
2442:../sd_card/fatfs/ff.c **** 
2443:../sd_card/fatfs/ff.c **** 	INITBUF(dj, sfn, lfn);
2444:../sd_card/fatfs/ff.c **** 	res = follow_path(&dj, path);			/* Follow the file path */
2445:../sd_card/fatfs/ff.c **** 	if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
2446:../sd_card/fatfs/ff.c **** 		res = FR_INVALID_NAME;
2447:../sd_card/fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(dj.fs, res); /* Follow failed */
2448:../sd_card/fatfs/ff.c **** 
2449:../sd_card/fatfs/ff.c **** 	dir = dj.dir;
2450:../sd_card/fatfs/ff.c **** 	if (!dir)								/* Is it the root directory? */
2451:../sd_card/fatfs/ff.c **** 		LEAVE_FF(dj.fs, FR_INVALID_NAME);
2452:../sd_card/fatfs/ff.c **** 	if (dir[DIR_Attr] & AM_RDO)				/* Is it a R/O object? */
2453:../sd_card/fatfs/ff.c **** 		LEAVE_FF(dj.fs, FR_DENIED);
2454:../sd_card/fatfs/ff.c **** 	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
2455:../sd_card/fatfs/ff.c **** 
2456:../sd_card/fatfs/ff.c **** 	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
2457:../sd_card/fatfs/ff.c **** 		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
2458:../sd_card/fatfs/ff.c **** 		mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
2459:../sd_card/fatfs/ff.c **** 		sdj.sclust = dclst;
2460:../sd_card/fatfs/ff.c **** 		res = dir_seek(&sdj, 2);
2461:../sd_card/fatfs/ff.c **** 		if (res != FR_OK) LEAVE_FF(dj.fs, res);
2462:../sd_card/fatfs/ff.c **** 		res = dir_read(&sdj);
2463:../sd_card/fatfs/ff.c **** 		if (res == FR_OK) res = FR_DENIED;	/* Not empty sub-dir */
2464:../sd_card/fatfs/ff.c **** 		if (res != FR_NO_FILE) LEAVE_FF(dj.fs, res);
2465:../sd_card/fatfs/ff.c **** 	}
2466:../sd_card/fatfs/ff.c **** 
2467:../sd_card/fatfs/ff.c **** 	res = dir_remove(&dj);					/* Remove directory entry */
2468:../sd_card/fatfs/ff.c **** 	if (res == FR_OK) {
2469:../sd_card/fatfs/ff.c **** 		if (dclst)
2470:../sd_card/fatfs/ff.c **** 			res = remove_chain(dj.fs, dclst);	/* Remove the cluster chain */
2471:../sd_card/fatfs/ff.c **** 		if (res == FR_OK) res = sync(dj.fs);
2472:../sd_card/fatfs/ff.c **** 	}
2473:../sd_card/fatfs/ff.c **** 
2474:../sd_card/fatfs/ff.c **** 	LEAVE_FF(dj.fs, res);
2475:../sd_card/fatfs/ff.c **** }
2476:../sd_card/fatfs/ff.c **** 
2477:../sd_card/fatfs/ff.c **** 
2478:../sd_card/fatfs/ff.c **** 
2479:../sd_card/fatfs/ff.c **** 
2480:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2481:../sd_card/fatfs/ff.c **** /* Create a Directory                                                    */
2482:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2483:../sd_card/fatfs/ff.c **** 
2484:../sd_card/fatfs/ff.c **** FRESULT f_mkdir (
2485:../sd_card/fatfs/ff.c **** 	const XCHAR *path		/* Pointer to the directory path */
2486:../sd_card/fatfs/ff.c **** )
2487:../sd_card/fatfs/ff.c **** {
2488:../sd_card/fatfs/ff.c **** 	FRESULT res;
2489:../sd_card/fatfs/ff.c **** 	DIR dj;
2490:../sd_card/fatfs/ff.c **** 	NAMEBUF(sfn, lfn);
2491:../sd_card/fatfs/ff.c **** 	BYTE *dir, n;
2492:../sd_card/fatfs/ff.c **** 	DWORD dsect, dclst, pclst, tim;
2493:../sd_card/fatfs/ff.c **** 
2494:../sd_card/fatfs/ff.c **** 
2495:../sd_card/fatfs/ff.c **** 	res = chk_mounted(&path, &dj.fs, 1);
2496:../sd_card/fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(dj.fs, res);
2497:../sd_card/fatfs/ff.c **** 
2498:../sd_card/fatfs/ff.c **** 	INITBUF(dj, sfn, lfn);
2499:../sd_card/fatfs/ff.c **** 	res = follow_path(&dj, path);			/* Follow the file path */
2500:../sd_card/fatfs/ff.c **** 	if (res == FR_OK) res = FR_EXIST;		/* Any file or directory is already existing */
2501:../sd_card/fatfs/ff.c **** 	if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
2502:../sd_card/fatfs/ff.c **** 		res = FR_INVALID_NAME;
2503:../sd_card/fatfs/ff.c **** 	if (res != FR_NO_FILE)					/* Any error occurred */
2504:../sd_card/fatfs/ff.c **** 		LEAVE_FF(dj.fs, res);
2505:../sd_card/fatfs/ff.c **** 
2506:../sd_card/fatfs/ff.c **** 	dclst = create_chain(dj.fs, 0);			/* Allocate a new cluster for new directory table */
2507:../sd_card/fatfs/ff.c **** 	res = FR_OK;
2508:../sd_card/fatfs/ff.c **** 	if (dclst == 0) res = FR_DENIED;
2509:../sd_card/fatfs/ff.c **** 	if (dclst == 1) res = FR_INT_ERR;
2510:../sd_card/fatfs/ff.c **** 	if (dclst == 0xFFFFFFFF) res = FR_DISK_ERR;
2511:../sd_card/fatfs/ff.c **** 	if (res == FR_OK)
2512:../sd_card/fatfs/ff.c **** 		res = move_window(dj.fs, 0);
2513:../sd_card/fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(dj.fs, res);
2514:../sd_card/fatfs/ff.c **** 	dsect = clust2sect(dj.fs, dclst);
2515:../sd_card/fatfs/ff.c **** 
2516:../sd_card/fatfs/ff.c **** 	dir = dj.fs->win;						/* Initialize the new directory table */
2517:../sd_card/fatfs/ff.c **** 	mem_set(dir, 0, SS(dj.fs));
2518:../sd_card/fatfs/ff.c **** 	mem_set(dir+DIR_Name, ' ', 8+3);		/* Create "." entry */
2519:../sd_card/fatfs/ff.c **** 	dir[DIR_Name] = '.';
2520:../sd_card/fatfs/ff.c **** 	dir[DIR_Attr] = AM_DIR;
2521:../sd_card/fatfs/ff.c **** 	tim = get_fattime();
2522:../sd_card/fatfs/ff.c **** 	ST_DWORD(dir+DIR_WrtTime, tim);
2523:../sd_card/fatfs/ff.c **** 	ST_WORD(dir+DIR_FstClusLO, dclst);
2524:../sd_card/fatfs/ff.c **** 	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
2525:../sd_card/fatfs/ff.c **** 	mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
2526:../sd_card/fatfs/ff.c **** 	dir[33] = '.';
2527:../sd_card/fatfs/ff.c **** 	pclst = dj.sclust;
2528:../sd_card/fatfs/ff.c **** 	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
2529:../sd_card/fatfs/ff.c **** 		pclst = 0;
2530:../sd_card/fatfs/ff.c **** 	ST_WORD(dir+32+DIR_FstClusLO, pclst);
2531:../sd_card/fatfs/ff.c **** 	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
2532:../sd_card/fatfs/ff.c **** 	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
2533:../sd_card/fatfs/ff.c **** 		dj.fs->winsect = dsect++;
2534:../sd_card/fatfs/ff.c **** 		dj.fs->wflag = 1;
2535:../sd_card/fatfs/ff.c **** 		res = move_window(dj.fs, 0);
2536:../sd_card/fatfs/ff.c **** 		if (res) LEAVE_FF(dj.fs, res);
2537:../sd_card/fatfs/ff.c **** 		mem_set(dir, 0, SS(dj.fs));
2538:../sd_card/fatfs/ff.c **** 	}
2539:../sd_card/fatfs/ff.c **** 
2540:../sd_card/fatfs/ff.c **** 	res = dir_register(&dj);
2541:../sd_card/fatfs/ff.c **** 	if (res != FR_OK) {
2542:../sd_card/fatfs/ff.c **** 		remove_chain(dj.fs, dclst);
2543:../sd_card/fatfs/ff.c **** 	} else {
2544:../sd_card/fatfs/ff.c **** 		dir = dj.dir;
2545:../sd_card/fatfs/ff.c **** 		dir[DIR_Attr] = AM_DIR;					/* Attribute */
2546:../sd_card/fatfs/ff.c **** 		ST_DWORD(dir+DIR_WrtTime, tim);			/* Create time */
2547:../sd_card/fatfs/ff.c **** 		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
2548:../sd_card/fatfs/ff.c **** 		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
2549:../sd_card/fatfs/ff.c **** 		dj.fs->wflag = 1;
2550:../sd_card/fatfs/ff.c **** 		res = sync(dj.fs);
2551:../sd_card/fatfs/ff.c **** 	}
2552:../sd_card/fatfs/ff.c **** 
2553:../sd_card/fatfs/ff.c **** 	LEAVE_FF(dj.fs, res);
2554:../sd_card/fatfs/ff.c **** }
2555:../sd_card/fatfs/ff.c **** 
2556:../sd_card/fatfs/ff.c **** 
2557:../sd_card/fatfs/ff.c **** 
2558:../sd_card/fatfs/ff.c **** 
2559:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2560:../sd_card/fatfs/ff.c **** /* Change File Attribute                                                 */
2561:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2562:../sd_card/fatfs/ff.c **** 
2563:../sd_card/fatfs/ff.c **** FRESULT f_chmod (
2564:../sd_card/fatfs/ff.c **** 	const XCHAR *path,	/* Pointer to the file path */
2565:../sd_card/fatfs/ff.c **** 	BYTE value,			/* Attribute bits */
2566:../sd_card/fatfs/ff.c **** 	BYTE mask			/* Attribute mask to change */
2567:../sd_card/fatfs/ff.c **** )
2568:../sd_card/fatfs/ff.c **** {
2569:../sd_card/fatfs/ff.c **** 	FRESULT res;
2570:../sd_card/fatfs/ff.c **** 	DIR dj;
2571:../sd_card/fatfs/ff.c **** 	NAMEBUF(sfn, lfn);
2572:../sd_card/fatfs/ff.c **** 	BYTE *dir;
2573:../sd_card/fatfs/ff.c **** 
2574:../sd_card/fatfs/ff.c **** 
2575:../sd_card/fatfs/ff.c **** 	res = chk_mounted(&path, &dj.fs, 1);
2576:../sd_card/fatfs/ff.c **** 	if (res == FR_OK) {
2577:../sd_card/fatfs/ff.c **** 		INITBUF(dj, sfn, lfn);
2578:../sd_card/fatfs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
2579:../sd_card/fatfs/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
2580:../sd_card/fatfs/ff.c **** 			res = FR_INVALID_NAME;
2581:../sd_card/fatfs/ff.c **** 		if (res == FR_OK) {
2582:../sd_card/fatfs/ff.c **** 			dir = dj.dir;
2583:../sd_card/fatfs/ff.c **** 			if (!dir) {						/* Is it a root directory? */
2584:../sd_card/fatfs/ff.c **** 				res = FR_INVALID_NAME;
2585:../sd_card/fatfs/ff.c **** 			} else {						/* File or sub directory */
2586:../sd_card/fatfs/ff.c **** 				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
2587:../sd_card/fatfs/ff.c **** 				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
2588:../sd_card/fatfs/ff.c **** 				dj.fs->wflag = 1;
2589:../sd_card/fatfs/ff.c **** 				res = sync(dj.fs);
2590:../sd_card/fatfs/ff.c **** 			}
2591:../sd_card/fatfs/ff.c **** 		}
2592:../sd_card/fatfs/ff.c **** 	}
2593:../sd_card/fatfs/ff.c **** 
2594:../sd_card/fatfs/ff.c **** 	LEAVE_FF(dj.fs, res);
2595:../sd_card/fatfs/ff.c **** }
2596:../sd_card/fatfs/ff.c **** 
2597:../sd_card/fatfs/ff.c **** 
2598:../sd_card/fatfs/ff.c **** 
2599:../sd_card/fatfs/ff.c **** 
2600:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2601:../sd_card/fatfs/ff.c **** /* Change Timestamp                                                      */
2602:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2603:../sd_card/fatfs/ff.c **** 
2604:../sd_card/fatfs/ff.c **** FRESULT f_utime (
2605:../sd_card/fatfs/ff.c **** 	const XCHAR *path,	/* Pointer to the file/directory name */
2606:../sd_card/fatfs/ff.c **** 	const FILINFO *fno	/* Pointer to the time-stamp to be set */
2607:../sd_card/fatfs/ff.c **** )
2608:../sd_card/fatfs/ff.c **** {
2609:../sd_card/fatfs/ff.c **** 	FRESULT res;
2610:../sd_card/fatfs/ff.c **** 	DIR dj;
2611:../sd_card/fatfs/ff.c **** 	NAMEBUF(sfn, lfn);
2612:../sd_card/fatfs/ff.c **** 	BYTE *dir;
2613:../sd_card/fatfs/ff.c **** 
2614:../sd_card/fatfs/ff.c **** 
2615:../sd_card/fatfs/ff.c **** 	res = chk_mounted(&path, &dj.fs, 1);
2616:../sd_card/fatfs/ff.c **** 	if (res == FR_OK) {
2617:../sd_card/fatfs/ff.c **** 		INITBUF(dj, sfn, lfn);
2618:../sd_card/fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
2619:../sd_card/fatfs/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
2620:../sd_card/fatfs/ff.c **** 			res = FR_INVALID_NAME;
2621:../sd_card/fatfs/ff.c **** 		if (res == FR_OK) {
2622:../sd_card/fatfs/ff.c **** 			dir = dj.dir;
2623:../sd_card/fatfs/ff.c **** 			if (!dir) {				/* Root directory */
2624:../sd_card/fatfs/ff.c **** 				res = FR_INVALID_NAME;
2625:../sd_card/fatfs/ff.c **** 			} else {				/* File or sub-directory */
2626:../sd_card/fatfs/ff.c **** 				ST_WORD(dir+DIR_WrtTime, fno->ftime);
2627:../sd_card/fatfs/ff.c **** 				ST_WORD(dir+DIR_WrtDate, fno->fdate);
2628:../sd_card/fatfs/ff.c **** 				dj.fs->wflag = 1;
2629:../sd_card/fatfs/ff.c **** 				res = sync(dj.fs);
2630:../sd_card/fatfs/ff.c **** 			}
2631:../sd_card/fatfs/ff.c **** 		}
2632:../sd_card/fatfs/ff.c **** 	}
2633:../sd_card/fatfs/ff.c **** 
2634:../sd_card/fatfs/ff.c **** 	LEAVE_FF(dj.fs, res);
2635:../sd_card/fatfs/ff.c **** }
2636:../sd_card/fatfs/ff.c **** 
2637:../sd_card/fatfs/ff.c **** 
2638:../sd_card/fatfs/ff.c **** 
2639:../sd_card/fatfs/ff.c **** 
2640:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2641:../sd_card/fatfs/ff.c **** /* Rename File/Directory                                                 */
2642:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2643:../sd_card/fatfs/ff.c **** 
2644:../sd_card/fatfs/ff.c **** FRESULT f_rename (
2645:../sd_card/fatfs/ff.c **** 	const XCHAR *path_old,	/* Pointer to the old name */
2646:../sd_card/fatfs/ff.c **** 	const XCHAR *path_new	/* Pointer to the new name */
2647:../sd_card/fatfs/ff.c **** )
2648:../sd_card/fatfs/ff.c **** {
2649:../sd_card/fatfs/ff.c **** 	FRESULT res;
2650:../sd_card/fatfs/ff.c **** 	DIR dj_old, dj_new;
2651:../sd_card/fatfs/ff.c **** 	NAMEBUF(sfn, lfn);
2652:../sd_card/fatfs/ff.c **** 	BYTE buf[21], *dir;
2653:../sd_card/fatfs/ff.c **** 	DWORD dw;
2654:../sd_card/fatfs/ff.c **** 
2655:../sd_card/fatfs/ff.c **** 
2656:../sd_card/fatfs/ff.c **** 	INITBUF(dj_old, sfn, lfn);
2657:../sd_card/fatfs/ff.c **** 	res = chk_mounted(&path_old, &dj_old.fs, 1);
2658:../sd_card/fatfs/ff.c **** 	if (res == FR_OK) {
2659:../sd_card/fatfs/ff.c **** 		dj_new.fs = dj_old.fs;
2660:../sd_card/fatfs/ff.c **** 		res = follow_path(&dj_old, path_old);	/* Check old object */
2661:../sd_card/fatfs/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj_old.fn[NS] & NS_DOT))
2662:../sd_card/fatfs/ff.c **** 			res = FR_INVALID_NAME;
2663:../sd_card/fatfs/ff.c **** 	}
2664:../sd_card/fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(dj_old.fs, res);	/* The old object is not found */
2665:../sd_card/fatfs/ff.c **** 
2666:../sd_card/fatfs/ff.c **** 	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
2667:../sd_card/fatfs/ff.c **** 	mem_cpy(buf, dj_old.dir+DIR_Attr, 21);		/* Save the object information */
2668:../sd_card/fatfs/ff.c **** 
2669:../sd_card/fatfs/ff.c **** 	mem_cpy(&dj_new, &dj_old, sizeof(DIR));
2670:../sd_card/fatfs/ff.c **** 	res = follow_path(&dj_new, path_new);		/* Check new object */
2671:../sd_card/fatfs/ff.c **** 	if (res == FR_OK) res = FR_EXIST;			/* The new object name is already existing */
2672:../sd_card/fatfs/ff.c **** 	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
2673:../sd_card/fatfs/ff.c **** 		res = dir_register(&dj_new);			/* Register the new object */
2674:../sd_card/fatfs/ff.c **** 		if (res == FR_OK) {
2675:../sd_card/fatfs/ff.c **** 			dir = dj_new.dir;					/* Copy object information into new entry */
2676:../sd_card/fatfs/ff.c **** 			mem_cpy(dir+13, buf+2, 19);
2677:../sd_card/fatfs/ff.c **** 			dir[DIR_Attr] = buf[0] | AM_ARC;
2678:../sd_card/fatfs/ff.c **** 			dj_old.fs->wflag = 1;
2679:../sd_card/fatfs/ff.c **** 			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
2680:../sd_card/fatfs/ff.c **** 				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
2681:../sd_card/fatfs/ff.c **** 				if (!dw) {
2682:../sd_card/fatfs/ff.c **** 					res = FR_INT_ERR;
2683:../sd_card/fatfs/ff.c **** 				} else {
2684:../sd_card/fatfs/ff.c **** 					res = move_window(dj_new.fs, dw);
2685:../sd_card/fatfs/ff.c **** 					dir = dj_new.fs->win+32;
2686:../sd_card/fatfs/ff.c **** 					if (res == FR_OK && dir[1] == '.') {
2687:../sd_card/fatfs/ff.c **** 						dw = (dj_new.fs->fs_type == FS_FAT32 && dj_new.sclust == dj_new.fs->dirbase) ? 0 : dj_new.scl
2688:../sd_card/fatfs/ff.c **** 						ST_WORD(dir+DIR_FstClusLO, dw);
2689:../sd_card/fatfs/ff.c **** 						ST_WORD(dir+DIR_FstClusHI, dw >> 16);
2690:../sd_card/fatfs/ff.c **** 						dj_new.fs->wflag = 1;
2691:../sd_card/fatfs/ff.c **** 					}
2692:../sd_card/fatfs/ff.c **** 				}
2693:../sd_card/fatfs/ff.c **** 			}
2694:../sd_card/fatfs/ff.c **** 			if (res == FR_OK) {
2695:../sd_card/fatfs/ff.c **** 				res = dir_remove(&dj_old);			/* Remove old entry */
2696:../sd_card/fatfs/ff.c **** 				if (res == FR_OK)
2697:../sd_card/fatfs/ff.c **** 					res = sync(dj_old.fs);
2698:../sd_card/fatfs/ff.c **** 			}
2699:../sd_card/fatfs/ff.c **** 		}
2700:../sd_card/fatfs/ff.c **** 	}
2701:../sd_card/fatfs/ff.c **** 
2702:../sd_card/fatfs/ff.c **** 	LEAVE_FF(dj_old.fs, res);
2703:../sd_card/fatfs/ff.c **** }
2704:../sd_card/fatfs/ff.c **** 
2705:../sd_card/fatfs/ff.c **** #endif /* !_FS_READONLY */
2706:../sd_card/fatfs/ff.c **** #endif /* _FS_MINIMIZE == 0 */
2707:../sd_card/fatfs/ff.c **** #endif /* _FS_MINIMIZE <= 1 */
2708:../sd_card/fatfs/ff.c **** #endif /* _FS_MINIMIZE <= 2 */
2709:../sd_card/fatfs/ff.c **** 
2710:../sd_card/fatfs/ff.c **** 
2711:../sd_card/fatfs/ff.c **** 
2712:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2713:../sd_card/fatfs/ff.c **** /* Forward data to the stream directly (Available on only _FS_TINY cfg)  */
2714:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2715:../sd_card/fatfs/ff.c **** #if _USE_FORWARD && _FS_TINY
2716:../sd_card/fatfs/ff.c **** 
2717:../sd_card/fatfs/ff.c **** FRESULT f_forward (
2718:../sd_card/fatfs/ff.c **** 	FIL *fp, 						/* Pointer to the file object */
2719:../sd_card/fatfs/ff.c **** 	UINT (*func)(const BYTE*,UINT),	/* Pointer to the streaming function */
2720:../sd_card/fatfs/ff.c **** 	UINT btr,						/* Number of bytes to forward */
2721:../sd_card/fatfs/ff.c **** 	UINT *bf						/* Pointer to number of bytes forwarded */
2722:../sd_card/fatfs/ff.c **** )
2723:../sd_card/fatfs/ff.c **** {
2724:../sd_card/fatfs/ff.c **** 	FRESULT res;
2725:../sd_card/fatfs/ff.c **** 	DWORD remain, clst, sect;
2726:../sd_card/fatfs/ff.c **** 	UINT rcnt;
2727:../sd_card/fatfs/ff.c **** 
2728:../sd_card/fatfs/ff.c **** 
2729:../sd_card/fatfs/ff.c **** 	*bf = 0;
2730:../sd_card/fatfs/ff.c **** 
2731:../sd_card/fatfs/ff.c **** 	res = validate(fp->fs, fp->id);					/* Check validity of the object */
2732:../sd_card/fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
2733:../sd_card/fatfs/ff.c **** 	if (fp->flag & FA__ERROR)						/* Check error flag */
2734:../sd_card/fatfs/ff.c **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
2735:../sd_card/fatfs/ff.c **** 	if (!(fp->flag & FA_READ))						/* Check access mode */
2736:../sd_card/fatfs/ff.c **** 		LEAVE_FF(fp->fs, FR_DENIED);
2737:../sd_card/fatfs/ff.c **** 
2738:../sd_card/fatfs/ff.c **** 	remain = fp->fsize - fp->fptr;
2739:../sd_card/fatfs/ff.c **** 	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
2740:../sd_card/fatfs/ff.c **** 
2741:../sd_card/fatfs/ff.c **** 	for ( ;  btr && (*func)(NULL, 0);				/* Repeat until all data transferred or stream becomes busy *
2742:../sd_card/fatfs/ff.c **** 		fp->fptr += rcnt, *bf += rcnt, btr -= rcnt) {
2743:../sd_card/fatfs/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
2744:../sd_card/fatfs/ff.c **** 			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
2745:../sd_card/fatfs/ff.c **** 				clst = (fp->fptr == 0) ?			/* On the top of the file? */
2746:../sd_card/fatfs/ff.c **** 					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
2747:../sd_card/fatfs/ff.c **** 				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
2748:../sd_card/fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
2749:../sd_card/fatfs/ff.c **** 				fp->curr_clust = clst;				/* Update current cluster */
2750:../sd_card/fatfs/ff.c **** 				fp->csect = 0;						/* Reset sector address in the cluster */
2751:../sd_card/fatfs/ff.c **** 			}
2752:../sd_card/fatfs/ff.c **** 			fp->csect++;							/* Next sector address in the cluster */
2753:../sd_card/fatfs/ff.c **** 		}
2754:../sd_card/fatfs/ff.c **** 		sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current data sector */
2755:../sd_card/fatfs/ff.c **** 		if (!sect) ABORT(fp->fs, FR_INT_ERR);
2756:../sd_card/fatfs/ff.c **** 		sect += fp->csect - 1;
2757:../sd_card/fatfs/ff.c **** 		if (move_window(fp->fs, sect))				/* Move sector window */
2758:../sd_card/fatfs/ff.c **** 			ABORT(fp->fs, FR_DISK_ERR);
2759:../sd_card/fatfs/ff.c **** 		fp->dsect = sect;
2760:../sd_card/fatfs/ff.c **** 		rcnt = SS(fp->fs) - (WORD)(fp->fptr % SS(fp->fs));	/* Forward data from sector window */
2761:../sd_card/fatfs/ff.c **** 		if (rcnt > btr) rcnt = btr;
2762:../sd_card/fatfs/ff.c **** 		rcnt = (*func)(&fp->fs->win[(WORD)fp->fptr % SS(fp->fs)], rcnt);
2763:../sd_card/fatfs/ff.c **** 		if (!rcnt) ABORT(fp->fs, FR_INT_ERR);
2764:../sd_card/fatfs/ff.c **** 	}
2765:../sd_card/fatfs/ff.c **** 
2766:../sd_card/fatfs/ff.c **** 	LEAVE_FF(fp->fs, FR_OK);
2767:../sd_card/fatfs/ff.c **** }
2768:../sd_card/fatfs/ff.c **** #endif /* _USE_FORWARD */
2769:../sd_card/fatfs/ff.c **** 
2770:../sd_card/fatfs/ff.c **** 
2771:../sd_card/fatfs/ff.c **** 
2772:../sd_card/fatfs/ff.c **** #if _USE_MKFS && !_FS_READONLY
2773:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2774:../sd_card/fatfs/ff.c **** /* Create File System on the Drive                                       */
2775:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2776:../sd_card/fatfs/ff.c **** #define N_ROOTDIR	512			/* Multiple of 32 and <= 2048 */
2777:../sd_card/fatfs/ff.c **** #define N_FATS		1			/* 1 or 2 */
2778:../sd_card/fatfs/ff.c **** #define MAX_SECTOR	131072000UL	/* Maximum partition size */
2779:../sd_card/fatfs/ff.c **** #define MIN_SECTOR	2000UL		/* Minimum partition size */
2780:../sd_card/fatfs/ff.c **** 
2781:../sd_card/fatfs/ff.c **** 
2782:../sd_card/fatfs/ff.c **** FRESULT f_mkfs (
2783:../sd_card/fatfs/ff.c **** 	BYTE drv,			/* Logical drive number */
2784:../sd_card/fatfs/ff.c **** 	BYTE partition,		/* Partitioning rule 0:FDISK, 1:SFD */
2785:../sd_card/fatfs/ff.c **** 	WORD allocsize		/* Allocation unit size [bytes] */
2786:../sd_card/fatfs/ff.c **** )
2787:../sd_card/fatfs/ff.c **** {
 18945              		.loc 1 2787 0
 18946              		.cfi_startproc
 18947              		@ args = 0, pretend = 0, frame = 56
 18948              		@ frame_needed = 0, uses_anonymous_args = 0
 18949              	.LVL19:
 18950 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 18951              	.LCFI0:
 18952              		.cfi_def_cfa_offset 36
 18953 0004 8FB0     		sub	sp, sp, #60
 18954              	.LCFI1:
 18955              		.cfi_def_cfa_offset 96
 18956 0006 0C46     		mov	r4, r1
 18957              		.cfi_offset 14, -4
 18958              		.cfi_offset 11, -8
 18959              		.cfi_offset 10, -12
 18960              		.cfi_offset 9, -16
 18961              		.cfi_offset 8, -20
 18962              		.cfi_offset 7, -24
 18963              		.cfi_offset 6, -28
 18964              		.cfi_offset 5, -32
 18965              		.cfi_offset 4, -36
 18966 0008 1546     		mov	r5, r2
2788:../sd_card/fatfs/ff.c **** 	static const DWORD sstbl[] = { 2048000, 1024000, 512000, 256000, 128000, 64000, 32000, 16000, 8000
2789:../sd_card/fatfs/ff.c **** 	static const WORD cstbl[] =  {   32768,   16384,   8192,   4096,   2048, 16384,  8192,  4096, 2048
2790:../sd_card/fatfs/ff.c **** 	BYTE fmt, m, *tbl;
2791:../sd_card/fatfs/ff.c **** 	DWORD b_part, b_fat, b_dir, b_data;		/* Area offset (LBA) */
2792:../sd_card/fatfs/ff.c **** 	DWORD n_part, n_rsv, n_fat, n_dir;		/* Area size */
2793:../sd_card/fatfs/ff.c **** 	DWORD n_clst, d, n;
2794:../sd_card/fatfs/ff.c **** 	WORD as;
2795:../sd_card/fatfs/ff.c **** 	FATFS *fs;
2796:../sd_card/fatfs/ff.c **** 	DSTATUS stat;
2797:../sd_card/fatfs/ff.c **** 
2798:../sd_card/fatfs/ff.c **** 
2799:../sd_card/fatfs/ff.c **** 	/* Check validity of the parameters */
2800:../sd_card/fatfs/ff.c **** 	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
 18967              		.loc 1 2800 0
 18968 000a 10B1     		cbz	r0, .L22
 18969              	.LVL20:
 18970 000c 4FF00B00 		mov	r0, #11
 18971              	.LVL21:
 18972 0010 55E3     		b	.L23
 18973              	.LVL22:
 18974              	.L22:
2801:../sd_card/fatfs/ff.c **** 	if (partition >= 2) return FR_MKFS_ABORTED;
 18975              		.loc 1 2801 0
 18976 0012 0129     		cmp	r1, #1
 18977 0014 00F24E83 		bhi	.L24
 18978              	.LVL23:
2802:../sd_card/fatfs/ff.c **** 
2803:../sd_card/fatfs/ff.c **** 	/* Check mounted drive and clear work area */
2804:../sd_card/fatfs/ff.c **** 	fs = FatFs[drv];
 18979              		.loc 1 2804 0
 18980 0018 40F20003 		movw	r3, #:lower16:.LANCHOR0
 18981 001c C0F20003 		movt	r3, #:upper16:.LANCHOR0
 18982 0020 1E68     		ldr	r6, [r3, #0]
 18983              	.LVL24:
2805:../sd_card/fatfs/ff.c **** 	if (!fs) return FR_NOT_ENABLED;
 18984              		.loc 1 2805 0
 18985 0022 16B9     		cbnz	r6, .L25
 18986 0024 4FF00C00 		mov	r0, #12
 18987              	.LVL25:
 18988 0028 49E3     		b	.L23
 18989              	.LVL26:
 18990              	.L25:
2806:../sd_card/fatfs/ff.c **** 	fs->fs_type = 0;
 18991              		.loc 1 2806 0
 18992 002a 4FF00000 		mov	r0, #0
 18993              	.LVL27:
 18994 002e 3070     		strb	r0, [r6, #0]
2807:../sd_card/fatfs/ff.c **** 	drv = LD2PD(drv);
2808:../sd_card/fatfs/ff.c **** 
2809:../sd_card/fatfs/ff.c **** 	/* Get disk statics */
2810:../sd_card/fatfs/ff.c **** 	stat = disk_initialize(drv);
 18995              		.loc 1 2810 0
 18996 0030 FFF7FEFF 		bl	disk_initialize
 18997              	.LVL28:
2811:../sd_card/fatfs/ff.c **** 	if (stat & STA_NOINIT) return FR_NOT_READY;
 18998              		.loc 1 2811 0
 18999 0034 10F0010F 		tst	r0, #1
 19000 0038 18BF     		it	ne
 19001 003a 0320     		movne	r0, #3
 19002 003c 40F03F83 		bne	.L23
2812:../sd_card/fatfs/ff.c **** 	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 19003              		.loc 1 2812 0
 19004 0040 10F0040F 		tst	r0, #4
 19005 0044 18BF     		it	ne
 19006 0046 0A20     		movne	r0, #10
 19007 0048 40F03983 		bne	.L23
2813:../sd_card/fatfs/ff.c **** #if _MAX_SS != 512						/* Get disk sector size */
2814:../sd_card/fatfs/ff.c **** 	if (disk_ioctl(drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
2815:../sd_card/fatfs/ff.c **** 		|| SS(fs) > _MAX_SS)
2816:../sd_card/fatfs/ff.c **** 		return FR_MKFS_ABORTED;
2817:../sd_card/fatfs/ff.c **** #endif
2818:../sd_card/fatfs/ff.c **** 	if (disk_ioctl(drv, GET_SECTOR_COUNT, &n_part) != RES_OK || n_part < MIN_SECTOR)
 19008              		.loc 1 2818 0
 19009 004c 4FF00000 		mov	r0, #0
 19010 0050 4FF00101 		mov	r1, #1
 19011 0054 0DAA     		add	r2, sp, #52
 19012 0056 FFF7FEFF 		bl	disk_ioctl
 19013 005a 0028     		cmp	r0, #0
 19014 005c 40F02A83 		bne	.L24
 19015 0060 0D9B     		ldr	r3, [sp, #52]
 19016              	.LVL29:
 19017 0062 B3F5FA6F 		cmp	r3, #2000
 19018 0066 C0F02583 		bcc	.L24
2819:../sd_card/fatfs/ff.c **** 		return FR_MKFS_ABORTED;
2820:../sd_card/fatfs/ff.c **** 	if (n_part > MAX_SECTOR) n_part = MAX_SECTOR;
 19019              		.loc 1 2820 0
 19020 006a B3F1FA6F 		cmp	r3, #131072000
 19021 006e 84BF     		itt	hi
 19022 0070 4FF0FA63 		movhi	r3, #131072000
 19023 0074 0D93     		strhi	r3, [sp, #52]
 19024              	.LVL30:
2821:../sd_card/fatfs/ff.c **** 	b_part = (!partition) ? 63 : 0;		/* Boot sector */
 19025              		.loc 1 2821 0
 19026 0076 002C     		cmp	r4, #0
 19027 0078 0CBF     		ite	eq
 19028 007a 4FF03F0A 		moveq	sl, #63
 19029 007e 4FF0000A 		movne	sl, #0
 19030              	.LVL31:
2822:../sd_card/fatfs/ff.c **** 	n_part -= b_part;
 19031              		.loc 1 2822 0
 19032 0082 0D98     		ldr	r0, [sp, #52]
 19033 0084 CAEB0000 		rsb	r0, sl, r0
 19034              	.LVL32:
 19035 0088 0D90     		str	r0, [sp, #52]
2823:../sd_card/fatfs/ff.c **** 	for (d = 512; d <= 32768U && d != allocsize; d <<= 1) ;	/* Check validity of the allocation unit s
 19036              		.loc 1 2823 0
 19037 008a 2946     		mov	r1, r5
 19038 008c B5F5007F 		cmp	r5, #512
 19039 0090 1CBF     		itt	ne
 19040 0092 0022     		movne	r2, #0
 19041 0094 4FF48063 		movne	r3, #1024
 19042              	.LVL33:
 19043 0098 06D1     		bne	.L32
 19044              	.LVL34:
 19045 009a 0AE0     		b	.L31
 19046              	.L34:
 19047 009c 4FEA4303 		lsl	r3, r3, #1
 19048              	.LVL35:
 19049 00a0 02F10102 		add	r2, r2, #1
 19050 00a4 062A     		cmp	r2, #6
 19051 00a6 02D0     		beq	.L33
 19052              	.L32:
 19053 00a8 8B42     		cmp	r3, r1
 19054 00aa F7D1     		bne	.L34
 19055 00ac 01E0     		b	.L31
 19056              	.L33:
2824:../sd_card/fatfs/ff.c **** 	if (d != allocsize) allocsize = 0;
 19057              		.loc 1 2824 0
 19058 00ae 8B42     		cmp	r3, r1
 19059 00b0 00D1     		bne	.L35
 19060              	.L31:
2825:../sd_card/fatfs/ff.c **** 	if (!allocsize) {					/* Auto selection of cluster size */
 19061              		.loc 1 2825 0
 19062 00b2 D5B9     		cbnz	r5, .L36
 19063              	.L35:
2826:../sd_card/fatfs/ff.c **** 		d = n_part;
2827:../sd_card/fatfs/ff.c **** 		for (as = SS(fs); as > 512U; as >>= 1) d >>= 1;
2828:../sd_card/fatfs/ff.c **** 		for (n = 0; d < sstbl[n]; n++) ;
 19064              		.loc 1 2828 0
 19065 00b4 4FF00003 		mov	r3, #0
 19066              	.LVL36:
 19067 00b8 0C93     		str	r3, [sp, #48]
 19068              	.LVL37:
 19069 00ba B0F5FA1F 		cmp	r0, #2048000
 19070 00be 0ED2     		bcs	.L38
 19071              	.LVL38:
 19072 00c0 4FF00103 		mov	r3, #1
 19073 00c4 40F20005 		movw	r5, #:lower16:.LANCHOR1
 19074              	.LVL39:
 19075 00c8 C0F20005 		movt	r5, #:upper16:.LANCHOR1
 19076              	.L40:
 19077 00cc 03F10101 		add	r1, r3, #1
 19078 00d0 55F82320 		ldr	r2, [r5, r3, lsl #2]
 19079 00d4 9042     		cmp	r0, r2
 19080 00d6 01D2     		bcs	.L39
 19081 00d8 0B46     		mov	r3, r1
 19082 00da F7E7     		b	.L40
 19083              	.L39:
 19084 00dc 0C93     		str	r3, [sp, #48]
 19085              	.LVL40:
 19086              	.L38:
2829:../sd_card/fatfs/ff.c **** 		allocsize = cstbl[n];
 19087              		.loc 1 2829 0
 19088 00de 40F20002 		movw	r2, #:lower16:.LANCHOR2
 19089 00e2 C0F20002 		movt	r2, #:upper16:.LANCHOR2
 19090 00e6 32F81350 		ldrh	r5, [r2, r3, lsl #1]
 19091              	.LVL41:
 19092              	.L36:
2830:../sd_card/fatfs/ff.c **** 	}
2831:../sd_card/fatfs/ff.c **** 	if (allocsize < SS(fs)) allocsize = SS(fs);
 19093              		.loc 1 2831 0
 19094 00ea B5F5007F 		cmp	r5, #512
 19095 00ee 38BF     		it	cc
 19096 00f0 4FF40075 		movcc	r5, #512
 19097              	.LVL42:
2832:../sd_card/fatfs/ff.c **** 
2833:../sd_card/fatfs/ff.c **** 	allocsize /= SS(fs);		/* Number of sectors per cluster */
 19098              		.loc 1 2833 0
 19099 00f4 C5F34F28 		ubfx	r8, r5, #9, #16
 19100              	.LVL43:
2834:../sd_card/fatfs/ff.c **** 
2835:../sd_card/fatfs/ff.c **** 	/* Pre-compute number of clusters and FAT type */
2836:../sd_card/fatfs/ff.c **** 	n_clst = n_part / allocsize;
 19101              		.loc 1 2836 0
 19102 00f8 CDF80480 		str	r8, [sp, #4]
 19103 00fc 0D9B     		ldr	r3, [sp, #52]
 19104              	.LVL44:
 19105 00fe B3FBF8F3 		udiv	r3, r3, r8
 19106              	.LVL45:
2837:../sd_card/fatfs/ff.c **** 	fmt = FS_FAT12;
2838:../sd_card/fatfs/ff.c **** 	if (n_clst >= 0xFF5) fmt = FS_FAT16;
 19107              		.loc 1 2838 0
 19108 0102 40F6F475 		movw	r5, #4084
 19109 0106 AB42     		cmp	r3, r5
 19110 0108 94BF     		ite	ls
 19111 010a 0125     		movls	r5, #1
 19112 010c 0225     		movhi	r5, #2
 19113              	.LVL46:
2839:../sd_card/fatfs/ff.c **** 	if (n_clst >= 0xFFF5) fmt = FS_FAT32;
 19114              		.loc 1 2839 0
 19115 010e 4FF6F472 		movw	r2, #65524
 19116 0112 9342     		cmp	r3, r2
2840:../sd_card/fatfs/ff.c **** 
2841:../sd_card/fatfs/ff.c **** 	/* Determine offset and size of FAT structure */
2842:../sd_card/fatfs/ff.c **** 	switch (fmt) {
2843:../sd_card/fatfs/ff.c **** 	case FS_FAT12:
2844:../sd_card/fatfs/ff.c **** 		n_fat = ((n_clst * 3 + 1) / 2 + 3 + SS(fs) - 1) / SS(fs);
2845:../sd_card/fatfs/ff.c **** 		n_rsv = 1 + partition;
2846:../sd_card/fatfs/ff.c **** 		n_dir = N_ROOTDIR * 32 / SS(fs);
2847:../sd_card/fatfs/ff.c **** 		break;
2848:../sd_card/fatfs/ff.c **** 	case FS_FAT16:
2849:../sd_card/fatfs/ff.c **** 		n_fat = ((n_clst * 2) + 4 + SS(fs) - 1) / SS(fs);
2850:../sd_card/fatfs/ff.c **** 		n_rsv = 1 + partition;
2851:../sd_card/fatfs/ff.c **** 		n_dir = N_ROOTDIR * 32 / SS(fs);
2852:../sd_card/fatfs/ff.c **** 		break;
 19117              		.loc 1 2852 0
 19118 0114 88BF     		it	hi
 19119 0116 0325     		movhi	r5, #3
 19120              	.LVL47:
 19121              		.loc 1 2839 0
 19122 0118 22D8     		bhi	.L45
 19123              	.LVL48:
 19124              		.loc 1 2842 0
 19125 011a 012D     		cmp	r5, #1
 19126 011c 02D0     		beq	.L46
 19127 011e 022D     		cmp	r5, #2
 19128 0120 1ED1     		bne	.L45
 19129 0122 10E0     		b	.L76
 19130              	.L46:
 19131              		.loc 1 2844 0
 19132 0124 03EB4303 		add	r3, r3, r3, lsl #1
 19133              	.LVL49:
 19134 0128 03F10107 		add	r7, r3, #1
 19135 012c 4FEA5707 		lsr	r7, r7, #1
 19136 0130 07F50077 		add	r7, r7, #512
 19137 0134 07F10207 		add	r7, r7, #2
 19138 0138 4FEA5727 		lsr	r7, r7, #9
 19139              	.LVL50:
 19140              		.loc 1 2845 0
 19141 013c 04F10109 		add	r9, r4, #1
 19142              	.LVL51:
 19143 0140 4FF0200B 		mov	fp, #32
 19144              	.LVL52:
 19145              		.loc 1 2847 0
 19146 0144 18E0     		b	.L48
 19147              	.LVL53:
 19148              	.L76:
 19149              		.loc 1 2849 0
 19150 0146 4FEA4303 		lsl	r3, r3, #1
 19151              	.LVL54:
 19152 014a 03F50077 		add	r7, r3, #512
 19153 014e 07F10307 		add	r7, r7, #3
 19154 0152 4FEA5727 		lsr	r7, r7, #9
 19155              	.LVL55:
 19156              		.loc 1 2850 0
 19157 0156 04F10109 		add	r9, r4, #1
 19158              	.LVL56:
 19159 015a 4FF0200B 		mov	fp, #32
 19160              	.LVL57:
 19161              		.loc 1 2852 0
 19162 015e 0BE0     		b	.L48
 19163              	.LVL58:
 19164              	.L45:
2853:../sd_card/fatfs/ff.c **** 	default:
2854:../sd_card/fatfs/ff.c **** 		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
 19165              		.loc 1 2854 0
 19166 0160 4FEA8303 		lsl	r3, r3, #2
 19167              	.LVL59:
 19168 0164 03F50077 		add	r7, r3, #512
 19169 0168 07F10707 		add	r7, r7, #7
 19170 016c 4FEA5727 		lsr	r7, r7, #9
 19171              	.LVL60:
2855:../sd_card/fatfs/ff.c **** 		n_rsv = 33 - partition;
 19172              		.loc 1 2855 0
 19173 0170 C4F12109 		rsb	r9, r4, #33
 19174              	.LVL61:
 19175 0174 4FF0000B 		mov	fp, #0
 19176              	.LVL62:
 19177              	.L48:
2856:../sd_card/fatfs/ff.c **** 		n_dir = 0;
2857:../sd_card/fatfs/ff.c **** 	}
2858:../sd_card/fatfs/ff.c **** 	b_fat = b_part + n_rsv;			/* FATs start sector */
2859:../sd_card/fatfs/ff.c **** 	b_dir = b_fat + n_fat * N_FATS;	/* Directory start sector */
2860:../sd_card/fatfs/ff.c **** 	b_data = b_dir + n_dir;			/* Data start sector */
2861:../sd_card/fatfs/ff.c **** 
2862:../sd_card/fatfs/ff.c **** 	/* Align data start sector to erase block boundary (for flash memory media) */
2863:../sd_card/fatfs/ff.c **** 	if (disk_ioctl(drv, GET_BLOCK_SIZE, &n) != RES_OK) return FR_MKFS_ABORTED;
 19178              		.loc 1 2863 0
 19179 0178 4FF00000 		mov	r0, #0
 19180 017c 4FF00301 		mov	r1, #3
 19181 0180 0CAA     		add	r2, sp, #48
 19182 0182 FFF7FEFF 		bl	disk_ioctl
 19183 0186 0028     		cmp	r0, #0
 19184 0188 40F09482 		bne	.L24
 19185              		.loc 1 2858 0
 19186 018c 09EB0A00 		add	r0, r9, sl
 19187 0190 0290     		str	r0, [sp, #8]
 19188              		.loc 1 2860 0
 19189 0192 0BEB0703 		add	r3, fp, r7
 19190 0196 0344     		add	r3, r3, r0
 19191              	.LVL63:
2864:../sd_card/fatfs/ff.c **** 	n = (b_data + n - 1) & ~(n - 1);
 19192              		.loc 1 2864 0
 19193 0198 0C9A     		ldr	r2, [sp, #48]
 19194 019a 02F1FF31 		add	r1, r2, #-1
 19195 019e 1944     		add	r1, r1, r3
 19196 01a0 C2F10002 		rsb	r2, r2, #0
 19197 01a4 01EA0202 		and	r2, r1, r2
 19198              	.LVL64:
 19199 01a8 0C92     		str	r2, [sp, #48]
2865:../sd_card/fatfs/ff.c **** 	n_fat += (n - b_data) / N_FATS;
 19200              		.loc 1 2865 0
 19201 01aa C3EB0707 		rsb	r7, r3, r7
 19202              	.LVL65:
 19203 01ae 1744     		add	r7, r7, r2
 19204              	.LVL66:
2866:../sd_card/fatfs/ff.c **** 	/* b_dir and b_data are no longer used below */
2867:../sd_card/fatfs/ff.c **** 
2868:../sd_card/fatfs/ff.c **** 	/* Determine number of cluster and final check of validity of the FAT type */
2869:../sd_card/fatfs/ff.c **** 	n_clst = (n_part - n_rsv - n_fat * N_FATS - n_dir) / allocsize;
 19205              		.loc 1 2869 0
 19206 01b0 0D9B     		ldr	r3, [sp, #52]
 19207              	.LVL67:
 19208 01b2 C9EB0302 		rsb	r2, r9, r3
 19209              	.LVL68:
 19210 01b6 C7EB0202 		rsb	r2, r7, r2
 19211 01ba CBEB0202 		rsb	r2, fp, r2
 19212 01be 0199     		ldr	r1, [sp, #4]
 19213 01c0 B2FBF1F2 		udiv	r2, r2, r1
 19214 01c4 0192     		str	r2, [sp, #4]
2870:../sd_card/fatfs/ff.c **** 	if (   (fmt == FS_FAT16 && n_clst < 0xFF5)
 19215              		.loc 1 2870 0
 19216 01c6 40F6F472 		movw	r2, #4084
 19217 01ca 0198     		ldr	r0, [sp, #4]
 19218 01cc 9042     		cmp	r0, r2
 19219 01ce 8CBF     		ite	hi
 19220 01d0 0022     		movhi	r2, #0
 19221 01d2 0122     		movls	r2, #1
 19222 01d4 022D     		cmp	r5, #2
 19223 01d6 14BF     		ite	ne
 19224 01d8 0022     		movne	r2, #0
 19225 01da 02F00102 		andeq	r2, r2, #1
 19226 01de 002A     		cmp	r2, #0
 19227 01e0 40F06882 		bne	.L24
2871:../sd_card/fatfs/ff.c **** 		|| (fmt == FS_FAT32 && n_clst < 0xFFF5))
 19228              		.loc 1 2871 0
 19229 01e4 032D     		cmp	r5, #3
 19230 01e6 14BF     		ite	ne
 19231 01e8 0021     		movne	r1, #0
 19232 01ea 0121     		moveq	r1, #1
 19233 01ec 0391     		str	r1, [sp, #12]
 19234              		.loc 1 2870 0
 19235 01ee 4FF6F472 		movw	r2, #65524
 19236 01f2 9042     		cmp	r0, r2
 19237 01f4 8CBF     		ite	hi
 19238 01f6 0021     		movhi	r1, #0
 19239 01f8 01F00101 		andls	r1, r1, #1
 19240 01fc 0029     		cmp	r1, #0
 19241 01fe 40F05982 		bne	.L24
2872:../sd_card/fatfs/ff.c **** 		return FR_MKFS_ABORTED;
2873:../sd_card/fatfs/ff.c **** 
2874:../sd_card/fatfs/ff.c **** 	/* Create partition table if needed */
2875:../sd_card/fatfs/ff.c **** 	if (!partition) {
 19242              		.loc 1 2875 0
 19243 0202 1CB1     		cbz	r4, .L49
 19244 0204 4FF0F002 		mov	r2, #240
 19245 0208 0992     		str	r2, [sp, #36]
 19246 020a 6CE0     		b	.L50
 19247              	.L49:
 19248              	.LBB2:
2876:../sd_card/fatfs/ff.c **** 		DWORD n_disk = b_part + n_part;
 19249              		.loc 1 2876 0
 19250 020c 0AEB0304 		add	r4, sl, r3
 19251              	.LVL69:
2877:../sd_card/fatfs/ff.c **** 
2878:../sd_card/fatfs/ff.c **** 		mem_set(fs->win, 0, SS(fs));
 19252              		.loc 1 2878 0
 19253 0210 06F13000 		add	r0, r6, #48
 19254 0214 4FF00001 		mov	r1, #0
 19255 0218 4FF40072 		mov	r2, #512
 19256 021c FFF7FEFF 		bl	mem_set
2879:../sd_card/fatfs/ff.c **** 		tbl = fs->win+MBR_Table;
 19257              		.loc 1 2879 0
 19258 0220 06F5F773 		add	r3, r6, #494
 19259              	.LVL70:
2880:../sd_card/fatfs/ff.c **** 		ST_DWORD(tbl, 0x00010180);		/* Partition start in CHS */
 19260              		.loc 1 2880 0
 19261 0224 6FF07F02 		mvn	r2, #127
 19262 0228 86F8EE21 		strb	r2, [r6, #494]
 19263 022c 4FF00102 		mov	r2, #1
 19264 0230 5A70     		strb	r2, [r3, #1]
 19265 0232 9A70     		strb	r2, [r3, #2]
 19266 0234 4FF00002 		mov	r2, #0
 19267 0238 DA70     		strb	r2, [r3, #3]
2881:../sd_card/fatfs/ff.c **** 		if (n_disk < 63UL * 255 * 1024) {	/* Partition end in CHS */
 19268              		.loc 1 2881 0
 19269 023a 40F2FF32 		movw	r2, #:lower16:16450559
 19270 023e C0F2FB02 		movt	r2, #:upper16:16450559
 19271 0242 9442     		cmp	r4, r2
2882:../sd_card/fatfs/ff.c **** 			n_disk = n_disk / 63 / 255;
2883:../sd_card/fatfs/ff.c **** 			tbl[7] = (BYTE)n_disk;
2884:../sd_card/fatfs/ff.c **** 			tbl[6] = (BYTE)((n_disk >> 2) | 63);
2885:../sd_card/fatfs/ff.c **** 		} else {
2886:../sd_card/fatfs/ff.c **** 			ST_WORD(&tbl[6], 0xFFFF);
 19272              		.loc 1 2886 0
 19273 0244 82BF     		ittt	hi
 19274 0246 4FF0FF32 		movhi	r2, #-1
 19275 024a 9A71     		strbhi	r2, [r3, #6]
 19276 024c DA71     		strbhi	r2, [r3, #7]
 19277              		.loc 1 2881 0
 19278 024e 11D8     		bhi	.L52
 19279              		.loc 1 2882 0
 19280 0250 45F25B62 		movw	r2, #:lower16:85284443
 19281 0254 C0F21552 		movt	r2, #:upper16:85284443
 19282 0258 A2FB0402 		umull	r0, r2, r2, r4
 19283 025c C2EB0404 		rsb	r4, r2, r4
 19284              	.LVL71:
 19285 0260 02EB5402 		add	r2, r2, r4, lsr #1
 19286 0264 4FEA5231 		lsr	r1, r2, #13
 19287              	.LVL72:
 19288              		.loc 1 2883 0
 19289 0268 D971     		strb	r1, [r3, #7]
 19290              		.loc 1 2884 0
 19291 026a 4FEAD232 		lsr	r2, r2, #15
 19292 026e 42F03F02 		orr	r2, r2, #63
 19293 0272 9A71     		strb	r2, [r3, #6]
 19294              	.LVL73:
 19295              	.L52:
2887:../sd_card/fatfs/ff.c **** 		}
2888:../sd_card/fatfs/ff.c **** 		tbl[5] = 254;
 19296              		.loc 1 2888 0
 19297 0274 6FF00102 		mvn	r2, #1
 19298 0278 5A71     		strb	r2, [r3, #5]
2889:../sd_card/fatfs/ff.c **** 		if (fmt != FS_FAT32)			/* System ID */
 19299              		.loc 1 2889 0
 19300 027a 032D     		cmp	r5, #3
2890:../sd_card/fatfs/ff.c **** 			tbl[4] = (n_part < 0x10000) ? 0x04 : 0x06;
2891:../sd_card/fatfs/ff.c **** 		else
2892:../sd_card/fatfs/ff.c **** 			tbl[4] = 0x0c;
 19301              		.loc 1 2892 0
 19302 027c 04BF     		itt	eq
 19303 027e 0C22     		moveq	r2, #12
 19304 0280 1A71     		strbeq	r2, [r3, #4]
 19305              		.loc 1 2889 0
 19306 0282 06D0     		beq	.L56
 19307              		.loc 1 2890 0
 19308 0284 0D9A     		ldr	r2, [sp, #52]
 19309 0286 B2F5803F 		cmp	r2, #65536
 19310 028a 34BF     		ite	cc
 19311 028c 0422     		movcc	r2, #4
 19312 028e 0622     		movcs	r2, #6
 19313 0290 1A71     		strb	r2, [r3, #4]
 19314              	.L56:
2893:../sd_card/fatfs/ff.c **** 		ST_DWORD(tbl+8, 63);			/* Partition start in LBA */
 19315              		.loc 1 2893 0
 19316 0292 4FF03F02 		mov	r2, #63
 19317 0296 1A72     		strb	r2, [r3, #8]
 19318 0298 4FF00002 		mov	r2, #0
 19319 029c 5A72     		strb	r2, [r3, #9]
 19320 029e 9A72     		strb	r2, [r3, #10]
 19321 02a0 DA72     		strb	r2, [r3, #11]
2894:../sd_card/fatfs/ff.c **** 		ST_DWORD(tbl+12, n_part);		/* Partition size in LBA */
 19322              		.loc 1 2894 0
 19323 02a2 0D99     		ldr	r1, [sp, #52]
 19324 02a4 1973     		strb	r1, [r3, #12]
 19325 02a6 BDF83410 		ldrh	r1, [sp, #52]
 19326              	.LVL74:
 19327 02aa 4FEA1121 		lsr	r1, r1, #8
 19328              	.LVL75:
 19329 02ae 5973     		strb	r1, [r3, #13]
 19330 02b0 BDF83610 		ldrh	r1, [sp, #54]
 19331              	.LVL76:
 19332 02b4 9973     		strb	r1, [r3, #14]
 19333 02b6 9DF83710 		ldrb	r1, [sp, #55]	@ zero_extendqisi2
 19334              	.LVL77:
 19335 02ba D973     		strb	r1, [r3, #15]
2895:../sd_card/fatfs/ff.c **** 		ST_WORD(tbl+64, 0xAA55);		/* Signature */
 19336              		.loc 1 2895 0
 19337 02bc 4FF05501 		mov	r1, #85
 19338 02c0 83F84010 		strb	r1, [r3, #64]
 19339 02c4 6FF05501 		mvn	r1, #85
 19340 02c8 83F84110 		strb	r1, [r3, #65]
2896:../sd_card/fatfs/ff.c **** 		if (disk_write(drv, fs->win, 0, 1) != RES_OK)
 19341              		.loc 1 2896 0
 19342 02cc 1046     		mov	r0, r2
 19343 02ce 06F13001 		add	r1, r6, #48
 19344 02d2 4FF00103 		mov	r3, #1
 19345              	.LVL78:
 19346 02d6 FFF7FEFF 		bl	disk_write
 19347 02da 0028     		cmp	r0, #0
 19348 02dc 40F0ED81 		bne	.L57
 19349 02e0 4FF0F801 		mov	r1, #248
 19350 02e4 0991     		str	r1, [sp, #36]
 19351              	.LVL79:
 19352              	.L50:
 19353              	.LBE2:
2897:../sd_card/fatfs/ff.c **** 			return FR_DISK_ERR;
2898:../sd_card/fatfs/ff.c **** 		partition = 0xF8;
2899:../sd_card/fatfs/ff.c **** 	} else {
2900:../sd_card/fatfs/ff.c **** 		partition = 0xF0;
2901:../sd_card/fatfs/ff.c **** 	}
2902:../sd_card/fatfs/ff.c **** 
2903:../sd_card/fatfs/ff.c **** 	/* Create boot record */
2904:../sd_card/fatfs/ff.c **** 	tbl = fs->win;								/* Clear buffer */
 19354              		.loc 1 2904 0
 19355 02e6 06F13004 		add	r4, r6, #48
 19356              	.LVL80:
2905:../sd_card/fatfs/ff.c **** 	mem_set(tbl, 0, SS(fs));
 19357              		.loc 1 2905 0
 19358 02ea 2046     		mov	r0, r4
 19359 02ec 4FF00001 		mov	r1, #0
 19360 02f0 4FF40072 		mov	r2, #512
 19361 02f4 FFF7FEFF 		bl	mem_set
2906:../sd_card/fatfs/ff.c **** 	ST_DWORD(tbl+BS_jmpBoot, 0x90FEEB);			/* Boot code (jmp $, nop) */
 19362              		.loc 1 2906 0
 19363 02f8 6FF01403 		mvn	r3, #20
 19364 02fc 86F83030 		strb	r3, [r6, #48]
 19365 0300 6FF00103 		mvn	r3, #1
 19366 0304 3246     		mov	r2, r6
 19367 0306 02F8313F 		strb	r3, [r2, #49]!
 19368 030a 0692     		str	r2, [sp, #24]
 19369 030c 6FF06F03 		mvn	r3, #111
 19370 0310 3046     		mov	r0, r6
 19371 0312 00F8323F 		strb	r3, [r0, #50]!
 19372 0316 0590     		str	r0, [sp, #20]
 19373 0318 4FF00003 		mov	r3, #0
 19374 031c 3146     		mov	r1, r6
 19375 031e 01F8333F 		strb	r3, [r1, #51]!
 19376 0322 0491     		str	r1, [sp, #16]
2907:../sd_card/fatfs/ff.c **** 	ST_WORD(tbl+BPB_BytsPerSec, SS(fs));		/* Sector size */
 19377              		.loc 1 2907 0
 19378 0324 3246     		mov	r2, r6
 19379 0326 02F83B3F 		strb	r3, [r2, #59]!
 19380 032a 0792     		str	r2, [sp, #28]
 19381 032c 4FF00203 		mov	r3, #2
 19382 0330 2373     		strb	r3, [r4, #12]
2908:../sd_card/fatfs/ff.c **** 	tbl[BPB_SecPerClus] = (BYTE)allocsize;		/* Sectors per cluster */
 19383              		.loc 1 2908 0
 19384 0332 5FFA88F3 		uxtb	r3, r8
 19385 0336 0A93     		str	r3, [sp, #40]
 19386 0338 6373     		strb	r3, [r4, #13]
2909:../sd_card/fatfs/ff.c **** 	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);			/* Reserved sectors */
 19387              		.loc 1 2909 0
 19388 033a 84F80E90 		strb	r9, [r4, #14]
 19389 033e C9F30729 		ubfx	r9, r9, #8, #8
 19390              	.LVL81:
 19391 0342 84F80F90 		strb	r9, [r4, #15]
2910:../sd_card/fatfs/ff.c **** 	tbl[BPB_NumFATs] = N_FATS;					/* Number of FATs */
 19392              		.loc 1 2910 0
 19393 0346 4FF00103 		mov	r3, #1
 19394 034a 2374     		strb	r3, [r4, #16]
2911:../sd_card/fatfs/ff.c **** 	ST_WORD(tbl+BPB_RootEntCnt, SS(fs) / 32 * n_dir); /* Number of rootdir entries */
 19395              		.loc 1 2911 0
 19396 034c 4FEA0B13 		lsl	r3, fp, #4
 19397 0350 6374     		strb	r3, [r4, #17]
 19398 0352 BBF1000F 		cmp	fp, #0
 19399 0356 14BF     		ite	ne
 19400 0358 0223     		movne	r3, #2
 19401 035a 0023     		moveq	r3, #0
 19402 035c A374     		strb	r3, [r4, #18]
2912:../sd_card/fatfs/ff.c **** 	if (n_part < 0x10000) {						/* Number of total sectors */
 19403              		.loc 1 2912 0
 19404 035e 0D9B     		ldr	r3, [sp, #52]
 19405 0360 B3F5803F 		cmp	r3, #65536
 19406 0364 06D2     		bcs	.L58
2913:../sd_card/fatfs/ff.c **** 		ST_WORD(tbl+BPB_TotSec16, n_part);
 19407              		.loc 1 2913 0
 19408 0366 E374     		strb	r3, [r4, #19]
 19409 0368 BDF83430 		ldrh	r3, [sp, #52]
 19410              	.LVL82:
 19411 036c 4FEA1323 		lsr	r3, r3, #8
 19412              	.LVL83:
 19413 0370 2375     		strb	r3, [r4, #20]
 19414 0372 0FE0     		b	.L59
 19415              	.LVL84:
 19416              	.L58:
2914:../sd_card/fatfs/ff.c **** 	} else {
2915:../sd_card/fatfs/ff.c **** 		ST_DWORD(tbl+BPB_TotSec32, n_part);
 19417              		.loc 1 2915 0
 19418 0374 84F82030 		strb	r3, [r4, #32]
 19419 0378 BDF83430 		ldrh	r3, [sp, #52]
 19420              	.LVL85:
 19421 037c 4FEA1323 		lsr	r3, r3, #8
 19422              	.LVL86:
 19423 0380 84F82130 		strb	r3, [r4, #33]
 19424 0384 BDF83630 		ldrh	r3, [sp, #54]
 19425 0388 84F82230 		strb	r3, [r4, #34]
 19426 038c 9DF83730 		ldrb	r3, [sp, #55]	@ zero_extendqisi2
 19427 0390 84F82330 		strb	r3, [r4, #35]
 19428              	.L59:
2916:../sd_card/fatfs/ff.c **** 	}
2917:../sd_card/fatfs/ff.c **** 	tbl[BPB_Media] = partition;					/* Media descriptor */
 19429              		.loc 1 2917 0
 19430 0394 0998     		ldr	r0, [sp, #36]
 19431 0396 6075     		strb	r0, [r4, #21]
2918:../sd_card/fatfs/ff.c **** 	ST_WORD(tbl+BPB_SecPerTrk, 63);				/* Number of sectors per track */
 19432              		.loc 1 2918 0
 19433 0398 4FF03F03 		mov	r3, #63
 19434 039c 2376     		strb	r3, [r4, #24]
 19435 039e 4FF00003 		mov	r3, #0
 19436 03a2 6376     		strb	r3, [r4, #25]
2919:../sd_card/fatfs/ff.c **** 	ST_WORD(tbl+BPB_NumHeads, 255);				/* Number of heads */
 19437              		.loc 1 2919 0
 19438 03a4 4FF0FF32 		mov	r2, #-1
 19439 03a8 A276     		strb	r2, [r4, #26]
 19440 03aa E376     		strb	r3, [r4, #27]
2920:../sd_card/fatfs/ff.c **** 	ST_DWORD(tbl+BPB_HiddSec, b_part);			/* Hidden sectors */
 19441              		.loc 1 2920 0
 19442 03ac 84F81CA0 		strb	sl, [r4, #28]
 19443 03b0 6377     		strb	r3, [r4, #29]
 19444 03b2 4FEA1A43 		lsr	r3, sl, #16
 19445 03b6 A377     		strb	r3, [r4, #30]
 19446 03b8 4FEA1A63 		lsr	r3, sl, #24
 19447 03bc E377     		strb	r3, [r4, #31]
2921:../sd_card/fatfs/ff.c **** 	n = get_fattime();							/* Use current time as a VSN */
 19448              		.loc 1 2921 0
 19449 03be FFF7FEFF 		bl	get_fattime
 19450 03c2 0C90     		str	r0, [sp, #48]
2922:../sd_card/fatfs/ff.c **** 	if (fmt != FS_FAT32) {
 19451              		.loc 1 2922 0
 19452 03c4 032D     		cmp	r5, #3
 19453 03c6 26D0     		beq	.L60
2923:../sd_card/fatfs/ff.c **** 		ST_DWORD(tbl+BS_VolID, n);				/* Volume serial number */
 19454              		.loc 1 2923 0
 19455 03c8 84F82700 		strb	r0, [r4, #39]
 19456 03cc BDF83030 		ldrh	r3, [sp, #48]
 19457              	.LVL87:
 19458 03d0 4FEA1323 		lsr	r3, r3, #8
 19459              	.LVL88:
 19460 03d4 84F82830 		strb	r3, [r4, #40]
 19461 03d8 BDF83230 		ldrh	r3, [sp, #50]
 19462              	.LVL89:
 19463 03dc 84F82930 		strb	r3, [r4, #41]
 19464 03e0 9DF83330 		ldrb	r3, [sp, #51]	@ zero_extendqisi2
 19465              	.LVL90:
 19466 03e4 84F82A30 		strb	r3, [r4, #42]
2924:../sd_card/fatfs/ff.c **** 		ST_WORD(tbl+BPB_FATSz16, n_fat);		/* Number of sectors per FAT */
 19467              		.loc 1 2924 0
 19468 03e8 A775     		strb	r7, [r4, #22]
 19469              	.LVL91:
 19470 03ea C7F30723 		ubfx	r3, r7, #8, #8
 19471              	.LVL92:
 19472 03ee E375     		strb	r3, [r4, #23]
2925:../sd_card/fatfs/ff.c **** 		tbl[BS_DrvNum] = 0x80;					/* Drive number */
 19473              		.loc 1 2925 0
 19474 03f0 6FF07F03 		mvn	r3, #127
 19475 03f4 84F82430 		strb	r3, [r4, #36]
2926:../sd_card/fatfs/ff.c **** 		tbl[BS_BootSig] = 0x29;					/* Extended boot signature */
 19476              		.loc 1 2926 0
 19477 03f8 4FF02903 		mov	r3, #41
 19478 03fc 84F82630 		strb	r3, [r4, #38]
2927:../sd_card/fatfs/ff.c **** 		mem_cpy(tbl+BS_VolLab, "NO NAME    FAT     ", 19);	/* Volume label, FAT signature */
 19479              		.loc 1 2927 0
 19480 0400 04F12B00 		add	r0, r4, #43
 19481 0404 40F20001 		movw	r1, #:lower16:.LC0
 19482 0408 C0F20001 		movt	r1, #:upper16:.LC0
 19483 040c 4FF01302 		mov	r2, #19
 19484 0410 FFF7FEFF 		bl	mem_cpy
 19485 0414 47E0     		b	.L61
 19486              	.LVL93:
 19487              	.L60:
2928:../sd_card/fatfs/ff.c **** 	} else {
2929:../sd_card/fatfs/ff.c **** 		ST_DWORD(tbl+BS_VolID32, n);			/* Volume serial number */
 19488              		.loc 1 2929 0
 19489 0416 84F84300 		strb	r0, [r4, #67]
 19490 041a BDF83030 		ldrh	r3, [sp, #48]
 19491              	.LVL94:
 19492 041e 4FEA1323 		lsr	r3, r3, #8
 19493              	.LVL95:
 19494 0422 84F84430 		strb	r3, [r4, #68]
 19495 0426 BDF83230 		ldrh	r3, [sp, #50]
 19496              	.LVL96:
 19497 042a 84F84530 		strb	r3, [r4, #69]
 19498 042e 9DF83330 		ldrb	r3, [sp, #51]	@ zero_extendqisi2
 19499              	.LVL97:
 19500 0432 84F84630 		strb	r3, [r4, #70]
2930:../sd_card/fatfs/ff.c **** 		ST_DWORD(tbl+BPB_FATSz32, n_fat);		/* Number of sectors per FAT */
 19501              		.loc 1 2930 0
 19502 0436 84F82470 		strb	r7, [r4, #36]
 19503              	.LVL98:
 19504 043a C7F30723 		ubfx	r3, r7, #8, #8
 19505              	.LVL99:
 19506 043e 84F82530 		strb	r3, [r4, #37]
 19507 0442 4FEA1743 		lsr	r3, r7, #16
 19508 0446 84F82630 		strb	r3, [r4, #38]
 19509 044a 4FEA1763 		lsr	r3, r7, #24
 19510 044e 84F82730 		strb	r3, [r4, #39]
2931:../sd_card/fatfs/ff.c **** 		ST_DWORD(tbl+BPB_RootClus, 2);			/* Root directory cluster (2) */
 19511              		.loc 1 2931 0
 19512 0452 4FF00203 		mov	r3, #2
 19513 0456 84F82C30 		strb	r3, [r4, #44]
 19514 045a 4FF00003 		mov	r3, #0
 19515 045e 84F82D30 		strb	r3, [r4, #45]
 19516 0462 84F82E30 		strb	r3, [r4, #46]
 19517 0466 84F82F30 		strb	r3, [r4, #47]
2932:../sd_card/fatfs/ff.c **** 		ST_WORD(tbl+BPB_FSInfo, 1);				/* FSInfo record offset (bs+1) */
 19518              		.loc 1 2932 0
 19519 046a 4FF00102 		mov	r2, #1
 19520 046e 84F83020 		strb	r2, [r4, #48]
 19521 0472 84F83130 		strb	r3, [r4, #49]
2933:../sd_card/fatfs/ff.c **** 		ST_WORD(tbl+BPB_BkBootSec, 6);			/* Backup boot record offset (bs+6) */
 19522              		.loc 1 2933 0
 19523 0476 4FF00602 		mov	r2, #6
 19524 047a 84F83220 		strb	r2, [r4, #50]
 19525 047e 84F83330 		strb	r3, [r4, #51]
2934:../sd_card/fatfs/ff.c **** 		tbl[BS_DrvNum32] = 0x80;				/* Drive number */
 19526              		.loc 1 2934 0
 19527 0482 6FF07F03 		mvn	r3, #127
 19528 0486 84F84030 		strb	r3, [r4, #64]
2935:../sd_card/fatfs/ff.c **** 		tbl[BS_BootSig32] = 0x29;				/* Extended boot signature */
 19529              		.loc 1 2935 0
 19530 048a 4FF02903 		mov	r3, #41
 19531 048e 84F84230 		strb	r3, [r4, #66]
2936:../sd_card/fatfs/ff.c **** 		mem_cpy(tbl+BS_VolLab32, "NO NAME    FAT32   ", 19);	/* Volume label, FAT signature */
 19532              		.loc 1 2936 0
 19533 0492 04F14700 		add	r0, r4, #71
 19534 0496 40F20001 		movw	r1, #:lower16:.LC1
 19535 049a C0F20001 		movt	r1, #:upper16:.LC1
 19536 049e 4FF01302 		mov	r2, #19
 19537 04a2 FFF7FEFF 		bl	mem_cpy
 19538              	.L61:
2937:../sd_card/fatfs/ff.c **** 	}
2938:../sd_card/fatfs/ff.c **** 	ST_WORD(tbl+BS_55AA, 0xAA55);				/* Signature */
 19539              		.loc 1 2938 0
 19540 04a6 04F5FF73 		add	r3, r4, #510
 19541 04aa 0B93     		str	r3, [sp, #44]
 19542 04ac 4FF05503 		mov	r3, #85
 19543 04b0 0B98     		ldr	r0, [sp, #44]
 19544 04b2 0370     		strb	r3, [r0, #0]
 19545 04b4 04F5FE71 		add	r1, r4, #508
 19546 04b8 6FF05503 		mvn	r3, #85
 19547 04bc 01F8033F 		strb	r3, [r1, #3]!
 19548 04c0 0891     		str	r1, [sp, #32]
2939:../sd_card/fatfs/ff.c **** 	if (SS(fs) > 512U) {
2940:../sd_card/fatfs/ff.c **** 		ST_WORD(tbl+SS(fs)-2, 0xAA55);
2941:../sd_card/fatfs/ff.c **** 	}
2942:../sd_card/fatfs/ff.c **** 	if (disk_write(drv, tbl, b_part+0, 1) != RES_OK)
 19549              		.loc 1 2942 0
 19550 04c2 4FF00000 		mov	r0, #0
 19551 04c6 2146     		mov	r1, r4
 19552 04c8 5246     		mov	r2, sl
 19553 04ca 4FF00103 		mov	r3, #1
 19554 04ce FFF7FEFF 		bl	disk_write
 19555 04d2 0028     		cmp	r0, #0
 19556 04d4 40F0F180 		bne	.L57
2943:../sd_card/fatfs/ff.c **** 		return FR_DISK_ERR;
2944:../sd_card/fatfs/ff.c **** 	if (fmt == FS_FAT32)
 19557              		.loc 1 2944 0
 19558 04d8 039A     		ldr	r2, [sp, #12]
 19559 04da 32B1     		cbz	r2, .L62
2945:../sd_card/fatfs/ff.c **** 		disk_write(drv, tbl, b_part+6, 1);
 19560              		.loc 1 2945 0
 19561 04dc 2146     		mov	r1, r4
 19562 04de 0AF10602 		add	r2, sl, #6
 19563 04e2 4FF00103 		mov	r3, #1
 19564 04e6 FFF7FEFF 		bl	disk_write
 19565              	.L62:
2946:../sd_card/fatfs/ff.c **** 
2947:../sd_card/fatfs/ff.c **** 	/* Initialize FAT area */
2948:../sd_card/fatfs/ff.c **** 	for (m = 0; m < N_FATS; m++) {
2949:../sd_card/fatfs/ff.c **** 		mem_set(tbl, 0, SS(fs));		/* 1st sector of the FAT  */
 19566              		.loc 1 2949 0
 19567 04ea 2046     		mov	r0, r4
 19568 04ec 4FF00001 		mov	r1, #0
 19569 04f0 4FF40072 		mov	r2, #512
 19570 04f4 FFF7FEFF 		bl	mem_set
2950:../sd_card/fatfs/ff.c **** 		if (fmt != FS_FAT32) {
 19571              		.loc 1 2950 0
 19572 04f8 032D     		cmp	r5, #3
 19573 04fa 1CD0     		beq	.L63
2951:../sd_card/fatfs/ff.c **** 			n = (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
 19574              		.loc 1 2951 0
 19575 04fc 012D     		cmp	r5, #1
 19576 04fe 4FF60073 		movw	r3, #:lower16:16776960
 19577 0502 C0F2FF03 		movt	r3, #:upper16:16776960
 19578 0506 18BF     		it	ne
 19579 0508 6FF0FF03 		mvnne	r3, #255
 19580              	.LVL100:
2952:../sd_card/fatfs/ff.c **** 			n |= partition;
 19581              		.loc 1 2952 0
 19582 050c 0998     		ldr	r0, [sp, #36]
 19583 050e 43EA0003 		orr	r3, r3, r0
 19584              	.LVL101:
 19585 0512 0C93     		str	r3, [sp, #48]
2953:../sd_card/fatfs/ff.c **** 			ST_DWORD(tbl, n);				/* Reserve cluster #0-1 (FAT12/16) */
 19586              		.loc 1 2953 0
 19587 0514 86F83030 		strb	r3, [r6, #48]
 19588 0518 BDF83030 		ldrh	r3, [sp, #48]
 19589              	.LVL102:
 19590 051c 4FEA1323 		lsr	r3, r3, #8
 19591              	.LVL103:
 19592 0520 0699     		ldr	r1, [sp, #24]
 19593 0522 0B70     		strb	r3, [r1, #0]
 19594 0524 BDF83230 		ldrh	r3, [sp, #50]
 19595 0528 059A     		ldr	r2, [sp, #20]
 19596 052a 1370     		strb	r3, [r2, #0]
 19597 052c 9DF83330 		ldrb	r3, [sp, #51]	@ zero_extendqisi2
 19598 0530 0498     		ldr	r0, [sp, #16]
 19599 0532 0370     		strb	r3, [r0, #0]
 19600 0534 16E0     		b	.L66
 19601              	.L63:
2954:../sd_card/fatfs/ff.c **** 		} else {
2955:../sd_card/fatfs/ff.c **** 			ST_DWORD(tbl+0, 0xFFFFFFF8);	/* Reserve cluster #0-1 (FAT32) */
 19602              		.loc 1 2955 0
 19603 0536 6FF00703 		mvn	r3, #7
 19604 053a 86F83030 		strb	r3, [r6, #48]
 19605 053e 4FF0FF33 		mov	r3, #-1
 19606 0542 0699     		ldr	r1, [sp, #24]
 19607 0544 0B70     		strb	r3, [r1, #0]
 19608 0546 059A     		ldr	r2, [sp, #20]
 19609 0548 1370     		strb	r3, [r2, #0]
 19610 054a 0498     		ldr	r0, [sp, #16]
 19611 054c 0370     		strb	r3, [r0, #0]
2956:../sd_card/fatfs/ff.c **** 			ST_DWORD(tbl+4, 0xFFFFFFFF);
 19612              		.loc 1 2956 0
 19613 054e 2371     		strb	r3, [r4, #4]
 19614 0550 6371     		strb	r3, [r4, #5]
 19615 0552 A371     		strb	r3, [r4, #6]
 19616 0554 E371     		strb	r3, [r4, #7]
2957:../sd_card/fatfs/ff.c **** 			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
 19617              		.loc 1 2957 0
 19618 0556 2372     		strb	r3, [r4, #8]
 19619 0558 6372     		strb	r3, [r4, #9]
 19620 055a A372     		strb	r3, [r4, #10]
 19621 055c 4FF00F03 		mov	r3, #15
 19622 0560 0799     		ldr	r1, [sp, #28]
 19623 0562 0B70     		strb	r3, [r1, #0]
 19624              	.L66:
2958:../sd_card/fatfs/ff.c **** 		}
2959:../sd_card/fatfs/ff.c **** 		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
 19625              		.loc 1 2959 0
 19626 0564 4FF00000 		mov	r0, #0
 19627 0568 2146     		mov	r1, r4
 19628 056a 029A     		ldr	r2, [sp, #8]
 19629 056c 4FF00103 		mov	r3, #1
 19630 0570 FFF7FEFF 		bl	disk_write
 19631 0574 0028     		cmp	r0, #0
 19632 0576 40F0A080 		bne	.L57
 19633 057a 029A     		ldr	r2, [sp, #8]
 19634 057c 02F10105 		add	r5, r2, #1
 19635              	.LVL104:
2960:../sd_card/fatfs/ff.c **** 			return FR_DISK_ERR;
2961:../sd_card/fatfs/ff.c **** 		mem_set(tbl, 0, SS(fs));		/* Following FAT entries are filled by zero */
 19636              		.loc 1 2961 0
 19637 0580 2046     		mov	r0, r4
 19638 0582 4FF00001 		mov	r1, #0
 19639 0586 4FF40072 		mov	r2, #512
 19640 058a FFF7FEFF 		bl	mem_set
2962:../sd_card/fatfs/ff.c **** 		for (n = 1; n < n_fat; n++) {
 19641              		.loc 1 2962 0
 19642 058e 4FF00103 		mov	r3, #1
 19643 0592 0C93     		str	r3, [sp, #48]
 19644              	.LVL105:
 19645 0594 9F42     		cmp	r7, r3
 19646 0596 13D9     		bls	.L67
2963:../sd_card/fatfs/ff.c **** 			if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
 19647              		.loc 1 2963 0
 19648 0598 4FF00008 		mov	r8, #0
 19649              	.LVL106:
 19650 059c 9946     		mov	r9, r3
 19651              	.LVL107:
 19652              	.L73:
 19653 059e 4046     		mov	r0, r8
 19654 05a0 2146     		mov	r1, r4
 19655 05a2 2A46     		mov	r2, r5
 19656 05a4 4B46     		mov	r3, r9
 19657 05a6 FFF7FEFF 		bl	disk_write
 19658 05aa 0028     		cmp	r0, #0
 19659 05ac 40F08580 		bne	.L57
 19660 05b0 05F10105 		add	r5, r5, #1
 19661              	.LVL108:
 19662              		.loc 1 2962 0
 19663 05b4 0C9B     		ldr	r3, [sp, #48]
 19664 05b6 03F10103 		add	r3, r3, #1
 19665              	.LVL109:
 19666 05ba 0C93     		str	r3, [sp, #48]
 19667 05bc 9F42     		cmp	r7, r3
 19668 05be EED8     		bhi	.L73
 19669              	.LVL110:
 19670              	.L67:
2964:../sd_card/fatfs/ff.c **** 				return FR_DISK_ERR;
2965:../sd_card/fatfs/ff.c **** 		}
2966:../sd_card/fatfs/ff.c **** 	}
2967:../sd_card/fatfs/ff.c **** 
2968:../sd_card/fatfs/ff.c **** 	/* Initialize Root directory */
2969:../sd_card/fatfs/ff.c **** 	m = (BYTE)((fmt == FS_FAT32) ? allocsize : n_dir);
 19671              		.loc 1 2969 0
 19672 05c0 039B     		ldr	r3, [sp, #12]
 19673 05c2 13B9     		cbnz	r3, .L69
 19674 05c4 5FFA8BF0 		uxtb	r0, fp
 19675 05c8 0A90     		str	r0, [sp, #40]
 19676              	.L69:
2970:../sd_card/fatfs/ff.c **** 	do {
2971:../sd_card/fatfs/ff.c **** 		if (disk_write(drv, tbl, b_fat++, 1) != RES_OK)
 19677              		.loc 1 2971 0
 19678 05ca 4FF00009 		mov	r9, #0
 19679 05ce 4FF0010B 		mov	fp, #1
 19680              	.LVL111:
 19681 05d2 2A46     		mov	r2, r5
 19682 05d4 DDF82880 		ldr	r8, [sp, #40]
 19683              	.LVL112:
 19684              	.L75:
 19685 05d8 02F10107 		add	r7, r2, #1
 19686              	.LVL113:
 19687 05dc 4846     		mov	r0, r9
 19688 05de 2146     		mov	r1, r4
 19689 05e0 5B46     		mov	r3, fp
 19690 05e2 FFF7FEFF 		bl	disk_write
 19691 05e6 0028     		cmp	r0, #0
 19692 05e8 67D1     		bne	.L57
2972:../sd_card/fatfs/ff.c **** 			return FR_DISK_ERR;
2973:../sd_card/fatfs/ff.c **** 	} while (--m);
 19693              		.loc 1 2973 0
 19694 05ea 08F1FF38 		add	r8, r8, #-1
 19695              	.LVL114:
 19696 05ee 5FFA88F8 		uxtb	r8, r8
 19697              	.LVL115:
 19698 05f2 B8F1000F 		cmp	r8, #0
 19699 05f6 01D0     		beq	.L70
 19700 05f8 3A46     		mov	r2, r7
 19701 05fa EDE7     		b	.L75
 19702              	.LVL116:
 19703              	.L70:
2974:../sd_card/fatfs/ff.c **** 
2975:../sd_card/fatfs/ff.c **** 	/* Create FSInfo record if needed */
2976:../sd_card/fatfs/ff.c **** 	if (fmt == FS_FAT32) {
 19704              		.loc 1 2976 0
 19705 05fc 0399     		ldr	r1, [sp, #12]
 19706 05fe 0029     		cmp	r1, #0
 19707 0600 4ED0     		beq	.L71
2977:../sd_card/fatfs/ff.c **** 		ST_WORD(tbl+BS_55AA, 0xAA55);
 19708              		.loc 1 2977 0
 19709 0602 4FF05503 		mov	r3, #85
 19710 0606 0B9A     		ldr	r2, [sp, #44]
 19711 0608 1370     		strb	r3, [r2, #0]
 19712 060a A3F1AB03 		sub	r3, r3, #171
 19713 060e 0898     		ldr	r0, [sp, #32]
 19714 0610 0370     		strb	r3, [r0, #0]
2978:../sd_card/fatfs/ff.c **** 		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
 19715              		.loc 1 2978 0
 19716 0612 03F1A803 		add	r3, r3, #168
 19717 0616 86F83030 		strb	r3, [r6, #48]
 19718 061a 0699     		ldr	r1, [sp, #24]
 19719 061c 0B70     		strb	r3, [r1, #0]
 19720 061e 03F10F03 		add	r3, r3, #15
 19721 0622 059A     		ldr	r2, [sp, #20]
 19722 0624 1370     		strb	r3, [r2, #0]
 19723 0626 4FF04102 		mov	r2, #65
 19724 062a 0498     		ldr	r0, [sp, #16]
 19725 062c 0270     		strb	r2, [r0, #0]
2979:../sd_card/fatfs/ff.c **** 		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
 19726              		.loc 1 2979 0
 19727 062e 4FF07201 		mov	r1, #114
 19728 0632 84F8E411 		strb	r1, [r4, #484]
 19729 0636 84F8E511 		strb	r1, [r4, #485]
 19730 063a 84F8E621 		strb	r2, [r4, #486]
 19731 063e 84F8E731 		strb	r3, [r4, #487]
2980:../sd_card/fatfs/ff.c **** 		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);
 19732              		.loc 1 2980 0
 19733 0642 0199     		ldr	r1, [sp, #4]
 19734 0644 01F1FF33 		add	r3, r1, #-1
 19735 0648 84F8E831 		strb	r3, [r4, #488]
 19736 064c 4FEA1323 		lsr	r3, r3, #8
 19737 0650 84F8E931 		strb	r3, [r4, #489]
 19738 0654 01F1FF33 		add	r3, r1, #-1
 19739 0658 4FEA1342 		lsr	r2, r3, #16
 19740 065c 84F8EA21 		strb	r2, [r4, #490]
 19741 0660 4FEA1363 		lsr	r3, r3, #24
 19742 0664 84F8EB31 		strb	r3, [r4, #491]
2981:../sd_card/fatfs/ff.c **** 		ST_DWORD(tbl+FSI_Nxt_Free, 0xFFFFFFFF);
 19743              		.loc 1 2981 0
 19744 0668 4FF0FF33 		mov	r3, #-1
 19745 066c 84F8EC31 		strb	r3, [r4, #492]
 19746 0670 84F8ED31 		strb	r3, [r4, #493]
 19747 0674 84F8EE31 		strb	r3, [r4, #494]
 19748 0678 84F8EF31 		strb	r3, [r4, #495]
2982:../sd_card/fatfs/ff.c **** 		disk_write(drv, tbl, b_part+1, 1);
 19749              		.loc 1 2982 0
 19750 067c 4FF00000 		mov	r0, #0
 19751 0680 2146     		mov	r1, r4
 19752 0682 0AF10102 		add	r2, sl, #1
 19753 0686 03F10203 		add	r3, r3, #2
 19754 068a FFF7FEFF 		bl	disk_write
2983:../sd_card/fatfs/ff.c **** 		disk_write(drv, tbl, b_part+7, 1);
 19755              		.loc 1 2983 0
 19756 068e 4FF00000 		mov	r0, #0
 19757 0692 2146     		mov	r1, r4
 19758 0694 0AF10702 		add	r2, sl, #7
 19759 0698 4FF00103 		mov	r3, #1
 19760 069c FFF7FEFF 		bl	disk_write
 19761              	.L71:
2984:../sd_card/fatfs/ff.c **** 	}
2985:../sd_card/fatfs/ff.c **** 
2986:../sd_card/fatfs/ff.c **** 	return (disk_ioctl(drv, CTRL_SYNC, (void*)NULL) == RES_OK) ? FR_OK : FR_DISK_ERR;
 19762              		.loc 1 2986 0
 19763 06a0 4FF00000 		mov	r0, #0
 19764 06a4 0146     		mov	r1, r0
 19765 06a6 0246     		mov	r2, r0
 19766 06a8 FFF7FEFF 		bl	disk_ioctl
 19767 06ac 0038     		subs	r0, r0, #0
 19768 06ae 18BF     		it	ne
 19769 06b0 0120     		movne	r0, #1
 19770 06b2 04E0     		b	.L23
 19771              	.LVL117:
 19772              	.L24:
 19773 06b4 4FF00E00 		mov	r0, #14
 19774              	.LVL118:
 19775 06b8 01E0     		b	.L23
 19776              	.LVL119:
 19777              	.L57:
 19778 06ba 4FF00100 		mov	r0, #1
 19779              	.LVL120:
 19780              	.L23:
2987:../sd_card/fatfs/ff.c **** }
 19781              		.loc 1 2987 0
 19782 06be 0FB0     		add	sp, sp, #60
 19783 06c0 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 19784              		.cfi_endproc
 19785              	.LFE60:
 19787              		.section	.text.validate,"ax",%progbits
 19788              		.align	2
 19789              		.thumb
 19790              		.thumb_func
 19792              	validate:
 19793              	.LFB50:
 19794              		.loc 1 1601 0
 19795              		.cfi_startproc
 19796              		@ args = 0, pretend = 0, frame = 0
 19797              		@ frame_needed = 0, uses_anonymous_args = 0
 19798              	.LVL121:
 19799 0000 08B5     		push	{r3, lr}
 19800              	.LCFI2:
 19801              		.cfi_def_cfa_offset 8
 19802              		.loc 1 1602 0
 19803 0002 68B1     		cbz	r0, .L78
 19804              		.cfi_offset 14, -4
 19805              		.cfi_offset 3, -8
 19806 0004 0278     		ldrb	r2, [r0, #0]	@ zero_extendqisi2
 19807 0006 5AB1     		cbz	r2, .L78
 19808 0008 C288     		ldrh	r2, [r0, #6]
 19809 000a 8A42     		cmp	r2, r1
 19810 000c 08D1     		bne	.L78
 19811              		.loc 1 1607 0
 19812 000e 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 19813              	.LVL122:
 19814 0010 FFF7FEFF 		bl	disk_status
 19815              	.LVL123:
 19816 0014 10F0010F 		tst	r0, #1
 19817 0018 14BF     		ite	ne
 19818 001a 0320     		movne	r0, #3
 19819 001c 0020     		moveq	r0, #0
 19820 001e 08BD     		pop	{r3, pc}
 19821              	.LVL124:
 19822              	.L78:
 19823 0020 4FF00900 		mov	r0, #9
 19824              	.LVL125:
 19825              		.loc 1 1611 0
 19826 0024 08BD     		pop	{r3, pc}
 19827              		.cfi_endproc
 19828              	.LFE50:
 19830 0026 00BF     		.section	.text.move_window,"ax",%progbits
 19831              		.align	2
 19832              		.thumb
 19833              		.thumb_func
 19835              	move_window:
 19836              	.LFB33:
 19837              		.loc 1 247 0
 19838              		.cfi_startproc
 19839              		@ args = 0, pretend = 0, frame = 0
 19840              		@ frame_needed = 0, uses_anonymous_args = 0
 19841              	.LVL126:
 19842 0000 2DE9F845 		push	{r3, r4, r5, r6, r7, r8, sl, lr}
 19843              	.LCFI3:
 19844              		.cfi_def_cfa_offset 32
 19845 0004 0446     		mov	r4, r0
 19846              		.cfi_offset 14, -4
 19847              		.cfi_offset 10, -8
 19848              		.cfi_offset 8, -12
 19849              		.cfi_offset 7, -16
 19850              		.cfi_offset 6, -20
 19851              		.cfi_offset 5, -24
 19852              		.cfi_offset 4, -28
 19853              		.cfi_offset 3, -32
 19854 0006 0E46     		mov	r6, r1
 19855              		.loc 1 251 0
 19856 0008 C56A     		ldr	r5, [r0, #44]
 19857              	.LVL127:
 19858              		.loc 1 252 0
 19859 000a 8D42     		cmp	r5, r1
 19860 000c 36D0     		beq	.L83
 19861              		.loc 1 254 0
 19862 000e 0379     		ldrb	r3, [r0, #4]	@ zero_extendqisi2
 19863 0010 1BB3     		cbz	r3, .L84
 19864              		.loc 1 255 0
 19865 0012 00F13008 		add	r8, r0, #48
 19866 0016 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 19867              	.LVL128:
 19868 0018 4146     		mov	r1, r8
 19869              	.LVL129:
 19870 001a 2A46     		mov	r2, r5
 19871 001c 4FF00103 		mov	r3, #1
 19872 0020 FFF7FEFF 		bl	disk_write
 19873 0024 30BB     		cbnz	r0, .L85
 19874              		.loc 1 257 0
 19875 0026 4FF00003 		mov	r3, #0
 19876 002a 2371     		strb	r3, [r4, #4]
 19877              		.loc 1 258 0
 19878 002c A269     		ldr	r2, [r4, #24]
 19879 002e 236A     		ldr	r3, [r4, #32]
 19880 0030 1344     		add	r3, r2, r3
 19881 0032 9D42     		cmp	r5, r3
 19882 0034 11D2     		bcs	.L84
 19883              	.LBB3:
 19884              		.loc 1 260 0
 19885 0036 E778     		ldrb	r7, [r4, #3]	@ zero_extendqisi2
 19886              	.LVL130:
 19887 0038 012F     		cmp	r7, #1
 19888 003a 0ED9     		bls	.L84
 19889              		.loc 1 262 0
 19890 003c 4FF0010A 		mov	sl, #1
 19891              	.L89:
 19892              		.loc 1 261 0
 19893 0040 A369     		ldr	r3, [r4, #24]
 19894 0042 1D44     		add	r5, r5, r3
 19895              		.loc 1 262 0
 19896 0044 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 19897 0046 4146     		mov	r1, r8
 19898 0048 2A46     		mov	r2, r5
 19899 004a 5346     		mov	r3, sl
 19900 004c FFF7FEFF 		bl	disk_write
 19901              		.loc 1 260 0
 19902 0050 07F1FF37 		add	r7, r7, #-1
 19903              	.LVL131:
 19904 0054 FFB2     		uxtb	r7, r7
 19905              	.LVL132:
 19906 0056 012F     		cmp	r7, #1
 19907 0058 F2D8     		bhi	.L89
 19908              	.LVL133:
 19909              	.L84:
 19910              	.LBE3:
 19911              		.loc 1 267 0
 19912 005a 7EB1     		cbz	r6, .L83
 19913              		.loc 1 268 0
 19914 005c 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 19915 005e 04F13001 		add	r1, r4, #48
 19916 0062 3246     		mov	r2, r6
 19917 0064 4FF00103 		mov	r3, #1
 19918 0068 FFF7FEFF 		bl	disk_read
 19919 006c 10B9     		cbnz	r0, .L85
 19920              		.loc 1 270 0
 19921 006e E662     		str	r6, [r4, #44]
 19922 0070 BDE8F885 		pop	{r3, r4, r5, r6, r7, r8, sl, pc}
 19923              	.L85:
 19924 0074 4FF00100 		mov	r0, #1
 19925 0078 BDE8F885 		pop	{r3, r4, r5, r6, r7, r8, sl, pc}
 19926              	.LVL134:
 19927              	.L83:
 19928 007c 4FF00000 		mov	r0, #0
 19929              	.LVL135:
 19930              		.loc 1 275 0
 19931 0080 BDE8F885 		pop	{r3, r4, r5, r6, r7, r8, sl, pc}
 19932              		.cfi_endproc
 19933              	.LFE33:
 19935              		.section	.text.f_sync,"ax",%progbits
 19936              		.align	2
 19937              		.global	f_sync
 19938              		.thumb
 19939              		.thumb_func
 19941              	f_sync:
 19942              	.LFB55:
 19943              		.loc 1 1976 0
 19944              		.cfi_startproc
 19945              		@ args = 0, pretend = 0, frame = 0
 19946              		@ frame_needed = 0, uses_anonymous_args = 0
 19947              	.LVL136:
 19948 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 19949              	.LCFI4:
 19950              		.cfi_def_cfa_offset 24
 19951 0002 0546     		mov	r5, r0
 19952              		.cfi_offset 14, -4
 19953              		.cfi_offset 7, -8
 19954              		.cfi_offset 6, -12
 19955              		.cfi_offset 5, -16
 19956              		.cfi_offset 4, -20
 19957              		.cfi_offset 3, -24
 19958              		.loc 1 1982 0
 19959 0004 0068     		ldr	r0, [r0, #0]
 19960              	.LVL137:
 19961 0006 A988     		ldrh	r1, [r5, #4]
 19962 0008 FFF7FEFF 		bl	validate
 19963              		.loc 1 1983 0
 19964 000c 0446     		mov	r4, r0
 19965              	.LVL138:
 19966 000e 0028     		cmp	r0, #0
 19967 0010 40F0A780 		bne	.L92
 19968              		.loc 1 1984 0
 19969 0014 AB79     		ldrb	r3, [r5, #6]	@ zero_extendqisi2
 19970 0016 13F0200F 		tst	r3, #32
 19971 001a 00F0A280 		beq	.L92
 19972              		.loc 1 1993 0
 19973 001e 2868     		ldr	r0, [r5, #0]
 19974 0020 E969     		ldr	r1, [r5, #28]
 19975 0022 FFF7FEFF 		bl	move_window
 19976              		.loc 1 1994 0
 19977 0026 0446     		mov	r4, r0
 19978              	.LVL139:
 19979 0028 0028     		cmp	r0, #0
 19980 002a 40F09A80 		bne	.L92
 19981              		.loc 1 1995 0
 19982 002e 2C6A     		ldr	r4, [r5, #32]
 19983              	.LVL140:
 19984              		.loc 1 1996 0
 19985 0030 2346     		mov	r3, r4
 19986 0032 13F80B2F 		ldrb	r2, [r3, #11]!	@ zero_extendqisi2
 19987 0036 42F02002 		orr	r2, r2, #32
 19988 003a 1A70     		strb	r2, [r3, #0]
 19989              		.loc 1 1997 0
 19990 003c EB68     		ldr	r3, [r5, #12]
 19991 003e 2377     		strb	r3, [r4, #28]
 19992 0040 AB89     		ldrh	r3, [r5, #12]
 19993 0042 4FEA1323 		lsr	r3, r3, #8
 19994 0046 6377     		strb	r3, [r4, #29]
 19995 0048 EB89     		ldrh	r3, [r5, #14]
 19996 004a A377     		strb	r3, [r4, #30]
 19997 004c EB7B     		ldrb	r3, [r5, #15]	@ zero_extendqisi2
 19998 004e E377     		strb	r3, [r4, #31]
 19999              		.loc 1 1998 0
 20000 0050 2B69     		ldr	r3, [r5, #16]
 20001 0052 A376     		strb	r3, [r4, #26]
 20002 0054 2B8A     		ldrh	r3, [r5, #16]
 20003 0056 4FEA1323 		lsr	r3, r3, #8
 20004 005a E376     		strb	r3, [r4, #27]
 20005              		.loc 1 1999 0
 20006 005c 6B8A     		ldrh	r3, [r5, #18]
 20007 005e 2375     		strb	r3, [r4, #20]
 20008 0060 6B8A     		ldrh	r3, [r5, #18]
 20009 0062 4FEA1323 		lsr	r3, r3, #8
 20010 0066 6375     		strb	r3, [r4, #21]
 20011              		.loc 1 2000 0
 20012 0068 FFF7FEFF 		bl	get_fattime
 20013              		.loc 1 2001 0
 20014 006c A075     		strb	r0, [r4, #22]
 20015              	.LVL141:
 20016 006e C0F30723 		ubfx	r3, r0, #8, #8
 20017 0072 E375     		strb	r3, [r4, #23]
 20018 0074 4FEA1043 		lsr	r3, r0, #16
 20019 0078 2376     		strb	r3, [r4, #24]
 20020 007a 4FEA1060 		lsr	r0, r0, #24
 20021              	.LVL142:
 20022 007e 6076     		strb	r0, [r4, #25]
 20023              		.loc 1 2002 0
 20024 0080 AB79     		ldrb	r3, [r5, #6]	@ zero_extendqisi2
 20025 0082 23F02003 		bic	r3, r3, #32
 20026 0086 AB71     		strb	r3, [r5, #6]
 20027              		.loc 1 2003 0
 20028 0088 2B68     		ldr	r3, [r5, #0]
 20029 008a 4FF00102 		mov	r2, #1
 20030 008e 1A71     		strb	r2, [r3, #4]
 20031              		.loc 1 2004 0
 20032 0090 2D68     		ldr	r5, [r5, #0]
 20033              	.LVL143:
 20034              	.LBB6:
 20035              	.LBB7:
 20036              		.loc 1 292 0
 20037 0092 2846     		mov	r0, r5
 20038 0094 4FF00001 		mov	r1, #0
 20039 0098 FFF7FEFF 		bl	move_window
 20040              		.loc 1 293 0
 20041 009c 0446     		mov	r4, r0
 20042              	.LVL144:
 20043 009e 0028     		cmp	r0, #0
 20044 00a0 5FD1     		bne	.L92
 20045              		.loc 1 295 0
 20046 00a2 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 20047 00a4 032B     		cmp	r3, #3
 20048 00a6 53D1     		bne	.L93
 20049 00a8 6B79     		ldrb	r3, [r5, #5]	@ zero_extendqisi2
 20050 00aa 002B     		cmp	r3, #0
 20051 00ac 50D0     		beq	.L93
 20052              		.loc 1 296 0
 20053 00ae 4FF00006 		mov	r6, #0
 20054 00b2 EE62     		str	r6, [r5, #44]
 20055              		.loc 1 297 0
 20056 00b4 05F13007 		add	r7, r5, #48
 20057 00b8 3846     		mov	r0, r7
 20058 00ba 3146     		mov	r1, r6
 20059 00bc 4FF40072 		mov	r2, #512
 20060 00c0 FFF7FEFF 		bl	mem_set
 20061              		.loc 1 298 0
 20062 00c4 4FF05503 		mov	r3, #85
 20063 00c8 85F82E32 		strb	r3, [r5, #558]
 20064 00cc 6FF05503 		mvn	r3, #85
 20065 00d0 85F82F32 		strb	r3, [r5, #559]
 20066              		.loc 1 299 0
 20067 00d4 4FF05203 		mov	r3, #82
 20068 00d8 85F83030 		strb	r3, [r5, #48]
 20069 00dc 85F83130 		strb	r3, [r5, #49]
 20070 00e0 4FF06103 		mov	r3, #97
 20071 00e4 85F83230 		strb	r3, [r5, #50]
 20072 00e8 4FF04102 		mov	r2, #65
 20073 00ec 85F83320 		strb	r2, [r5, #51]
 20074              		.loc 1 300 0
 20075 00f0 4FF07201 		mov	r1, #114
 20076 00f4 85F81412 		strb	r1, [r5, #532]
 20077 00f8 85F81512 		strb	r1, [r5, #533]
 20078 00fc 85F81622 		strb	r2, [r5, #534]
 20079 0100 85F81732 		strb	r3, [r5, #535]
 20080              		.loc 1 301 0
 20081 0104 2B69     		ldr	r3, [r5, #16]
 20082 0106 85F81832 		strb	r3, [r5, #536]
 20083 010a C3F30722 		ubfx	r2, r3, #8, #8
 20084 010e 85F81922 		strb	r2, [r5, #537]
 20085 0112 4FEA1342 		lsr	r2, r3, #16
 20086 0116 85F81A22 		strb	r2, [r5, #538]
 20087 011a 4FEA1363 		lsr	r3, r3, #24
 20088 011e 85F81B32 		strb	r3, [r5, #539]
 20089              		.loc 1 302 0
 20090 0122 EB68     		ldr	r3, [r5, #12]
 20091 0124 85F81C32 		strb	r3, [r5, #540]
 20092 0128 C3F30722 		ubfx	r2, r3, #8, #8
 20093 012c 85F81D22 		strb	r2, [r5, #541]
 20094 0130 4FEA1342 		lsr	r2, r3, #16
 20095 0134 85F81E22 		strb	r2, [r5, #542]
 20096 0138 4FEA1363 		lsr	r3, r3, #24
 20097 013c 85F81F32 		strb	r3, [r5, #543]
 20098              		.loc 1 303 0
 20099 0140 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 20100 0142 3946     		mov	r1, r7
 20101 0144 6A69     		ldr	r2, [r5, #20]
 20102 0146 4FF00103 		mov	r3, #1
 20103 014a FFF7FEFF 		bl	disk_write
 20104              		.loc 1 304 0
 20105 014e 6E71     		strb	r6, [r5, #5]
 20106              	.L93:
 20107              		.loc 1 307 0
 20108 0150 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 20109 0152 4FF00001 		mov	r1, #0
 20110 0156 0A46     		mov	r2, r1
 20111 0158 FFF7FEFF 		bl	disk_ioctl
 20112 015c 0028     		cmp	r0, #0
 20113 015e 18BF     		it	ne
 20114 0160 0124     		movne	r4, #1
 20115              	.LVL145:
 20116              	.L92:
 20117              	.LBE7:
 20118              	.LBE6:
 20119              		.loc 1 2010 0
 20120 0162 2046     		mov	r0, r4
 20121 0164 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 20122              		.cfi_endproc
 20123              	.LFE55:
 20125 0166 00BF     		.section	.text.f_close,"ax",%progbits
 20126              		.align	2
 20127              		.global	f_close
 20128              		.thumb
 20129              		.thumb_func
 20131              	f_close:
 20132              	.LFB56:
 20133              		.loc 1 2024 0
 20134              		.cfi_startproc
 20135              		@ args = 0, pretend = 0, frame = 0
 20136              		@ frame_needed = 0, uses_anonymous_args = 0
 20137              	.LVL146:
 20138 0000 10B5     		push	{r4, lr}
 20139              	.LCFI5:
 20140              		.cfi_def_cfa_offset 8
 20141 0002 0446     		mov	r4, r0
 20142              		.cfi_offset 14, -4
 20143              		.cfi_offset 4, -8
 20144              		.loc 1 2035 0
 20145 0004 FFF7FEFF 		bl	f_sync
 20146              	.LVL147:
 20147              		.loc 1 2036 0
 20148 0008 0346     		mov	r3, r0
 20149              	.LVL148:
 20150 000a 10B9     		cbnz	r0, .L96
 20151 000c 4FF00002 		mov	r2, #0
 20152 0010 2260     		str	r2, [r4, #0]
 20153              	.L96:
 20154              		.loc 1 2039 0
 20155 0012 1846     		mov	r0, r3
 20156 0014 10BD     		pop	{r4, pc}
 20157              		.cfi_endproc
 20158              	.LFE56:
 20160 0016 00BF     		.section	.text.put_fat,"ax",%progbits
 20161              		.align	2
 20162              		.global	put_fat
 20163              		.thumb
 20164              		.thumb_func
 20166              	put_fat:
 20167              	.LFB36:
 20168              		.loc 1 370 0
 20169              		.cfi_startproc
 20170              		@ args = 0, pretend = 0, frame = 0
 20171              		@ frame_needed = 0, uses_anonymous_args = 0
 20172              	.LVL149:
 20173 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 20174              	.LCFI6:
 20175              		.cfi_def_cfa_offset 24
 20176 0004 0446     		mov	r4, r0
 20177              		.cfi_offset 14, -4
 20178              		.cfi_offset 8, -8
 20179              		.cfi_offset 7, -12
 20180              		.cfi_offset 6, -16
 20181              		.cfi_offset 5, -20
 20182              		.cfi_offset 4, -24
 20183 0006 0D46     		mov	r5, r1
 20184 0008 1646     		mov	r6, r2
 20185              		.loc 1 377 0
 20186 000a 0129     		cmp	r1, #1
 20187 000c 7BD9     		bls	.L99
 20188              	.LVL150:
 20189 000e C369     		ldr	r3, [r0, #28]
 20190 0010 9942     		cmp	r1, r3
 20191 0012 78D2     		bcs	.L99
 20192              	.LVL151:
 20193              		.loc 1 381 0
 20194 0014 076A     		ldr	r7, [r0, #32]
 20195              	.LVL152:
 20196              		.loc 1 382 0
 20197 0016 0378     		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 20198 0018 022B     		cmp	r3, #2
 20199 001a 47D0     		beq	.L102
 20200 001c 032B     		cmp	r3, #3
 20201 001e 56D0     		beq	.L103
 20202 0020 012B     		cmp	r3, #1
 20203 0022 18BF     		it	ne
 20204 0024 0223     		movne	r3, #2
 20205              	.LVL153:
 20206 0026 6AD1     		bne	.L104
 20207              		.loc 1 384 0
 20208 0028 01EB5108 		add	r8, r1, r1, lsr #1
 20209              	.LVL154:
 20210              		.loc 1 385 0
 20211 002c 07EB5821 		add	r1, r7, r8, lsr #9
 20212              	.LVL155:
 20213 0030 FFF7FEFF 		bl	move_window
 20214              	.LVL156:
 20215              		.loc 1 386 0
 20216 0034 0346     		mov	r3, r0
 20217              	.LVL157:
 20218 0036 0028     		cmp	r0, #0
 20219 0038 61D1     		bne	.L104
 20220              		.loc 1 387 0
 20221 003a 4FEAC853 		lsl	r3, r8, #23
 20222              	.LVL158:
 20223 003e 4FEAD353 		lsr	r3, r3, #23
 20224              		.loc 1 388 0
 20225 0042 15F00105 		ands	r5, r5, #1
 20226              	.LVL159:
 20227 0046 1FBF     		itttt	ne
 20228 0048 1A19     		addne	r2, r3, r4
 20229 004a 92F83020 		ldrbne	r2, [r2, #48]	@ zero_extendqisi2
 20230 004e F1B2     		uxtbne	r1, r6
 20231              	.LVL160:
 20232 0050 02F00F02 		andne	r2, r2, #15
 20233 0054 1ABF     		itte	ne
 20234 0056 42EA0112 		orrne	r2, r2, r1, lsl #4
 20235 005a D2B2     		uxtbne	r2, r2
 20236 005c F2B2     		uxtbeq	r2, r6
 20237 005e 2344     		add	r3, r3, r4
 20238 0060 83F83020 		strb	r2, [r3, #48]
 20239              		.loc 1 389 0
 20240 0064 08F10108 		add	r8, r8, #1
 20241              	.LVL161:
 20242              		.loc 1 390 0
 20243 0068 4FF00103 		mov	r3, #1
 20244 006c 2371     		strb	r3, [r4, #4]
 20245              		.loc 1 391 0
 20246 006e 2046     		mov	r0, r4
 20247 0070 07EB5821 		add	r1, r7, r8, lsr #9
 20248              	.LVL162:
 20249 0074 FFF7FEFF 		bl	move_window
 20250              		.loc 1 392 0
 20251 0078 0346     		mov	r3, r0
 20252              	.LVL163:
 20253 007a 0028     		cmp	r0, #0
 20254 007c 3FD1     		bne	.L104
 20255              		.loc 1 393 0
 20256 007e 4FEAC858 		lsl	r8, r8, #23
 20257              	.LVL164:
 20258 0082 4FEAD858 		lsr	r8, r8, #23
 20259              		.loc 1 394 0
 20260 0086 15B1     		cbz	r5, .L107
 20261 0088 C6F30716 		ubfx	r6, r6, #4, #8
 20262              	.LVL165:
 20263 008c 09E0     		b	.L108
 20264              	.LVL166:
 20265              	.L107:
 20266 008e 08EB0402 		add	r2, r8, r4
 20267 0092 92F83020 		ldrb	r2, [r2, #48]	@ zero_extendqisi2
 20268 0096 C6F30326 		ubfx	r6, r6, #8, #4
 20269              	.LVL167:
 20270 009a 02F0F002 		and	r2, r2, #240
 20271 009e 42EA0606 		orr	r6, r2, r6
 20272              	.L108:
 20273 00a2 08EB0402 		add	r2, r8, r4
 20274 00a6 82F83060 		strb	r6, [r2, #48]
 20275              		.loc 1 395 0
 20276 00aa 28E0     		b	.L104
 20277              	.LVL168:
 20278              	.L102:
 20279              		.loc 1 398 0
 20280 00ac 07EB1121 		add	r1, r7, r1, lsr #8
 20281              	.LVL169:
 20282 00b0 FFF7FEFF 		bl	move_window
 20283              	.LVL170:
 20284              		.loc 1 399 0
 20285 00b4 0346     		mov	r3, r0
 20286              	.LVL171:
 20287 00b6 10BB     		cbnz	r0, .L104
 20288              		.loc 1 400 0
 20289 00b8 4FEA0565 		lsl	r5, r5, #24
 20290              	.LVL172:
 20291 00bc 04EBD555 		add	r5, r4, r5, lsr #23
 20292 00c0 85F83060 		strb	r6, [r5, #48]
 20293 00c4 C6F30726 		ubfx	r6, r6, #8, #8
 20294              	.LVL173:
 20295 00c8 85F83160 		strb	r6, [r5, #49]
 20296              		.loc 1 401 0
 20297 00cc 17E0     		b	.L104
 20298              	.LVL174:
 20299              	.L103:
 20300              		.loc 1 404 0
 20301 00ce 07EBD111 		add	r1, r7, r1, lsr #7
 20302              	.LVL175:
 20303 00d2 FFF7FEFF 		bl	move_window
 20304              	.LVL176:
 20305              		.loc 1 405 0
 20306 00d6 0346     		mov	r3, r0
 20307              	.LVL177:
 20308 00d8 88B9     		cbnz	r0, .L104
 20309              		.loc 1 406 0
 20310 00da 4FEA4565 		lsl	r5, r5, #25
 20311              	.LVL178:
 20312 00de 04EBD555 		add	r5, r4, r5, lsr #23
 20313 00e2 85F83060 		strb	r6, [r5, #48]
 20314 00e6 C6F30722 		ubfx	r2, r6, #8, #8
 20315 00ea 85F83120 		strb	r2, [r5, #49]
 20316 00ee 4FEA1642 		lsr	r2, r6, #16
 20317 00f2 85F83220 		strb	r2, [r5, #50]
 20318 00f6 4FEA1666 		lsr	r6, r6, #24
 20319              	.LVL179:
 20320 00fa 85F83360 		strb	r6, [r5, #51]
 20321              	.LVL180:
 20322              	.L104:
 20323              		.loc 1 412 0
 20324 00fe 4FF00102 		mov	r2, #1
 20325 0102 2271     		strb	r2, [r4, #4]
 20326 0104 01E0     		b	.L109
 20327              	.LVL181:
 20328              	.L99:
 20329 0106 4FF00203 		mov	r3, #2
 20330              	.LVL182:
 20331              	.L109:
 20332              		.loc 1 416 0
 20333 010a 1846     		mov	r0, r3
 20334              	.LVL183:
 20335 010c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 20336              		.cfi_endproc
 20337              	.LFE36:
 20339              		.section	.text.get_fat,"ax",%progbits
 20340              		.align	2
 20341              		.global	get_fat
 20342              		.thumb
 20343              		.thumb_func
 20345              	get_fat:
 20346              	.LFB35:
 20347              		.loc 1 327 0
 20348              		.cfi_startproc
 20349              		@ args = 0, pretend = 0, frame = 0
 20350              		@ frame_needed = 0, uses_anonymous_args = 0
 20351              	.LVL184:
 20352 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 20353              	.LCFI7:
 20354              		.cfi_def_cfa_offset 24
 20355 0004 0446     		mov	r4, r0
 20356              		.cfi_offset 14, -4
 20357              		.cfi_offset 8, -8
 20358              		.cfi_offset 7, -12
 20359              		.cfi_offset 6, -16
 20360              		.cfi_offset 5, -20
 20361              		.cfi_offset 4, -24
 20362 0006 0E46     		mov	r6, r1
 20363              		.loc 1 332 0
 20364 0008 0129     		cmp	r1, #1
 20365 000a 61D9     		bls	.L112
 20366              	.LVL185:
 20367 000c C369     		ldr	r3, [r0, #28]
 20368 000e 9942     		cmp	r1, r3
 20369 0010 5ED2     		bcs	.L112
 20370              	.LVL186:
 20371              		.loc 1 335 0
 20372 0012 076A     		ldr	r7, [r0, #32]
 20373              	.LVL187:
 20374              		.loc 1 336 0
 20375 0014 0378     		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 20376 0016 022B     		cmp	r3, #2
 20377 0018 2CD0     		beq	.L115
 20378 001a 032B     		cmp	r3, #3
 20379 001c 3BD0     		beq	.L116
 20380 001e 012B     		cmp	r3, #1
 20381 0020 5AD1     		bne	.L113
 20382              		.loc 1 338 0
 20383 0022 01EB5105 		add	r5, r1, r1, lsr #1
 20384              	.LVL188:
 20385              		.loc 1 339 0
 20386 0026 07EB5521 		add	r1, r7, r5, lsr #9
 20387              	.LVL189:
 20388 002a FFF7FEFF 		bl	move_window
 20389              	.LVL190:
 20390 002e 0028     		cmp	r0, #0
 20391 0030 52D1     		bne	.L113
 20392              		.loc 1 340 0
 20393 0032 4FEAC553 		lsl	r3, r5, #23
 20394 0036 4FEAD353 		lsr	r3, r3, #23
 20395 003a 2344     		add	r3, r4, r3
 20396 003c 93F83080 		ldrb	r8, [r3, #48]	@ zero_extendqisi2
 20397 0040 05F10105 		add	r5, r5, #1
 20398              	.LVL191:
 20399              		.loc 1 341 0
 20400 0044 2046     		mov	r0, r4
 20401 0046 07EB5521 		add	r1, r7, r5, lsr #9
 20402 004a FFF7FEFF 		bl	move_window
 20403 004e 0028     		cmp	r0, #0
 20404 0050 42D1     		bne	.L113
 20405              		.loc 1 342 0
 20406 0052 4FEAC555 		lsl	r5, r5, #23
 20407              	.LVL192:
 20408 0056 4FEAD555 		lsr	r5, r5, #23
 20409 005a 2544     		add	r5, r4, r5
 20410 005c 95F83000 		ldrb	r0, [r5, #48]	@ zero_extendqisi2
 20411 0060 48EA0020 		orr	r0, r8, r0, lsl #8
 20412              	.LVL193:
 20413              		.loc 1 343 0
 20414 0064 16F0010F 		tst	r6, #1
 20415 0068 12BF     		itee	ne
 20416 006a 0009     		lsrne	r0, r0, #4
 20417              	.LVL194:
 20418 006c 0005     		lsleq	r0, r0, #20
 20419              	.LVL195:
 20420 006e 000D     		lsreq	r0, r0, #20
 20421 0070 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 20422              	.LVL196:
 20423              	.L115:
 20424              		.loc 1 346 0
 20425 0074 07EB1121 		add	r1, r7, r1, lsr #8
 20426              	.LVL197:
 20427 0078 FFF7FEFF 		bl	move_window
 20428              	.LVL198:
 20429 007c 60BB     		cbnz	r0, .L113
 20430              		.loc 1 347 0
 20431 007e 4FEA0666 		lsl	r6, r6, #24
 20432              	.LVL199:
 20433 0082 04EBD654 		add	r4, r4, r6, lsr #23
 20434              	.LVL200:
 20435 0086 94F83100 		ldrb	r0, [r4, #49]	@ zero_extendqisi2
 20436 008a 94F83030 		ldrb	r3, [r4, #48]	@ zero_extendqisi2
 20437 008e 43EA0020 		orr	r0, r3, r0, lsl #8
 20438 0092 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 20439              	.LVL201:
 20440              	.L116:
 20441              		.loc 1 350 0
 20442 0096 07EBD111 		add	r1, r7, r1, lsr #7
 20443              	.LVL202:
 20444 009a FFF7FEFF 		bl	move_window
 20445              	.LVL203:
 20446 009e D8B9     		cbnz	r0, .L113
 20447              		.loc 1 351 0
 20448 00a0 4FEA4666 		lsl	r6, r6, #25
 20449              	.LVL204:
 20450 00a4 04EBD654 		add	r4, r4, r6, lsr #23
 20451              	.LVL205:
 20452 00a8 94F83330 		ldrb	r3, [r4, #51]	@ zero_extendqisi2
 20453 00ac 94F83200 		ldrb	r0, [r4, #50]	@ zero_extendqisi2
 20454 00b0 4FEA0040 		lsl	r0, r0, #16
 20455 00b4 40EA0360 		orr	r0, r0, r3, lsl #24
 20456 00b8 94F83030 		ldrb	r3, [r4, #48]	@ zero_extendqisi2
 20457 00bc 40EA0300 		orr	r0, r0, r3
 20458 00c0 94F83130 		ldrb	r3, [r4, #49]	@ zero_extendqisi2
 20459 00c4 40EA0320 		orr	r0, r0, r3, lsl #8
 20460 00c8 20F07040 		bic	r0, r0, #-268435456
 20461 00cc BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 20462              	.LVL206:
 20463              	.L112:
 20464 00d0 4FF00100 		mov	r0, #1
 20465              	.LVL207:
 20466 00d4 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 20467              	.LVL208:
 20468              	.L113:
 20469 00d8 4FF0FF30 		mov	r0, #-1
 20470              		.loc 1 355 0
 20471 00dc BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 20472              		.cfi_endproc
 20473              	.LFE35:
 20475              		.section	.text.dir_seek,"ax",%progbits
 20476              		.align	2
 20477              		.thumb
 20478              		.thumb_func
 20480              	dir_seek:
 20481              	.LFB40:
 20482              		.loc 1 549 0
 20483              		.cfi_startproc
 20484              		@ args = 0, pretend = 0, frame = 0
 20485              		@ frame_needed = 0, uses_anonymous_args = 0
 20486              	.LVL209:
 20487 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 20488              	.LCFI8:
 20489              		.cfi_def_cfa_offset 24
 20490 0002 0446     		mov	r4, r0
 20491              		.cfi_offset 14, -4
 20492              		.cfi_offset 7, -8
 20493              		.cfi_offset 6, -12
 20494              		.cfi_offset 5, -16
 20495              		.cfi_offset 4, -20
 20496              		.cfi_offset 3, -24
 20497 0004 0D46     		mov	r5, r1
 20498              		.loc 1 554 0
 20499 0006 E180     		strh	r1, [r4, #6]	@ movhi
 20500              		.loc 1 555 0
 20501 0008 8168     		ldr	r1, [r0, #8]
 20502              	.LVL210:
 20503              		.loc 1 556 0
 20504 000a 0129     		cmp	r1, #1
 20505 000c 4CD0     		beq	.L121
 20506 000e 0368     		ldr	r3, [r0, #0]
 20507 0010 DA69     		ldr	r2, [r3, #28]
 20508 0012 9142     		cmp	r1, r2
 20509 0014 48D2     		bcs	.L121
 20510              		.loc 1 558 0
 20511 0016 81B9     		cbnz	r1, .L122
 20512 0018 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 20513 001a 032A     		cmp	r2, #3
 20514 001c 01D1     		bne	.L123
 20515              		.loc 1 559 0
 20516 001e 596A     		ldr	r1, [r3, #36]
 20517              		.loc 1 561 0
 20518 0020 59B9     		cbnz	r1, .L122
 20519              	.L123:
 20520              		.loc 1 562 0
 20521 0022 4FF00003 		mov	r3, #0
 20522 0026 E360     		str	r3, [r4, #12]
 20523              		.loc 1 563 0
 20524 0028 2368     		ldr	r3, [r4, #0]
 20525 002a 1A89     		ldrh	r2, [r3, #8]
 20526 002c AA42     		cmp	r2, r5
 20527 002e 3BD9     		bls	.L121
 20528              	.LVL211:
 20529              		.loc 1 565 0
 20530 0030 5B6A     		ldr	r3, [r3, #36]
 20531 0032 03EB1513 		add	r3, r3, r5, lsr #4
 20532 0036 2361     		str	r3, [r4, #16]
 20533 0038 2BE0     		b	.L124
 20534              	.LVL212:
 20535              	.L122:
 20536              		.loc 1 568 0
 20537 003a 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
 20538 003c 4FEA0616 		lsl	r6, r6, #4
 20539              	.LVL213:
 20540              		.loc 1 569 0
 20541 0040 B542     		cmp	r5, r6
 20542 0042 1FD3     		bcc	.L125
 20543              		.loc 1 545 0
 20544 0044 C6F10007 		rsb	r7, r6, #0
 20545 0048 BFB2     		uxth	r7, r7
 20546 004a C6EB0505 		rsb	r5, r6, r5
 20547              	.LVL214:
 20548 004e ADB2     		uxth	r5, r5
 20549              	.LVL215:
 20550              	.L128:
 20551              		.loc 1 570 0
 20552 0050 2068     		ldr	r0, [r4, #0]
 20553 0052 FFF7FEFF 		bl	get_fat
 20554              	.LVL216:
 20555 0056 0146     		mov	r1, r0
 20556              	.LVL217:
 20557              		.loc 1 571 0
 20558 0058 B0F1FF3F 		cmp	r0, #-1
 20559 005c 02D1     		bne	.L126
 20560              	.LVL218:
 20561 005e 4FF00100 		mov	r0, #1
 20562              	.LVL219:
 20563 0062 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 20564              	.LVL220:
 20565              	.L126:
 20566              		.loc 1 572 0
 20567 0064 0128     		cmp	r0, #1
 20568 0066 1FD9     		bls	.L121
 20569 0068 2368     		ldr	r3, [r4, #0]
 20570 006a DB69     		ldr	r3, [r3, #28]
 20571 006c 9842     		cmp	r0, r3
 20572 006e 1BD2     		bcs	.L121
 20573 0070 05EB0703 		add	r3, r5, r7
 20574 0074 9BB2     		uxth	r3, r3
 20575              	.LVL221:
 20576              		.loc 1 569 0
 20577 0076 03EB0602 		add	r2, r3, r6
 20578 007a 92B2     		uxth	r2, r2
 20579 007c 9642     		cmp	r6, r2
 20580 007e 01D8     		bhi	.L125
 20581 0080 1D46     		mov	r5, r3
 20582 0082 E5E7     		b	.L128
 20583              	.LVL222:
 20584              	.L125:
 20585              		.loc 1 576 0
 20586 0084 E160     		str	r1, [r4, #12]
 20587              		.loc 1 577 0
 20588 0086 2068     		ldr	r0, [r4, #0]
 20589 0088 FFF7FEFF 		bl	clust2sect
 20590              	.LVL223:
 20591 008c 00EB1510 		add	r0, r0, r5, lsr #4
 20592 0090 2061     		str	r0, [r4, #16]
 20593              	.LVL224:
 20594              	.L124:
 20595              		.loc 1 580 0
 20596 0092 2368     		ldr	r3, [r4, #0]
 20597 0094 03F13003 		add	r3, r3, #48
 20598 0098 05F00F05 		and	r5, r5, #15
 20599              	.LVL225:
 20600 009c 03EB4515 		add	r5, r3, r5, lsl #5
 20601 00a0 6561     		str	r5, [r4, #20]
 20602 00a2 4FF00000 		mov	r0, #0
 20603              		.loc 1 582 0
 20604 00a6 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 20605              	.LVL226:
 20606              	.L121:
 20607 00a8 4FF00200 		mov	r0, #2
 20608              		.loc 1 583 0
 20609 00ac F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 20610              		.cfi_endproc
 20611              	.LFE40:
 20613 00ae 00BF     		.section	.text.create_chain,"ax",%progbits
 20614              		.align	2
 20615              		.thumb
 20616              		.thumb_func
 20618              	create_chain:
 20619              	.LFB38:
 20620              		.loc 1 472 0
 20621              		.cfi_startproc
 20622              		@ args = 0, pretend = 0, frame = 0
 20623              		@ frame_needed = 0, uses_anonymous_args = 0
 20624              	.LVL227:
 20625 0000 2DE9F845 		push	{r3, r4, r5, r6, r7, r8, sl, lr}
 20626              	.LCFI9:
 20627              		.cfi_def_cfa_offset 32
 20628 0004 0646     		mov	r6, r0
 20629              		.cfi_offset 14, -4
 20630              		.cfi_offset 10, -8
 20631              		.cfi_offset 8, -12
 20632              		.cfi_offset 7, -16
 20633              		.cfi_offset 6, -20
 20634              		.cfi_offset 5, -24
 20635              		.cfi_offset 4, -28
 20636              		.cfi_offset 3, -32
 20637              		.loc 1 476 0
 20638 0006 C769     		ldr	r7, [r0, #28]
 20639              	.LVL228:
 20640              		.loc 1 477 0
 20641 0008 8A46     		mov	sl, r1
 20642 000a 61B9     		cbnz	r1, .L131
 20643              		.loc 1 478 0
 20644 000c C568     		ldr	r5, [r0, #12]
 20645              	.LVL229:
 20646              		.loc 1 479 0
 20647 000e BD42     		cmp	r5, r7
 20648 0010 34BF     		ite	cc
 20649 0012 0023     		movcc	r3, #0
 20650 0014 0123     		movcs	r3, #1
 20651 0016 002D     		cmp	r5, #0
 20652 0018 08BF     		it	eq
 20653 001a 43F00103 		orreq	r3, r3, #1
 20654 001e 002B     		cmp	r3, #0
 20655 0020 18BF     		it	ne
 20656 0022 0125     		movne	r5, #1
 20657 0024 09E0     		b	.L132
 20658              	.LVL230:
 20659              	.L131:
 20660              		.loc 1 482 0
 20661 0026 FFF7FEFF 		bl	get_fat
 20662              	.LVL231:
 20663 002a 0346     		mov	r3, r0
 20664              	.LVL232:
 20665              		.loc 1 483 0
 20666 002c 0128     		cmp	r0, #1
 20667 002e 98BF     		it	ls
 20668 0030 0123     		movls	r3, #1
 20669 0032 41D9     		bls	.L134
 20670              		.loc 1 484 0
 20671 0034 9F42     		cmp	r7, r3
 20672 0036 3FD8     		bhi	.L134
 20673 0038 5546     		mov	r5, sl
 20674              	.LVL233:
 20675              	.L132:
 20676 003a 2C46     		mov	r4, r5
 20677              	.LVL234:
 20678              		.loc 1 493 0
 20679 003c 4FF00208 		mov	r8, #2
 20680              	.LVL235:
 20681              	.L138:
 20682              		.loc 1 490 0
 20683 0040 04F10104 		add	r4, r4, #1
 20684              	.LVL236:
 20685              		.loc 1 491 0
 20686 0044 A742     		cmp	r7, r4
 20687 0046 02D8     		bhi	.L135
 20688              		.loc 1 493 0
 20689 0048 012D     		cmp	r5, #1
 20690 004a 30D9     		bls	.L136
 20691 004c 4446     		mov	r4, r8
 20692              	.L135:
 20693              		.loc 1 495 0
 20694 004e 3046     		mov	r0, r6
 20695 0050 2146     		mov	r1, r4
 20696 0052 FFF7FEFF 		bl	get_fat
 20697              	.LVL237:
 20698              		.loc 1 496 0
 20699 0056 0346     		mov	r3, r0
 20700              	.LVL238:
 20701 0058 60B1     		cbz	r0, .L137
 20702              		.loc 1 497 0
 20703 005a 0128     		cmp	r0, #1
 20704 005c 14BF     		ite	ne
 20705 005e 0022     		movne	r2, #0
 20706 0060 0122     		moveq	r2, #1
 20707 0062 B0F1FF3F 		cmp	r0, #-1
 20708 0066 08BF     		it	eq
 20709 0068 42F00102 		orreq	r2, r2, #1
 20710 006c 22BB     		cbnz	r2, .L134
 20711              	.LVL239:
 20712              		.loc 1 499 0
 20713 006e AC42     		cmp	r4, r5
 20714 0070 E6D1     		bne	.L138
 20715 0072 1CE0     		b	.L136
 20716              	.LVL240:
 20717              	.L137:
 20718 0074 2546     		mov	r5, r4
 20719              	.LVL241:
 20720              		.loc 1 502 0
 20721 0076 3046     		mov	r0, r6
 20722 0078 2146     		mov	r1, r4
 20723 007a 6FF07042 		mvn	r2, #-268435456
 20724 007e FFF7FEFF 		bl	put_fat
 20725              	.LVL242:
 20726 0082 B8B9     		cbnz	r0, .L139
 20727              		.loc 1 504 0
 20728 0084 BAF1000F 		cmp	sl, #0
 20729 0088 05D0     		beq	.L140
 20730              		.loc 1 505 0
 20731 008a 3046     		mov	r0, r6
 20732 008c 5146     		mov	r1, sl
 20733 008e 2246     		mov	r2, r4
 20734 0090 FFF7FEFF 		bl	put_fat
 20735 0094 70B9     		cbnz	r0, .L139
 20736              	.L140:
 20737              		.loc 1 509 0
 20738 0096 F560     		str	r5, [r6, #12]
 20739              		.loc 1 510 0
 20740 0098 3369     		ldr	r3, [r6, #16]
 20741 009a B3F1FF3F 		cmp	r3, #-1
 20742              		.loc 1 511 0
 20743 009e 1FBF     		itttt	ne
 20744 00a0 03F1FF33 		addne	r3, r3, #-1
 20745 00a4 3361     		strne	r3, [r6, #16]
 20746              		.loc 1 512 0
 20747 00a6 0123     		movne	r3, #1
 20748 00a8 7371     		strbne	r3, [r6, #5]
 20749 00aa 2346     		mov	r3, r4
 20750              	.LVL243:
 20751 00ac 04E0     		b	.L134
 20752              	.LVL244:
 20753              	.L136:
 20754 00ae 4FF00003 		mov	r3, #0
 20755 00b2 01E0     		b	.L134
 20756              	.LVL245:
 20757              	.L139:
 20758 00b4 4FF0FF33 		mov	r3, #-1
 20759              	.LVL246:
 20760              	.L134:
 20761              		.loc 1 516 0
 20762 00b8 1846     		mov	r0, r3
 20763 00ba BDE8F885 		pop	{r3, r4, r5, r6, r7, r8, sl, pc}
 20764              		.cfi_endproc
 20765              	.LFE38:
 20767 00be 00BF     		.section	.text.f_lseek,"ax",%progbits
 20768              		.align	2
 20769              		.global	f_lseek
 20770              		.thumb
 20771              		.thumb_func
 20773              	f_lseek:
 20774              	.LFB57:
 20775              		.loc 1 2108 0
 20776              		.cfi_startproc
 20777              		@ args = 0, pretend = 0, frame = 0
 20778              		@ frame_needed = 0, uses_anonymous_args = 0
 20779              	.LVL247:
 20780 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 20781              	.LCFI10:
 20782              		.cfi_def_cfa_offset 24
 20783 0004 0446     		mov	r4, r0
 20784              		.cfi_offset 14, -4
 20785              		.cfi_offset 8, -8
 20786              		.cfi_offset 7, -12
 20787              		.cfi_offset 6, -16
 20788              		.cfi_offset 5, -20
 20789              		.cfi_offset 4, -24
 20790 0006 0E46     		mov	r6, r1
 20791              		.loc 1 2113 0
 20792 0008 0068     		ldr	r0, [r0, #0]
 20793              	.LVL248:
 20794 000a A188     		ldrh	r1, [r4, #4]
 20795              	.LVL249:
 20796 000c FFF7FEFF 		bl	validate
 20797              		.loc 1 2114 0
 20798 0010 0746     		mov	r7, r0
 20799              	.LVL250:
 20800 0012 0028     		cmp	r0, #0
 20801 0014 40F0BE80 		bne	.L144
 20802              		.loc 1 2115 0
 20803 0018 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 20804 001a 13F0800F 		tst	r3, #128
 20805 001e 18BF     		it	ne
 20806 0020 0227     		movne	r7, #2
 20807              	.LVL251:
 20808 0022 40F0B780 		bne	.L144
 20809              		.loc 1 2119 0
 20810 0026 E568     		ldr	r5, [r4, #12]
 20811              	.LVL252:
 20812              		.loc 1 2117 0
 20813 0028 B542     		cmp	r5, r6
 20814 002a 02D2     		bcs	.L146
 20815              	.LVL253:
 20816 002c 13F0020F 		tst	r3, #2
 20817 0030 00D0     		beq	.L147
 20818              	.L146:
 20819 0032 3546     		mov	r5, r6
 20820              	.LVL254:
 20821              	.L147:
 20822              		.loc 1 2123 0
 20823 0034 A268     		ldr	r2, [r4, #8]
 20824              	.LVL255:
 20825              		.loc 1 2124 0
 20826 0036 4FF00003 		mov	r3, #0
 20827 003a A360     		str	r3, [r4, #8]
 20828 003c 4FF0FF33 		mov	r3, #-1
 20829 0040 E371     		strb	r3, [r4, #7]
 20830              		.loc 1 2125 0
 20831 0042 002D     		cmp	r5, #0
 20832 0044 00F09180 		beq	.L148
 20833              		.loc 1 2126 0
 20834 0048 2068     		ldr	r0, [r4, #0]
 20835 004a 8678     		ldrb	r6, [r0, #2]	@ zero_extendqisi2
 20836 004c 4FEA4626 		lsl	r6, r6, #9
 20837              	.LVL256:
 20838              		.loc 1 2127 0
 20839 0050 8AB1     		cbz	r2, .L149
 20840              		.loc 1 2128 0
 20841 0052 1A44     		add	r2, r2, r3
 20842              	.LVL257:
 20843              		.loc 1 2127 0
 20844 0054 05EB0301 		add	r1, r5, r3
 20845 0058 B1FBF6F1 		udiv	r1, r1, r6
 20846 005c B2FBF6F3 		udiv	r3, r2, r6
 20847 0060 9942     		cmp	r1, r3
 20848 0062 08D3     		bcc	.L149
 20849              		.loc 1 2129 0
 20850 0064 C6F10003 		rsb	r3, r6, #0
 20851 0068 03EA0202 		and	r2, r3, r2
 20852 006c A260     		str	r2, [r4, #8]
 20853              		.loc 1 2130 0
 20854 006e C2EB0505 		rsb	r5, r2, r5
 20855              		.loc 1 2131 0
 20856 0072 6169     		ldr	r1, [r4, #20]
 20857              	.LVL258:
 20858              		.loc 1 2127 0
 20859 0074 1EE0     		b	.L150
 20860              	.LVL259:
 20861              	.L149:
 20862              		.loc 1 2133 0
 20863 0076 2169     		ldr	r1, [r4, #16]
 20864              	.LVL260:
 20865              		.loc 1 2135 0
 20866 0078 D9B9     		cbnz	r1, .L151
 20867              		.loc 1 2136 0
 20868 007a FFF7FEFF 		bl	create_chain
 20869              	.LVL261:
 20870 007e 0146     		mov	r1, r0
 20871              	.LVL262:
 20872              		.loc 1 2137 0
 20873 0080 0128     		cmp	r0, #1
 20874 0082 08D1     		bne	.L152
 20875              	.LVL263:
 20876 0084 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 20877 0086 6FEA4363 		mvn	r3, r3, lsl #25
 20878 008a 6FEA5363 		mvn	r3, r3, lsr #25
 20879 008e A371     		strb	r3, [r4, #6]
 20880 0090 4FF00207 		mov	r7, #2
 20881              	.LVL264:
 20882 0094 7EE0     		b	.L144
 20883              	.L152:
 20884              		.loc 1 2138 0
 20885 0096 B0F1FF3F 		cmp	r0, #-1
 20886              		.loc 1 2139 0
 20887 009a 18BF     		it	ne
 20888 009c 2061     		strne	r0, [r4, #16]
 20889              		.loc 1 2138 0
 20890 009e 08D1     		bne	.L151
 20891 00a0 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 20892 00a2 6FEA4363 		mvn	r3, r3, lsl #25
 20893 00a6 6FEA5363 		mvn	r3, r3, lsr #25
 20894 00aa A371     		strb	r3, [r4, #6]
 20895 00ac 4FF00107 		mov	r7, #1
 20896              	.LVL265:
 20897 00b0 70E0     		b	.L144
 20898              	.LVL266:
 20899              	.L151:
 20900              		.loc 1 2142 0
 20901 00b2 6161     		str	r1, [r4, #20]
 20902              	.L150:
 20903              		.loc 1 2144 0
 20904 00b4 0029     		cmp	r1, #0
 20905 00b6 58D0     		beq	.L148
 20906              		.loc 1 2145 0
 20907 00b8 B542     		cmp	r5, r6
 20908 00ba 38D9     		bls	.L154
 20909              		.loc 1 2104 0
 20910 00bc C6F10008 		rsb	r8, r6, #0
 20911 00c0 C6EB0505 		rsb	r5, r6, r5
 20912              	.LVL267:
 20913              	.L161:
 20914              		.loc 1 2147 0
 20915 00c4 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 20916 00c6 13F0020F 		tst	r3, #2
 20917              		.loc 1 2148 0
 20918 00ca 2068     		ldr	r0, [r4, #0]
 20919              		.loc 1 2147 0
 20920 00cc 04D0     		beq	.L155
 20921              		.loc 1 2148 0
 20922 00ce FFF7FEFF 		bl	create_chain
 20923              	.LVL268:
 20924              		.loc 1 2149 0
 20925 00d2 0146     		mov	r1, r0
 20926              	.LVL269:
 20927 00d4 18B9     		cbnz	r0, .L157
 20928 00d6 29E0     		b	.L166
 20929              	.LVL270:
 20930              	.L155:
 20931              		.loc 1 2154 0
 20932 00d8 FFF7FEFF 		bl	get_fat
 20933              	.LVL271:
 20934 00dc 0146     		mov	r1, r0
 20935              	.LVL272:
 20936              	.L157:
 20937              		.loc 1 2155 0
 20938 00de B1F1FF3F 		cmp	r1, #-1
 20939 00e2 08D1     		bne	.L158
 20940 00e4 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 20941 00e6 6FEA4363 		mvn	r3, r3, lsl #25
 20942 00ea 6FEA5363 		mvn	r3, r3, lsr #25
 20943 00ee A371     		strb	r3, [r4, #6]
 20944 00f0 4FF00107 		mov	r7, #1
 20945              	.LVL273:
 20946 00f4 4EE0     		b	.L144
 20947              	.L158:
 20948              		.loc 1 2156 0
 20949 00f6 0129     		cmp	r1, #1
 20950 00f8 03D9     		bls	.L159
 20951 00fa 2368     		ldr	r3, [r4, #0]
 20952 00fc DB69     		ldr	r3, [r3, #28]
 20953 00fe 9942     		cmp	r1, r3
 20954 0100 08D3     		bcc	.L160
 20955              	.L159:
 20956 0102 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 20957 0104 6FEA4363 		mvn	r3, r3, lsl #25
 20958 0108 6FEA5363 		mvn	r3, r3, lsr #25
 20959 010c A371     		strb	r3, [r4, #6]
 20960 010e 4FF00207 		mov	r7, #2
 20961              	.LVL274:
 20962 0112 3FE0     		b	.L144
 20963              	.L160:
 20964              		.loc 1 2157 0
 20965 0114 6161     		str	r1, [r4, #20]
 20966              		.loc 1 2158 0
 20967 0116 A368     		ldr	r3, [r4, #8]
 20968 0118 3344     		add	r3, r3, r6
 20969 011a A360     		str	r3, [r4, #8]
 20970 011c 05EB0803 		add	r3, r5, r8
 20971              	.LVL275:
 20972              		.loc 1 2145 0
 20973 0120 03EB0602 		add	r2, r3, r6
 20974 0124 B242     		cmp	r2, r6
 20975 0126 02D9     		bls	.L154
 20976 0128 1D46     		mov	r5, r3
 20977 012a CBE7     		b	.L161
 20978              	.LVL276:
 20979              	.L166:
 20980 012c 3546     		mov	r5, r6
 20981              	.LVL277:
 20982              	.L154:
 20983              		.loc 1 2161 0
 20984 012e A368     		ldr	r3, [r4, #8]
 20985 0130 2B44     		add	r3, r3, r5
 20986 0132 A360     		str	r3, [r4, #8]
 20987              		.loc 1 2162 0
 20988 0134 C5F34726 		ubfx	r6, r5, #9, #8
 20989              	.LVL278:
 20990 0138 E671     		strb	r6, [r4, #7]
 20991              		.loc 1 2163 0
 20992 013a 4FEAC555 		lsl	r5, r5, #23
 20993              	.LVL279:
 20994 013e 4FEAD555 		lsr	r5, r5, #23
 20995 0142 95B1     		cbz	r5, .L148
 20996              		.loc 1 2164 0
 20997 0144 2068     		ldr	r0, [r4, #0]
 20998 0146 FFF7FEFF 		bl	clust2sect
 20999              	.LVL280:
 21000              		.loc 1 2165 0
 21001 014a 40B9     		cbnz	r0, .L162
 21002 014c A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 21003 014e 6FEA4363 		mvn	r3, r3, lsl #25
 21004 0152 6FEA5363 		mvn	r3, r3, lsr #25
 21005 0156 A371     		strb	r3, [r4, #6]
 21006 0158 4FF00207 		mov	r7, #2
 21007              	.LVL281:
 21008 015c 1AE0     		b	.L144
 21009              	.L162:
 21010              		.loc 1 2166 0
 21011 015e 00EB0603 		add	r3, r0, r6
 21012              	.LVL282:
 21013              		.loc 1 2167 0
 21014 0162 06F10106 		add	r6, r6, #1
 21015 0166 E671     		strb	r6, [r4, #7]
 21016 0168 01E0     		b	.L163
 21017              	.LVL283:
 21018              	.L148:
 21019 016a 4FF00003 		mov	r3, #0
 21020              	.LVL284:
 21021              	.L163:
 21022              		.loc 1 2171 0
 21023 016e A268     		ldr	r2, [r4, #8]
 21024              	.LVL285:
 21025 0170 4FEAC252 		lsl	r2, r2, #23
 21026 0174 4FEAD252 		lsr	r2, r2, #23
 21027 0178 1AB1     		cbz	r2, .L164
 21028 017a A269     		ldr	r2, [r4, #24]
 21029 017c 9A42     		cmp	r2, r3
 21030              		.loc 1 2183 0
 21031 017e 18BF     		it	ne
 21032 0180 A361     		strne	r3, [r4, #24]
 21033              	.L164:
 21034              		.loc 1 2186 0
 21035 0182 A368     		ldr	r3, [r4, #8]
 21036              	.LVL286:
 21037 0184 E268     		ldr	r2, [r4, #12]
 21038 0186 9342     		cmp	r3, r2
 21039              		.loc 1 2187 0
 21040 0188 81BF     		itttt	hi
 21041 018a E360     		strhi	r3, [r4, #12]
 21042              		.loc 1 2188 0
 21043 018c A379     		ldrbhi	r3, [r4, #6]	@ zero_extendqisi2
 21044 018e 43F02003 		orrhi	r3, r3, #32
 21045 0192 A371     		strbhi	r3, [r4, #6]
 21046              	.L144:
 21047              		.loc 1 2193 0
 21048 0194 3846     		mov	r0, r7
 21049 0196 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 21050              		.cfi_endproc
 21051              	.LFE57:
 21053 019a 00BF     		.section	.text.dir_next,"ax",%progbits
 21054              		.align	2
 21055              		.thumb
 21056              		.thumb_func
 21058              	dir_next:
 21059              	.LFB41:
 21060              		.loc 1 597 0
 21061              		.cfi_startproc
 21062              		@ args = 0, pretend = 0, frame = 0
 21063              		@ frame_needed = 0, uses_anonymous_args = 0
 21064              	.LVL287:
 21065 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, sl, lr}
 21066              	.LCFI11:
 21067              		.cfi_def_cfa_offset 32
 21068 0004 0446     		mov	r4, r0
 21069              		.cfi_offset 14, -4
 21070              		.cfi_offset 10, -8
 21071              		.cfi_offset 9, -12
 21072              		.cfi_offset 8, -16
 21073              		.cfi_offset 7, -20
 21074              		.cfi_offset 6, -24
 21075              		.cfi_offset 5, -28
 21076              		.cfi_offset 4, -32
 21077 0006 0D46     		mov	r5, r1
 21078              		.loc 1 602 0
 21079 0008 C688     		ldrh	r6, [r0, #6]
 21080 000a 06F10106 		add	r6, r6, #1
 21081 000e B6B2     		uxth	r6, r6
 21082              	.LVL288:
 21083              		.loc 1 603 0
 21084 0010 002E     		cmp	r6, #0
 21085 0012 7DD0     		beq	.L168
 21086              	.LVL289:
 21087 0014 0369     		ldr	r3, [r0, #16]
 21088 0016 002B     		cmp	r3, #0
 21089 0018 7AD0     		beq	.L168
 21090              		.loc 1 606 0
 21091 001a 16F00F07 		ands	r7, r6, #15
 21092 001e 6CD1     		bne	.L169
 21093              		.loc 1 607 0
 21094 0020 03F10103 		add	r3, r3, #1
 21095 0024 0361     		str	r3, [r0, #16]
 21096              		.loc 1 609 0
 21097 0026 C168     		ldr	r1, [r0, #12]
 21098 0028 21B9     		cbnz	r1, .L170
 21099              		.loc 1 610 0
 21100 002a 0368     		ldr	r3, [r0, #0]
 21101 002c 1B89     		ldrh	r3, [r3, #8]
 21102 002e B342     		cmp	r3, r6
 21103 0030 63D8     		bhi	.L169
 21104 0032 6DE0     		b	.L168
 21105              	.L170:
 21106              		.loc 1 614 0
 21107 0034 0068     		ldr	r0, [r0, #0]
 21108              	.LVL290:
 21109 0036 8378     		ldrb	r3, [r0, #2]	@ zero_extendqisi2
 21110 0038 03F1FF33 		add	r3, r3, #-1
 21111 003c 13EA1613 		ands	r3, r3, r6, lsr #4
 21112 0040 5BD1     		bne	.L169
 21113              		.loc 1 615 0
 21114 0042 FFF7FEFF 		bl	get_fat
 21115 0046 8046     		mov	r8, r0
 21116              	.LVL291:
 21117              		.loc 1 616 0
 21118 0048 0128     		cmp	r0, #1
 21119 004a 65D9     		bls	.L171
 21120              	.LVL292:
 21121              		.loc 1 617 0
 21122 004c B0F1FF3F 		cmp	r0, #-1
 21123 0050 66D0     		beq	.L172
 21124              		.loc 1 618 0
 21125 0052 2068     		ldr	r0, [r4, #0]
 21126              	.LVL293:
 21127 0054 C369     		ldr	r3, [r0, #28]
 21128 0056 9845     		cmp	r8, r3
 21129 0058 48D3     		bcc	.L173
 21130              	.LBB8:
 21131              		.loc 1 621 0
 21132 005a 002D     		cmp	r5, #0
 21133 005c 58D0     		beq	.L168
 21134              		.loc 1 622 0
 21135 005e E168     		ldr	r1, [r4, #12]
 21136 0060 FFF7FEFF 		bl	create_chain
 21137              		.loc 1 623 0
 21138 0064 8046     		mov	r8, r0
 21139 0066 18B9     		cbnz	r0, .L174
 21140 0068 4FF00700 		mov	r0, #7
 21141 006c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 21142              	.L174:
 21143              		.loc 1 624 0
 21144 0070 0128     		cmp	r0, #1
 21145 0072 51D0     		beq	.L171
 21146              	.LVL294:
 21147              		.loc 1 625 0
 21148 0074 B0F1FF3F 		cmp	r0, #-1
 21149 0078 52D0     		beq	.L172
 21150              		.loc 1 627 0
 21151 007a 2068     		ldr	r0, [r4, #0]
 21152              	.LVL295:
 21153 007c 4FF00001 		mov	r1, #0
 21154 0080 FFF7FEFF 		bl	move_window
 21155 0084 0028     		cmp	r0, #0
 21156 0086 4BD1     		bne	.L172
 21157              		.loc 1 628 0
 21158 0088 2068     		ldr	r0, [r4, #0]
 21159 008a 00F13000 		add	r0, r0, #48
 21160 008e 4FF00001 		mov	r1, #0
 21161 0092 4FF40072 		mov	r2, #512
 21162 0096 FFF7FEFF 		bl	mem_set
 21163              		.loc 1 629 0
 21164 009a 2568     		ldr	r5, [r4, #0]
 21165              	.LVL296:
 21166 009c 2846     		mov	r0, r5
 21167 009e 4146     		mov	r1, r8
 21168 00a0 FFF7FEFF 		bl	clust2sect
 21169 00a4 E862     		str	r0, [r5, #44]
 21170              		.loc 1 630 0
 21171 00a6 2368     		ldr	r3, [r4, #0]
 21172 00a8 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 21173 00aa 12B9     		cbnz	r2, .L176
 21174 00ac 4FF00005 		mov	r5, #0
 21175              	.LVL297:
 21176 00b0 18E0     		b	.L177
 21177              	.LVL298:
 21178              	.L176:
 21179 00b2 4FF00005 		mov	r5, #0
 21180              	.LVL299:
 21181              		.loc 1 631 0
 21182 00b6 4FF0010A 		mov	sl, #1
 21183              		.loc 1 632 0
 21184 00ba A946     		mov	r9, r5
 21185              	.L178:
 21186              		.loc 1 631 0
 21187 00bc 83F804A0 		strb	sl, [r3, #4]
 21188              		.loc 1 632 0
 21189 00c0 2068     		ldr	r0, [r4, #0]
 21190 00c2 4946     		mov	r1, r9
 21191 00c4 FFF7FEFF 		bl	move_window
 21192 00c8 0028     		cmp	r0, #0
 21193 00ca 29D1     		bne	.L172
 21194              		.loc 1 633 0
 21195 00cc 2368     		ldr	r3, [r4, #0]
 21196 00ce DA6A     		ldr	r2, [r3, #44]
 21197 00d0 02F10102 		add	r2, r2, #1
 21198 00d4 DA62     		str	r2, [r3, #44]
 21199              		.loc 1 630 0
 21200 00d6 05F10105 		add	r5, r5, #1
 21201              	.LVL300:
 21202 00da EDB2     		uxtb	r5, r5
 21203              	.LVL301:
 21204 00dc 2368     		ldr	r3, [r4, #0]
 21205 00de 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 21206 00e0 AA42     		cmp	r2, r5
 21207 00e2 EBD8     		bhi	.L178
 21208              	.L177:
 21209              		.loc 1 635 0
 21210 00e4 DA6A     		ldr	r2, [r3, #44]
 21211 00e6 C5EB0205 		rsb	r5, r5, r2
 21212              	.LVL302:
 21213 00ea DD62     		str	r5, [r3, #44]
 21214              	.LVL303:
 21215              	.L173:
 21216              	.LBE8:
 21217              		.loc 1 640 0
 21218 00ec C4F80C80 		str	r8, [r4, #12]
 21219              		.loc 1 641 0
 21220 00f0 2068     		ldr	r0, [r4, #0]
 21221 00f2 4146     		mov	r1, r8
 21222 00f4 FFF7FEFF 		bl	clust2sect
 21223 00f8 2061     		str	r0, [r4, #16]
 21224              	.LVL304:
 21225              	.L169:
 21226              		.loc 1 646 0
 21227 00fa E680     		strh	r6, [r4, #6]	@ movhi
 21228              		.loc 1 647 0
 21229 00fc 2368     		ldr	r3, [r4, #0]
 21230 00fe 03F13003 		add	r3, r3, #48
 21231 0102 03EB4717 		add	r7, r3, r7, lsl #5
 21232 0106 6761     		str	r7, [r4, #20]
 21233 0108 4FF00000 		mov	r0, #0
 21234              		.loc 1 649 0
 21235 010c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 21236              	.LVL305:
 21237              	.L168:
 21238 0110 4FF00400 		mov	r0, #4
 21239 0114 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 21240              	.LVL306:
 21241              	.L171:
 21242 0118 4FF00200 		mov	r0, #2
 21243              	.LVL307:
 21244 011c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 21245              	.LVL308:
 21246              	.L172:
 21247 0120 4FF00100 		mov	r0, #1
 21248              		.loc 1 650 0
 21249 0124 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 21250              		.cfi_endproc
 21251              	.LFE41:
 21253              		.section	.text.f_readdir,"ax",%progbits
 21254              		.align	2
 21255              		.global	f_readdir
 21256              		.thumb
 21257              		.thumb_func
 21259              	f_readdir:
 21260              	.LFB59:
 21261              		.loc 1 2248 0
 21262              		.cfi_startproc
 21263              		@ args = 0, pretend = 0, frame = 16
 21264              		@ frame_needed = 0, uses_anonymous_args = 0
 21265              	.LVL309:
 21266 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 21267              	.LCFI12:
 21268              		.cfi_def_cfa_offset 20
 21269 0002 85B0     		sub	sp, sp, #20
 21270              	.LCFI13:
 21271              		.cfi_def_cfa_offset 40
 21272 0004 0446     		mov	r4, r0
 21273              		.cfi_offset 14, -4
 21274              		.cfi_offset 7, -8
 21275              		.cfi_offset 6, -12
 21276              		.cfi_offset 5, -16
 21277              		.cfi_offset 4, -20
 21278 0006 0E46     		mov	r6, r1
 21279              		.loc 1 2253 0
 21280 0008 0068     		ldr	r0, [r0, #0]
 21281              	.LVL310:
 21282 000a A188     		ldrh	r1, [r4, #4]
 21283              	.LVL311:
 21284 000c FFF7FEFF 		bl	validate
 21285              		.loc 1 2254 0
 21286 0010 0746     		mov	r7, r0
 21287              	.LVL312:
 21288 0012 08B1     		cbz	r0, .L182
 21289 0014 0346     		mov	r3, r0
 21290 0016 83E0     		b	.L183
 21291              	.LVL313:
 21292              	.L182:
 21293              		.loc 1 2255 0
 21294 0018 01AB     		add	r3, sp, #4
 21295 001a A361     		str	r3, [r4, #24]
 21296              		.loc 1 2256 0
 21297 001c 26B1     		cbz	r6, .L184
 21298 001e 4FF00403 		mov	r3, #4
 21299              	.LVL314:
 21300              	.LBB13:
 21301              	.LBB14:
 21302              		.loc 1 931 0
 21303 0022 4FF00005 		mov	r5, #0
 21304 0026 23E0     		b	.L185
 21305              	.LVL315:
 21306              	.L184:
 21307              	.LBE14:
 21308              	.LBE13:
 21309              		.loc 1 2257 0
 21310 0028 2046     		mov	r0, r4
 21311 002a 4FF00001 		mov	r1, #0
 21312 002e FFF7FEFF 		bl	dir_seek
 21313 0032 0346     		mov	r3, r0
 21314              	.LVL316:
 21315 0034 74E0     		b	.L183
 21316              	.L190:
 21317              	.LBB16:
 21318              	.LBB15:
 21319              		.loc 1 903 0
 21320 0036 2068     		ldr	r0, [r4, #0]
 21321 0038 FFF7FEFF 		bl	move_window
 21322              	.LVL317:
 21323              		.loc 1 904 0
 21324 003c 0346     		mov	r3, r0
 21325              	.LVL318:
 21326 003e D8B9     		cbnz	r0, .L186
 21327              		.loc 1 905 0
 21328 0040 6169     		ldr	r1, [r4, #20]
 21329              	.LVL319:
 21330              		.loc 1 906 0
 21331 0042 0A78     		ldrb	r2, [r1, #0]	@ zero_extendqisi2
 21332              	.LVL320:
 21333              		.loc 1 907 0
 21334 0044 002A     		cmp	r2, #0
 21335 0046 6ED0     		beq	.L187
 21336              		.loc 1 928 0
 21337 0048 B2F12E00 		subs	r0, r2, #46
 21338 004c 18BF     		it	ne
 21339 004e 0120     		movne	r0, #1
 21340 0050 E52A     		cmp	r2, #229
 21341 0052 0CBF     		ite	eq
 21342 0054 0022     		moveq	r2, #0
 21343 0056 00F00102 		andne	r2, r0, #1
 21344              	.LVL321:
 21345 005a 1AB1     		cbz	r2, .L188
 21346 005c CA7A     		ldrb	r2, [r1, #11]	@ zero_extendqisi2
 21347 005e 12F0080F 		tst	r2, #8
 21348 0062 12D0     		beq	.L189
 21349              	.L188:
 21350              		.loc 1 931 0
 21351 0064 2046     		mov	r0, r4
 21352 0066 2946     		mov	r1, r5
 21353              	.LVL322:
 21354 0068 FFF7FEFF 		bl	dir_next
 21355              	.LVL323:
 21356              		.loc 1 932 0
 21357 006c 0346     		mov	r3, r0
 21358              	.LVL324:
 21359 006e 18B9     		cbnz	r0, .L186
 21360              	.L185:
 21361              		.loc 1 902 0
 21362 0070 2169     		ldr	r1, [r4, #16]
 21363 0072 0029     		cmp	r1, #0
 21364 0074 DFD1     		bne	.L190
 21365              		.loc 1 935 0
 21366 0076 43B1     		cbz	r3, .L189
 21367              	.LVL325:
 21368              	.L186:
 21369 0078 4FF00002 		mov	r2, #0
 21370              	.LVL326:
 21371 007c 2261     		str	r2, [r4, #16]
 21372              	.LBE15:
 21373              	.LBE16:
 21374              		.loc 1 2260 0
 21375 007e 042B     		cmp	r3, #4
 21376              		.loc 1 2261 0
 21377 0080 04BF     		itt	eq
 21378 0082 1346     		moveq	r3, r2
 21379              	.LVL327:
 21380              	.LBB17:
 21381              	.LBB19:
 21382              		.loc 1 1321 0
 21383 0084 06F10900 		addeq	r0, r6, #9
 21384              	.LVL328:
 21385              	.LBE19:
 21386              	.LBE17:
 21387              		.loc 1 2260 0
 21388 0088 3ED0     		beq	.L191
 21389              	.LVL329:
 21390              	.L189:
 21391              		.loc 1 2264 0
 21392 008a 002B     		cmp	r3, #0
 21393 008c 48D1     		bne	.L183
 21394              	.LBB21:
 21395              	.LBB18:
 21396              		.loc 1 1321 0
 21397 008e 06F10900 		add	r0, r6, #9
 21398              		.loc 1 1322 0
 21399 0092 2369     		ldr	r3, [r4, #16]
 21400              	.LVL330:
 21401 0094 002B     		cmp	r3, #0
 21402 0096 37D0     		beq	.L191
 21403              		.loc 1 1323 0
 21404 0098 6169     		ldr	r1, [r4, #20]
 21405              	.LVL331:
 21406              		.loc 1 1326 0
 21407 009a 0B78     		ldrb	r3, [r1, #0]	@ zero_extendqisi2
 21408              	.LVL332:
 21409              		.loc 1 1327 0
 21410 009c 202B     		cmp	r3, #32
 21411 009e 18BF     		it	ne
 21412 00a0 0022     		movne	r2, #0
 21413              	.LVL333:
 21414 00a2 03D1     		bne	.L193
 21415 00a4 0BE0     		b	.L192
 21416              	.L195:
 21417              		.loc 1 1326 0
 21418 00a6 8B5C     		ldrb	r3, [r1, r2]	@ zero_extendqisi2
 21419              	.LVL334:
 21420              		.loc 1 1327 0
 21421 00a8 202B     		cmp	r3, #32
 21422 00aa 08D0     		beq	.L192
 21423              	.L193:
 21424              		.loc 1 1328 0
 21425 00ac 052B     		cmp	r3, #5
 21426 00ae 08BF     		it	eq
 21427 00b0 E523     		moveq	r3, #229
 21428              	.LVL335:
 21429              		.loc 1 1330 0
 21430 00b2 00F8013B 		strb	r3, [r0], #1
 21431              		.loc 1 1325 0
 21432 00b6 02F10102 		add	r2, r2, #1
 21433 00ba 082A     		cmp	r2, #8
 21434 00bc F3D1     		bne	.L195
 21435              	.L192:
 21436              		.loc 1 1332 0
 21437 00be 0B46     		mov	r3, r1
 21438              	.LVL336:
 21439 00c0 13F8082F 		ldrb	r2, [r3, #8]!	@ zero_extendqisi2
 21440              	.LVL337:
 21441 00c4 202A     		cmp	r2, #32
 21442 00c6 06D0     		beq	.L196
 21443              		.loc 1 1333 0
 21444 00c8 4FF02E02 		mov	r2, #46
 21445 00cc 00F8012B 		strb	r2, [r0], #1
 21446              		.loc 1 1335 0
 21447 00d0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 21448              	.LVL338:
 21449              		.loc 1 1336 0
 21450 00d2 202B     		cmp	r3, #32
 21451 00d4 2AD1     		bne	.L200
 21452              	.L196:
 21453              		.loc 1 1341 0
 21454 00d6 CB7A     		ldrb	r3, [r1, #11]	@ zero_extendqisi2
 21455              	.LVL339:
 21456 00d8 3372     		strb	r3, [r6, #8]
 21457              		.loc 1 1342 0
 21458 00da CA7F     		ldrb	r2, [r1, #31]	@ zero_extendqisi2
 21459 00dc 8B7F     		ldrb	r3, [r1, #30]	@ zero_extendqisi2
 21460 00de 4FEA0343 		lsl	r3, r3, #16
 21461 00e2 43EA0262 		orr	r2, r3, r2, lsl #24
 21462 00e6 0B7F     		ldrb	r3, [r1, #28]	@ zero_extendqisi2
 21463 00e8 42EA0303 		orr	r3, r2, r3
 21464 00ec 4A7F     		ldrb	r2, [r1, #29]	@ zero_extendqisi2
 21465 00ee 43EA0223 		orr	r3, r3, r2, lsl #8
 21466 00f2 3360     		str	r3, [r6, #0]
 21467              		.loc 1 1343 0
 21468 00f4 4A7E     		ldrb	r2, [r1, #25]	@ zero_extendqisi2
 21469 00f6 0B7E     		ldrb	r3, [r1, #24]	@ zero_extendqisi2
 21470 00f8 43EA0223 		orr	r3, r3, r2, lsl #8
 21471 00fc B380     		strh	r3, [r6, #4]	@ movhi
 21472              		.loc 1 1344 0
 21473 00fe CA7D     		ldrb	r2, [r1, #23]	@ zero_extendqisi2
 21474 0100 8B7D     		ldrb	r3, [r1, #22]	@ zero_extendqisi2
 21475 0102 43EA0223 		orr	r3, r3, r2, lsl #8
 21476 0106 F380     		strh	r3, [r6, #6]	@ movhi
 21477              	.LVL340:
 21478              	.L191:
 21479              		.loc 1 1346 0
 21480 0108 4FF00001 		mov	r1, #0
 21481              	.LVL341:
 21482 010c 0170     		strb	r1, [r0, #0]
 21483              	.LBE18:
 21484              	.LBE21:
 21485              		.loc 1 2266 0
 21486 010e 2046     		mov	r0, r4
 21487              	.LVL342:
 21488 0110 FFF7FEFF 		bl	dir_next
 21489 0114 0346     		mov	r3, r0
 21490              	.LVL343:
 21491              		.loc 1 2267 0
 21492 0116 0428     		cmp	r0, #4
 21493              		.loc 1 2268 0
 21494 0118 02BF     		ittt	eq
 21495 011a 0023     		moveq	r3, #0
 21496              	.LVL344:
 21497 011c 2361     		streq	r3, [r4, #16]
 21498 011e 3B46     		moveq	r3, r7
 21499              	.LVL345:
 21500              	.L183:
 21501              		.loc 1 2276 0
 21502 0120 1846     		mov	r0, r3
 21503              	.LVL346:
 21504 0122 05B0     		add	sp, sp, #20
 21505 0124 F0BD     		pop	{r4, r5, r6, r7, pc}
 21506              	.LVL347:
 21507              	.L187:
 21508              		.loc 1 2268 0
 21509 0126 4FF00403 		mov	r3, #4
 21510              	.LVL348:
 21511 012a A5E7     		b	.L186
 21512              	.LVL349:
 21513              	.L200:
 21514              	.LBB22:
 21515              	.LBB20:
 21516              		.loc 1 1338 0
 21517 012c 00F8013B 		strb	r3, [r0], #1
 21518              		.loc 1 1335 0
 21519 0130 4B7A     		ldrb	r3, [r1, #9]	@ zero_extendqisi2
 21520              	.LVL350:
 21521              		.loc 1 1336 0
 21522 0132 202B     		cmp	r3, #32
 21523 0134 CFD0     		beq	.L196
 21524              		.loc 1 1338 0
 21525 0136 00F8013B 		strb	r3, [r0], #1
 21526              		.loc 1 1335 0
 21527 013a 8B7A     		ldrb	r3, [r1, #10]	@ zero_extendqisi2
 21528              	.LVL351:
 21529              		.loc 1 1336 0
 21530 013c 202B     		cmp	r3, #32
 21531              		.loc 1 1338 0
 21532 013e 18BF     		it	ne
 21533 0140 00F8013B 		strbne	r3, [r0], #1
 21534 0144 C7E7     		b	.L196
 21535              	.LBE20:
 21536              	.LBE22:
 21537              		.cfi_endproc
 21538              	.LFE59:
 21540 0146 00BF     		.section	.text.follow_path,"ax",%progbits
 21541              		.align	2
 21542              		.thumb
 21543              		.thumb_func
 21545              	follow_path:
 21546              	.LFB47:
 21547              		.loc 1 1385 0
 21548              		.cfi_startproc
 21549              		@ args = 0, pretend = 0, frame = 16
 21550              		@ frame_needed = 0, uses_anonymous_args = 0
 21551              	.LVL352:
 21552 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 21553              	.LCFI14:
 21554              		.cfi_def_cfa_offset 36
 21555 0004 85B0     		sub	sp, sp, #20
 21556              	.LCFI15:
 21557              		.cfi_def_cfa_offset 56
 21558 0006 0446     		mov	r4, r0
 21559              		.cfi_offset 14, -4
 21560              		.cfi_offset 11, -8
 21561              		.cfi_offset 10, -12
 21562              		.cfi_offset 9, -16
 21563              		.cfi_offset 8, -20
 21564              		.cfi_offset 7, -24
 21565              		.cfi_offset 6, -28
 21566              		.cfi_offset 5, -32
 21567              		.cfi_offset 4, -36
 21568 0008 0E46     		mov	r6, r1
 21569              		.loc 1 1390 0
 21570 000a 0B78     		ldrb	r3, [r1, #0]	@ zero_extendqisi2
 21571 000c 202B     		cmp	r3, #32
 21572 000e 03D1     		bne	.L203
 21573              	.LVL353:
 21574              	.L234:
 21575 0010 16F8013F 		ldrb	r3, [r6, #1]!	@ zero_extendqisi2
 21576 0014 202B     		cmp	r3, #32
 21577 0016 FBD0     		beq	.L234
 21578              	.LVL354:
 21579              	.L203:
 21580              		.loc 1 1398 0
 21581 0018 5C2B     		cmp	r3, #92
 21582 001a 14BF     		ite	ne
 21583 001c 0022     		movne	r2, #0
 21584 001e 0122     		moveq	r2, #1
 21585 0020 2F2B     		cmp	r3, #47
 21586 0022 14BF     		ite	ne
 21587 0024 1346     		movne	r3, r2
 21588 0026 42F00103 		orreq	r3, r2, #1
 21589 002a 0BB1     		cbz	r3, .L205
 21590              		.loc 1 1399 0
 21591 002c 06F10106 		add	r6, r6, #1
 21592              	.LVL355:
 21593              	.L205:
 21594              		.loc 1 1400 0
 21595 0030 4FF00003 		mov	r3, #0
 21596 0034 A360     		str	r3, [r4, #8]
 21597              		.loc 1 1403 0
 21598 0036 3378     		ldrb	r3, [r6, #0]	@ zero_extendqisi2
 21599 0038 1F2B     		cmp	r3, #31
 21600 003a 09D8     		bhi	.L206
 21601              		.loc 1 1404 0
 21602 003c 2046     		mov	r0, r4
 21603 003e 4FF00001 		mov	r1, #0
 21604 0042 FFF7FEFF 		bl	dir_seek
 21605 0046 0346     		mov	r3, r0
 21606              	.LVL356:
 21607              		.loc 1 1405 0
 21608 0048 4FF00002 		mov	r2, #0
 21609 004c 6261     		str	r2, [r4, #20]
 21610 004e E5E0     		b	.L207
 21611              	.LVL357:
 21612              	.L206:
 21613              	.LBB31:
 21614              	.LBB32:
 21615              		.loc 1 1234 0
 21616 0050 4FF00007 		mov	r7, #0
 21617              	.LVL358:
 21618              		.loc 1 1260 0
 21619 0054 40F20002 		movw	r2, #:lower16:.LANCHOR3
 21620 0058 C0F20002 		movt	r2, #:upper16:.LANCHOR3
 21621 005c 0392     		str	r2, [sp, #12]
 21622              	.LBB34:
 21623              	.LBB35:
 21624              		.loc 1 201 0
 21625 005e 40F2000B 		movw	fp, #:lower16:.LC2
 21626 0062 C0F2000B 		movt	fp, #:upper16:.LC2
 21627              	.LBE35:
 21628              	.LBE34:
 21629              		.loc 1 1256 0
 21630 0066 4FF00803 		mov	r3, #8
 21631 006a 0193     		str	r3, [sp, #4]
 21632 006c 4FF00B02 		mov	r2, #11
 21633 0070 0292     		str	r2, [sp, #8]
 21634              	.LVL359:
 21635              	.L239:
 21636              		.loc 1 1233 0
 21637 0072 D4F81880 		ldr	r8, [r4, #24]
 21638              	.LVL360:
 21639              		.loc 1 1234 0
 21640 0076 4046     		mov	r0, r8
 21641 0078 4FF02001 		mov	r1, #32
 21642              	.LVL361:
 21643 007c 4FF00B02 		mov	r2, #11
 21644 0080 FFF7FEFF 		bl	mem_set
 21645 0084 4FF0000C 		mov	ip, #0
 21646              	.LVL362:
 21647 0088 3D46     		mov	r5, r7
 21648 008a 4FF0080A 		mov	sl, #8
 21649              	.LVL363:
 21650 008e B946     		mov	r9, r7
 21651              	.LVL364:
 21652              	.L238:
 21653              		.loc 1 1251 0
 21654 0090 715D     		ldrb	r1, [r6, r5]	@ zero_extendqisi2
 21655              	.LVL365:
 21656 0092 05F10105 		add	r5, r5, #1
 21657              		.loc 1 1252 0
 21658 0096 2029     		cmp	r1, #32
 21659 0098 8CBF     		ite	hi
 21660 009a 0023     		movhi	r3, #0
 21661 009c 0123     		movls	r3, #1
 21662 009e 2F29     		cmp	r1, #47
 21663 00a0 14BF     		ite	ne
 21664 00a2 1A46     		movne	r2, r3
 21665 00a4 43F00102 		orreq	r2, r3, #1
 21666 00a8 002A     		cmp	r2, #0
 21667 00aa 46D1     		bne	.L208
 21668 00ac 5C29     		cmp	r1, #92
 21669 00ae 44D0     		beq	.L208
 21670              		.loc 1 1253 0
 21671 00b0 D445     		cmp	ip, sl
 21672 00b2 B4BF     		ite	lt
 21673 00b4 0023     		movlt	r3, #0
 21674 00b6 0123     		movge	r3, #1
 21675 00b8 2E29     		cmp	r1, #46
 21676 00ba 08BF     		it	eq
 21677 00bc 43F00103 		orreq	r3, r3, #1
 21678 00c0 9BB1     		cbz	r3, .L209
 21679              		.loc 1 1254 0
 21680 00c2 2E39     		subs	r1, r1, #46
 21681 00c4 18BF     		it	ne
 21682 00c6 0121     		movne	r1, #1
 21683              	.LVL366:
 21684 00c8 BAF1080F 		cmp	sl, #8
 21685 00cc 18BF     		it	ne
 21686 00ce 41F00101 		orrne	r1, r1, #1
 21687 00d2 0029     		cmp	r1, #0
 21688 00d4 40F09D80 		bne	.L210
 21689              		.loc 1 1256 0
 21690 00d8 4FEA8909 		lsl	r9, r9, #2
 21691              	.LVL367:
 21692 00dc 5FFA89F9 		uxtb	r9, r9
 21693              	.LVL368:
 21694 00e0 DDF804C0 		ldr	ip, [sp, #4]
 21695              	.LVL369:
 21696 00e4 DDF808A0 		ldr	sl, [sp, #8]
 21697              	.LVL370:
 21698 00e8 D2E7     		b	.L238
 21699              	.LVL371:
 21700              	.L209:
 21701              		.loc 1 1258 0
 21702 00ea 11F0800F 		tst	r1, #128
 21703              		.loc 1 1260 0
 21704 00ee 1EBF     		ittt	ne
 21705 00f0 8039     		subne	r1, r1, #128
 21706              	.LVL372:
 21707 00f2 039B     		ldrne	r3, [sp, #12]
 21708 00f4 595C     		ldrbne	r1, [r3, r1]	@ zero_extendqisi2
 21709              	.LVL373:
 21710              		.loc 1 1275 0
 21711 00f6 0846     		mov	r0, r1
 21712              	.LBB33:
 21713              	.LBB36:
 21714              		.loc 1 201 0
 21715 00f8 2029     		cmp	r1, #32
 21716 00fa 00F08A80 		beq	.L210
 21717 00fe 5B46     		mov	r3, fp
 21718              	.L214:
 21719 0100 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 21720 0102 22B1     		cbz	r2, .L213
 21721 0104 03F10103 		add	r3, r3, #1
 21722 0108 9042     		cmp	r0, r2
 21723 010a F9D1     		bne	.L214
 21724 010c 81E0     		b	.L210
 21725              	.L213:
 21726              	.LBE36:
 21727              	.LBE33:
 21728              		.loc 1 1277 0
 21729 010e A1F14103 		sub	r3, r1, #65
 21730 0112 DBB2     		uxtb	r3, r3
 21731 0114 192B     		cmp	r3, #25
 21732              		.loc 1 1278 0
 21733 0116 98BF     		it	ls
 21734 0118 49F00209 		orrls	r9, r9, #2
 21735              	.LVL374:
 21736              		.loc 1 1277 0
 21737 011c 08D9     		bls	.L216
 21738              		.loc 1 1280 0
 21739 011e A1F16103 		sub	r3, r1, #97
 21740 0122 DBB2     		uxtb	r3, r3
 21741 0124 192B     		cmp	r3, #25
 21742              		.loc 1 1281 0
 21743 0126 9EBF     		ittt	ls
 21744 0128 49F00109 		orrls	r9, r9, #1
 21745              	.LVL375:
 21746 012c 2039     		subls	r1, r1, #32
 21747              	.LVL376:
 21748 012e C9B2     		uxtbls	r1, r1
 21749              	.LVL377:
 21750              	.L216:
 21751              		.loc 1 1284 0
 21752 0130 08F80C10 		strb	r1, [r8, ip]
 21753 0134 0CF1010C 		add	ip, ip, #1
 21754              	.LVL378:
 21755 0138 AAE7     		b	.L238
 21756              	.L208:
 21757              		.loc 1 1288 0
 21758 013a 4FEA8303 		lsl	r3, r3, #2
 21759              	.LVL379:
 21760              		.loc 1 1290 0
 21761 013e BCF1000F 		cmp	ip, #0
 21762 0142 66D0     		beq	.L210
 21763              		.loc 1 1291 0
 21764 0144 98F80020 		ldrb	r2, [r8, #0]	@ zero_extendqisi2
 21765 0148 E52A     		cmp	r2, #229
 21766 014a 04BF     		itt	eq
 21767 014c 0522     		moveq	r2, #5
 21768 014e 88F80020 		strbeq	r2, [r8, #0]
 21769              		.loc 1 1293 0
 21770 0152 BAF1080F 		cmp	sl, #8
 21771 0156 04BF     		itt	eq
 21772 0158 4FEA8909 		lsleq	r9, r9, #2
 21773              	.LVL380:
 21774 015c 5FFA89F9 		uxtbeq	r9, r9
 21775              	.LVL381:
 21776              		.loc 1 1294 0
 21777 0160 09F00302 		and	r2, r9, #3
 21778              	.LVL382:
 21779 0164 012A     		cmp	r2, #1
 21780 0166 08BF     		it	eq
 21781 0168 43F01003 		orreq	r3, r3, #16
 21782              	.LVL383:
 21783              		.loc 1 1295 0
 21784 016c 09F00C09 		and	r9, r9, #12
 21785 0170 B9F1040F 		cmp	r9, #4
 21786 0174 08BF     		it	eq
 21787 0176 43F00803 		orreq	r3, r3, #8
 21788              	.LVL384:
 21789              		.loc 1 1297 0
 21790 017a 88F80B30 		strb	r3, [r8, #11]
 21791              	.LBE32:
 21792              	.LBE31:
 21793              	.LBB38:
 21794              	.LBB39:
 21795              		.loc 1 840 0
 21796 017e 2046     		mov	r0, r4
 21797 0180 4FF00001 		mov	r1, #0
 21798 0184 FFF7FEFF 		bl	dir_seek
 21799              	.LVL385:
 21800              		.loc 1 841 0
 21801 0188 0346     		mov	r3, r0
 21802              	.LVL386:
 21803 018a 28BB     		cbnz	r0, .L223
 21804              	.LVL387:
 21805              	.L233:
 21806              		.loc 1 847 0
 21807 018c 2068     		ldr	r0, [r4, #0]
 21808 018e 2169     		ldr	r1, [r4, #16]
 21809 0190 FFF7FEFF 		bl	move_window
 21810              	.LVL388:
 21811              		.loc 1 848 0
 21812 0194 0346     		mov	r3, r0
 21813              	.LVL389:
 21814 0196 F8B9     		cbnz	r0, .L223
 21815              		.loc 1 849 0
 21816 0198 6169     		ldr	r1, [r4, #20]
 21817              	.LVL390:
 21818              		.loc 1 851 0
 21819 019a 0A78     		ldrb	r2, [r1, #0]	@ zero_extendqisi2
 21820 019c 12B9     		cbnz	r2, .L224
 21821 019e 4FF00403 		mov	r3, #4
 21822              	.LVL391:
 21823 01a2 19E0     		b	.L223
 21824              	.L224:
 21825              		.loc 1 874 0
 21826 01a4 91F80BA0 		ldrb	sl, [r1, #11]	@ zero_extendqisi2
 21827              	.LVL392:
 21828 01a8 1AF0080F 		tst	sl, #8
 21829 01ac 0DD1     		bne	.L225
 21830 01ae D4F81880 		ldr	r8, [r4, #24]
 21831              	.LVL393:
 21832 01b2 3A46     		mov	r2, r7
 21833 01b4 03E0     		b	.L226
 21834              	.LVL394:
 21835              	.L228:
 21836 01b6 02F10102 		add	r2, r2, #1
 21837              	.LBB40:
 21838              	.LBB41:
 21839              		.loc 1 194 0
 21840 01ba 0B2A     		cmp	r2, #11
 21841 01bc 32D0     		beq	.L227
 21842              	.L226:
 21843 01be 11F802C0 		ldrb	ip, [r1, r2]	@ zero_extendqisi2
 21844 01c2 18F80200 		ldrb	r0, [r8, r2]	@ zero_extendqisi2
 21845 01c6 8445     		cmp	ip, r0
 21846 01c8 F5D0     		beq	.L228
 21847              	.LVL395:
 21848              	.L225:
 21849              	.LBE41:
 21850              	.LBE40:
 21851              		.loc 1 877 0
 21852 01ca 2046     		mov	r0, r4
 21853 01cc 3946     		mov	r1, r7
 21854              	.LVL396:
 21855 01ce FFF7FEFF 		bl	dir_next
 21856              	.LVL397:
 21857              		.loc 1 878 0
 21858 01d2 0346     		mov	r3, r0
 21859              	.LVL398:
 21860 01d4 0028     		cmp	r0, #0
 21861 01d6 D9D0     		beq	.L233
 21862              	.LVL399:
 21863              	.L223:
 21864              	.LBE39:
 21865              	.LBE38:
 21866              		.loc 1 1412 0
 21867 01d8 A269     		ldr	r2, [r4, #24]
 21868 01da D27A     		ldrb	r2, [r2, #11]	@ zero_extendqisi2
 21869 01dc 82F00402 		eor	r2, r2, #4
 21870 01e0 C2F38002 		ubfx	r2, r2, #2, #1
 21871 01e4 042B     		cmp	r3, #4
 21872 01e6 14BF     		ite	ne
 21873 01e8 0022     		movne	r2, #0
 21874 01ea 02F00102 		andeq	r2, r2, #1
 21875 01ee 9AB9     		cbnz	r2, .L230
 21876 01f0 14E0     		b	.L207
 21877              	.LVL400:
 21878              	.L240:
 21879              		.loc 1 1420 0
 21880 01f2 1AF0100F 		tst	sl, #16
 21881 01f6 0FD0     		beq	.L230
 21882              	.LBB42:
 21883              	.LBB37:
 21884              		.loc 1 1287 0
 21885 01f8 2E44     		add	r6, r6, r5
 21886              	.LVL401:
 21887              	.LBE37:
 21888              	.LBE42:
 21889              		.loc 1 1423 0
 21890 01fa 4A7D     		ldrb	r2, [r1, #21]	@ zero_extendqisi2
 21891 01fc 0B7D     		ldrb	r3, [r1, #20]	@ zero_extendqisi2
 21892              	.LVL402:
 21893 01fe 43EA0222 		orr	r2, r3, r2, lsl #8
 21894 0202 C87E     		ldrb	r0, [r1, #27]	@ zero_extendqisi2
 21895 0204 8B7E     		ldrb	r3, [r1, #26]	@ zero_extendqisi2
 21896 0206 43EA0023 		orr	r3, r3, r0, lsl #8
 21897 020a 43EA0243 		orr	r3, r3, r2, lsl #16
 21898 020e A360     		str	r3, [r4, #8]
 21899              		.loc 1 1424 0
 21900 0210 2FE7     		b	.L239
 21901              	.LVL403:
 21902              	.L210:
 21903 0212 4FF00603 		mov	r3, #6
 21904              	.LVL404:
 21905 0216 01E0     		b	.L207
 21906              	.LVL405:
 21907              	.L230:
 21908 0218 4FF00503 		mov	r3, #5
 21909              	.LVL406:
 21910              	.L207:
 21911              		.loc 1 1428 0
 21912 021c 1846     		mov	r0, r3
 21913 021e 05B0     		add	sp, sp, #20
 21914 0220 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 21915              	.LVL407:
 21916              	.L227:
 21917              		.loc 1 1412 0
 21918 0224 98F80B20 		ldrb	r2, [r8, #11]	@ zero_extendqisi2
 21919 0228 02F00402 		and	r2, r2, #4
 21920 022c D2B2     		uxtb	r2, r2
 21921 022e 002A     		cmp	r2, #0
 21922 0230 DFD0     		beq	.L240
 21923 0232 F3E7     		b	.L207
 21924              		.cfi_endproc
 21925              	.LFE47:
 21927              		.section	.text.f_write,"ax",%progbits
 21928              		.align	2
 21929              		.global	f_write
 21930              		.thumb
 21931              		.thumb_func
 21933              	f_write:
 21934              	.LFB54:
 21935              		.loc 1 1864 0
 21936              		.cfi_startproc
 21937              		@ args = 0, pretend = 0, frame = 0
 21938              		@ frame_needed = 0, uses_anonymous_args = 0
 21939              	.LVL408:
 21940 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 21941              	.LCFI16:
 21942              		.cfi_def_cfa_offset 40
 21943              	.LVL409:
 21944 0004 0446     		mov	r4, r0
 21945              		.cfi_offset 14, -4
 21946              		.cfi_offset 11, -8
 21947              		.cfi_offset 10, -12
 21948              		.cfi_offset 9, -16
 21949              		.cfi_offset 8, -20
 21950              		.cfi_offset 7, -24
 21951              		.cfi_offset 6, -28
 21952              		.cfi_offset 5, -32
 21953              		.cfi_offset 4, -36
 21954              		.cfi_offset 3, -40
 21955 0006 8846     		mov	r8, r1
 21956 0008 1646     		mov	r6, r2
 21957 000a 1F46     		mov	r7, r3
 21958              	.LVL410:
 21959              		.loc 1 1871 0
 21960 000c 4FF00003 		mov	r3, #0
 21961              	.LVL411:
 21962 0010 3B60     		str	r3, [r7, #0]
 21963              		.loc 1 1873 0
 21964 0012 0068     		ldr	r0, [r0, #0]
 21965              	.LVL412:
 21966 0014 A188     		ldrh	r1, [r4, #4]
 21967              	.LVL413:
 21968 0016 FFF7FEFF 		bl	validate
 21969              	.LVL414:
 21970              		.loc 1 1874 0
 21971 001a 8346     		mov	fp, r0
 21972              	.LVL415:
 21973 001c 0028     		cmp	r0, #0
 21974 001e 40F00081 		bne	.L244
 21975              		.loc 1 1875 0
 21976 0022 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 21977 0024 13F0800F 		tst	r3, #128
 21978 0028 18BF     		it	ne
 21979 002a 4FF0020B 		movne	fp, #2
 21980              	.LVL416:
 21981 002e 40F0F880 		bne	.L244
 21982              		.loc 1 1877 0
 21983 0032 13F0020F 		tst	r3, #2
 21984 0036 08BF     		it	eq
 21985 0038 4FF0070B 		moveq	fp, #7
 21986              	.LVL417:
 21987 003c 00F0F180 		beq	.L244
 21988              		.loc 1 1879 0
 21989 0040 E368     		ldr	r3, [r4, #12]
 21990 0042 DE42     		cmn	r6, r3
 21991 0044 80F0E480 		bcs	.L247
 21992              		.loc 1 1881 0
 21993 0048 002E     		cmp	r6, #0
 21994 004a 00F0E180 		beq	.L247
 21995              	.LVL418:
 21996              	.L265:
 21997              		.loc 1 1883 0
 21998 004e A268     		ldr	r2, [r4, #8]
 21999 0050 4FEAC253 		lsl	r3, r2, #23
 22000 0054 4FEAD353 		lsr	r3, r3, #23
 22001 0058 002B     		cmp	r3, #0
 22002 005a 40F0A680 		bne	.L248
 22003              		.loc 1 1884 0
 22004 005e 2068     		ldr	r0, [r4, #0]
 22005 0060 E179     		ldrb	r1, [r4, #7]	@ zero_extendqisi2
 22006 0062 8378     		ldrb	r3, [r0, #2]	@ zero_extendqisi2
 22007 0064 9942     		cmp	r1, r3
 22008 0066 2BD3     		bcc	.L249
 22009              		.loc 1 1885 0
 22010 0068 42B9     		cbnz	r2, .L250
 22011              		.loc 1 1886 0
 22012 006a 2369     		ldr	r3, [r4, #16]
 22013              	.LVL419:
 22014              		.loc 1 1887 0
 22015 006c 6BB9     		cbnz	r3, .L251
 22016              		.loc 1 1888 0
 22017 006e 4FF00001 		mov	r1, #0
 22018 0072 FFF7FEFF 		bl	create_chain
 22019              	.LVL420:
 22020 0076 0346     		mov	r3, r0
 22021              	.LVL421:
 22022 0078 2061     		str	r0, [r4, #16]
 22023 007a 03E0     		b	.L252
 22024              	.LVL422:
 22025              	.L250:
 22026              		.loc 1 1890 0
 22027 007c 6169     		ldr	r1, [r4, #20]
 22028 007e FFF7FEFF 		bl	create_chain
 22029 0082 0346     		mov	r3, r0
 22030              	.LVL423:
 22031              	.L252:
 22032              		.loc 1 1892 0
 22033 0084 002B     		cmp	r3, #0
 22034 0086 00F0C380 		beq	.L247
 22035              	.L251:
 22036              		.loc 1 1893 0
 22037 008a 012B     		cmp	r3, #1
 22038 008c 08D1     		bne	.L253
 22039 008e A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 22040              	.LVL424:
 22041 0090 6FEA4363 		mvn	r3, r3, lsl #25
 22042 0094 6FEA5363 		mvn	r3, r3, lsr #25
 22043 0098 A371     		strb	r3, [r4, #6]
 22044 009a 4FF0020B 		mov	fp, #2
 22045              	.LVL425:
 22046 009e C0E0     		b	.L244
 22047              	.LVL426:
 22048              	.L253:
 22049              		.loc 1 1894 0
 22050 00a0 B3F1FF3F 		cmp	r3, #-1
 22051 00a4 08D1     		bne	.L254
 22052 00a6 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 22053              	.LVL427:
 22054 00a8 6FEA4363 		mvn	r3, r3, lsl #25
 22055 00ac 6FEA5363 		mvn	r3, r3, lsr #25
 22056 00b0 A371     		strb	r3, [r4, #6]
 22057 00b2 4FF0010B 		mov	fp, #1
 22058              	.LVL428:
 22059 00b6 B4E0     		b	.L244
 22060              	.LVL429:
 22061              	.L254:
 22062              		.loc 1 1895 0
 22063 00b8 6361     		str	r3, [r4, #20]
 22064              		.loc 1 1896 0
 22065 00ba 4FF00002 		mov	r2, #0
 22066 00be E271     		strb	r2, [r4, #7]
 22067              	.L249:
 22068              		.loc 1 1899 0
 22069 00c0 2068     		ldr	r0, [r4, #0]
 22070 00c2 C26A     		ldr	r2, [r0, #44]
 22071 00c4 A369     		ldr	r3, [r4, #24]
 22072              	.LVL430:
 22073 00c6 9A42     		cmp	r2, r3
 22074 00c8 0DD1     		bne	.L255
 22075 00ca 4FF00001 		mov	r1, #0
 22076 00ce FFF7FEFF 		bl	move_window
 22077 00d2 40B1     		cbz	r0, .L255
 22078              		.loc 1 1900 0
 22079 00d4 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 22080 00d6 6FEA4363 		mvn	r3, r3, lsl #25
 22081 00da 6FEA5363 		mvn	r3, r3, lsr #25
 22082 00de A371     		strb	r3, [r4, #6]
 22083 00e0 4FF0010B 		mov	fp, #1
 22084              	.LVL431:
 22085 00e4 9DE0     		b	.L244
 22086              	.L255:
 22087              		.loc 1 1908 0
 22088 00e6 2568     		ldr	r5, [r4, #0]
 22089              	.LVL432:
 22090 00e8 2846     		mov	r0, r5
 22091 00ea 6169     		ldr	r1, [r4, #20]
 22092 00ec FFF7FEFF 		bl	clust2sect
 22093              		.loc 1 1909 0
 22094 00f0 8146     		mov	r9, r0
 22095              	.LVL433:
 22096 00f2 40B9     		cbnz	r0, .L256
 22097 00f4 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 22098 00f6 6FEA4363 		mvn	r3, r3, lsl #25
 22099 00fa 6FEA5363 		mvn	r3, r3, lsr #25
 22100 00fe A371     		strb	r3, [r4, #6]
 22101 0100 4FF0020B 		mov	fp, #2
 22102              	.LVL434:
 22103 0104 8DE0     		b	.L244
 22104              	.L256:
 22105              		.loc 1 1910 0
 22106 0106 E379     		ldrb	r3, [r4, #7]	@ zero_extendqisi2
 22107 0108 00EB0309 		add	r9, r0, r3
 22108              	.LVL435:
 22109              		.loc 1 1912 0
 22110 010c 5FEA562A 		lsrs	sl, r6, #9
 22111 0110 2FD0     		beq	.L257
 22112              		.loc 1 1913 0
 22113 0112 A978     		ldrb	r1, [r5, #2]	@ zero_extendqisi2
 22114 0114 0AEB0302 		add	r2, sl, r3
 22115 0118 8A42     		cmp	r2, r1
 22116              		.loc 1 1914 0
 22117 011a 88BF     		it	hi
 22118 011c C3EB010A 		rsbhi	sl, r3, r1
 22119              		.loc 1 1915 0
 22120 0120 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 22121 0122 4146     		mov	r1, r8
 22122 0124 4A46     		mov	r2, r9
 22123 0126 5FFA8AF3 		uxtb	r3, sl
 22124 012a FFF7FEFF 		bl	disk_write
 22125 012e 40B1     		cbz	r0, .L259
 22126              		.loc 1 1916 0
 22127 0130 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 22128 0132 6FEA4363 		mvn	r3, r3, lsl #25
 22129 0136 6FEA5363 		mvn	r3, r3, lsr #25
 22130 013a A371     		strb	r3, [r4, #6]
 22131 013c 4FF0010B 		mov	fp, #1
 22132              	.LVL436:
 22133 0140 6FE0     		b	.L244
 22134              	.L259:
 22135              		.loc 1 1918 0
 22136 0142 2068     		ldr	r0, [r4, #0]
 22137 0144 C36A     		ldr	r3, [r0, #44]
 22138 0146 C9EB0309 		rsb	r9, r9, r3
 22139              	.LVL437:
 22140 014a CA45     		cmp	sl, r9
 22141 014c 0BD9     		bls	.L260
 22142              		.loc 1 1919 0
 22143 014e 00F13000 		add	r0, r0, #48
 22144 0152 08EB4921 		add	r1, r8, r9, lsl #9
 22145 0156 4FF40072 		mov	r2, #512
 22146 015a FFF7FEFF 		bl	mem_cpy
 22147              		.loc 1 1920 0
 22148 015e 2368     		ldr	r3, [r4, #0]
 22149 0160 4FF00002 		mov	r2, #0
 22150 0164 1A71     		strb	r2, [r3, #4]
 22151              	.L260:
 22152              		.loc 1 1928 0
 22153 0166 E379     		ldrb	r3, [r4, #7]	@ zero_extendqisi2
 22154 0168 5344     		add	r3, sl, r3
 22155 016a E371     		strb	r3, [r4, #7]
 22156              		.loc 1 1929 0
 22157 016c 4FEA4A25 		lsl	r5, sl, #9
 22158              	.LVL438:
 22159              		.loc 1 1930 0
 22160 0170 44E0     		b	.L261
 22161              	.LVL439:
 22162              	.L257:
 22163              		.loc 1 1933 0
 22164 0172 A268     		ldr	r2, [r4, #8]
 22165 0174 E368     		ldr	r3, [r4, #12]
 22166 0176 9A42     		cmp	r2, r3
 22167 0178 11D3     		bcc	.L262
 22168              		.loc 1 1934 0
 22169 017a 2846     		mov	r0, r5
 22170 017c 4FF00001 		mov	r1, #0
 22171 0180 FFF7FEFF 		bl	move_window
 22172 0184 40B1     		cbz	r0, .L263
 22173 0186 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 22174 0188 6FEA4363 		mvn	r3, r3, lsl #25
 22175 018c 6FEA5363 		mvn	r3, r3, lsr #25
 22176 0190 A371     		strb	r3, [r4, #6]
 22177 0192 4FF0010B 		mov	fp, #1
 22178              	.LVL440:
 22179 0196 44E0     		b	.L244
 22180              	.L263:
 22181              		.loc 1 1935 0
 22182 0198 2368     		ldr	r3, [r4, #0]
 22183 019a C3F82C90 		str	r9, [r3, #44]
 22184              	.L262:
 22185              		.loc 1 1944 0
 22186 019e C4F81890 		str	r9, [r4, #24]
 22187              		.loc 1 1945 0
 22188 01a2 E379     		ldrb	r3, [r4, #7]	@ zero_extendqisi2
 22189 01a4 03F10103 		add	r3, r3, #1
 22190 01a8 E371     		strb	r3, [r4, #7]
 22191              	.LVL441:
 22192              	.L248:
 22193              		.loc 1 1947 0
 22194 01aa A568     		ldr	r5, [r4, #8]
 22195              	.LVL442:
 22196              		.loc 1 1950 0
 22197 01ac 2068     		ldr	r0, [r4, #0]
 22198 01ae A169     		ldr	r1, [r4, #24]
 22199 01b0 FFF7FEFF 		bl	move_window
 22200 01b4 40B1     		cbz	r0, .L264
 22201              		.loc 1 1951 0
 22202 01b6 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 22203 01b8 6FEA4363 		mvn	r3, r3, lsl #25
 22204 01bc 6FEA5363 		mvn	r3, r3, lsr #25
 22205 01c0 A371     		strb	r3, [r4, #6]
 22206 01c2 4FF0010B 		mov	fp, #1
 22207              	.LVL443:
 22208 01c6 2CE0     		b	.L244
 22209              	.L264:
 22210              		.loc 1 1947 0
 22211 01c8 4FEAC555 		lsl	r5, r5, #23
 22212 01cc 4FEAD555 		lsr	r5, r5, #23
 22213 01d0 C5F50075 		rsb	r5, r5, #512
 22214              	.LVL444:
 22215 01d4 AE42     		cmp	r6, r5
 22216 01d6 38BF     		it	cc
 22217 01d8 3546     		movcc	r5, r6
 22218              	.LVL445:
 22219              		.loc 1 1952 0
 22220 01da 2068     		ldr	r0, [r4, #0]
 22221 01dc 00F13000 		add	r0, r0, #48
 22222 01e0 A368     		ldr	r3, [r4, #8]
 22223 01e2 4FEAC353 		lsl	r3, r3, #23
 22224 01e6 4FEAD353 		lsr	r3, r3, #23
 22225 01ea 1844     		add	r0, r0, r3
 22226 01ec 4146     		mov	r1, r8
 22227 01ee 2A46     		mov	r2, r5
 22228 01f0 FFF7FEFF 		bl	mem_cpy
 22229              		.loc 1 1953 0
 22230 01f4 2368     		ldr	r3, [r4, #0]
 22231 01f6 4FF00102 		mov	r2, #1
 22232 01fa 1A71     		strb	r2, [r3, #4]
 22233              	.L261:
 22234              		.loc 1 1882 0
 22235 01fc A368     		ldr	r3, [r4, #8]
 22236 01fe 2B44     		add	r3, r3, r5
 22237 0200 A360     		str	r3, [r4, #8]
 22238 0202 3B68     		ldr	r3, [r7, #0]
 22239 0204 2B44     		add	r3, r3, r5
 22240 0206 3B60     		str	r3, [r7, #0]
 22241              		.loc 1 1881 0
 22242 0208 761B     		subs	r6, r6, r5
 22243              	.LVL446:
 22244 020a 01D0     		beq	.L247
 22245              		.loc 1 1882 0
 22246 020c A844     		add	r8, r8, r5
 22247              	.LVL447:
 22248 020e 1EE7     		b	.L265
 22249              	.LVL448:
 22250              	.L247:
 22251              		.loc 1 1960 0
 22252 0210 A368     		ldr	r3, [r4, #8]
 22253              	.LVL449:
 22254 0212 E268     		ldr	r2, [r4, #12]
 22255 0214 9342     		cmp	r3, r2
 22256 0216 88BF     		it	hi
 22257 0218 E360     		strhi	r3, [r4, #12]
 22258              		.loc 1 1961 0
 22259 021a A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 22260 021c 43F02003 		orr	r3, r3, #32
 22261 0220 A371     		strb	r3, [r4, #6]
 22262              	.L244:
 22263              		.loc 1 1964 0
 22264 0222 5846     		mov	r0, fp
 22265              	.LVL450:
 22266 0224 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 22267              		.cfi_endproc
 22268              	.LFE54:
 22270              		.section	.text.f_putc,"ax",%progbits
 22271              		.align	2
 22272              		.global	f_putc
 22273              		.thumb
 22274              		.thumb_func
 22276              	f_putc:
 22277              	.LFB62:
2988:../sd_card/fatfs/ff.c **** 
2989:../sd_card/fatfs/ff.c **** #endif /* _USE_MKFS && !_FS_READONLY */
2990:../sd_card/fatfs/ff.c **** 
2991:../sd_card/fatfs/ff.c **** 
2992:../sd_card/fatfs/ff.c **** 
2993:../sd_card/fatfs/ff.c **** 
2994:../sd_card/fatfs/ff.c **** #if _USE_STRFUNC
2995:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2996:../sd_card/fatfs/ff.c **** /* Get a string from the file                                            */
2997:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2998:../sd_card/fatfs/ff.c **** char* f_gets (
2999:../sd_card/fatfs/ff.c **** 	char* buff,	/* Pointer to the string buffer to read */
3000:../sd_card/fatfs/ff.c **** 	int len,	/* Size of string buffer */
3001:../sd_card/fatfs/ff.c **** 	FIL* fil	/* Pointer to the file object */
3002:../sd_card/fatfs/ff.c **** )
3003:../sd_card/fatfs/ff.c **** {
3004:../sd_card/fatfs/ff.c **** 	int i = 0;
3005:../sd_card/fatfs/ff.c **** 	char *p = buff;
3006:../sd_card/fatfs/ff.c **** 	UINT rc;
3007:../sd_card/fatfs/ff.c **** 
3008:../sd_card/fatfs/ff.c **** 
3009:../sd_card/fatfs/ff.c **** 	while (i < len - 1) {			/* Read bytes until buffer gets filled */
3010:../sd_card/fatfs/ff.c **** 		f_read(fil, p, 1, &rc);
3011:../sd_card/fatfs/ff.c **** 		if (rc != 1) break;			/* Break when no data to read */
3012:../sd_card/fatfs/ff.c **** #if _USE_STRFUNC >= 2
3013:../sd_card/fatfs/ff.c **** 		if (*p == '\r') continue;	/* Strip '\r' */
3014:../sd_card/fatfs/ff.c **** #endif
3015:../sd_card/fatfs/ff.c **** 		i++;
3016:../sd_card/fatfs/ff.c **** 		if (*p++ == '\n') break;	/* Break when reached end of line */
3017:../sd_card/fatfs/ff.c **** 	}
3018:../sd_card/fatfs/ff.c **** 	*p = 0;
3019:../sd_card/fatfs/ff.c **** 	return i ? buff : NULL;			/* When no data read (eof or error), return with error. */
3020:../sd_card/fatfs/ff.c **** }
3021:../sd_card/fatfs/ff.c **** 
3022:../sd_card/fatfs/ff.c **** 
3023:../sd_card/fatfs/ff.c **** 
3024:../sd_card/fatfs/ff.c **** #if !_FS_READONLY
3025:../sd_card/fatfs/ff.c **** #include <stdarg.h>
3026:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3027:../sd_card/fatfs/ff.c **** /* Put a character to the file                                           */
3028:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3029:../sd_card/fatfs/ff.c **** int f_putc (
3030:../sd_card/fatfs/ff.c **** 	int chr,	/* A character to be output */
3031:../sd_card/fatfs/ff.c **** 	FIL* fil	/* Pointer to the file object */
3032:../sd_card/fatfs/ff.c **** )
3033:../sd_card/fatfs/ff.c **** {
 22278              		.loc 1 3033 0
 22279              		.cfi_startproc
 22280              		@ args = 0, pretend = 0, frame = 8
 22281              		@ frame_needed = 0, uses_anonymous_args = 0
 22282              	.LVL451:
 22283 0000 30B5     		push	{r4, r5, lr}
 22284              	.LCFI17:
 22285              		.cfi_def_cfa_offset 12
 22286 0002 83B0     		sub	sp, sp, #12
 22287              	.LCFI18:
 22288              		.cfi_def_cfa_offset 24
 22289 0004 0446     		mov	r4, r0
 22290              		.cfi_offset 14, -4
 22291              		.cfi_offset 5, -8
 22292              		.cfi_offset 4, -12
 22293 0006 0D46     		mov	r5, r1
3034:../sd_card/fatfs/ff.c **** 	UINT bw;
3035:../sd_card/fatfs/ff.c **** 	char c;
3036:../sd_card/fatfs/ff.c **** 
3037:../sd_card/fatfs/ff.c **** 
3038:../sd_card/fatfs/ff.c **** #if _USE_STRFUNC >= 2
3039:../sd_card/fatfs/ff.c **** 	if (chr == '\n') f_putc ('\r', fil);	/* LF -> CRLF conversion */
 22294              		.loc 1 3039 0
 22295 0008 0A28     		cmp	r0, #10
 22296 000a 03D1     		bne	.L271
 22297              	.LVL452:
 22298 000c 4FF00D00 		mov	r0, #13
 22299              	.LVL453:
 22300 0010 FFF7FEFF 		bl	f_putc
 22301              	.LVL454:
 22302              	.L271:
3040:../sd_card/fatfs/ff.c **** #endif
3041:../sd_card/fatfs/ff.c **** 	if (!fil) {	/* Special value may be used to switch the destination to any other device */
 22303              		.loc 1 3041 0
 22304 0014 6DB1     		cbz	r5, .L272
3042:../sd_card/fatfs/ff.c **** 	/*	put_console(chr);	*/
3043:../sd_card/fatfs/ff.c **** 		return chr;
3044:../sd_card/fatfs/ff.c **** 	}
3045:../sd_card/fatfs/ff.c **** 	c = (char)chr;
 22305              		.loc 1 3045 0
 22306 0016 02A9     		add	r1, sp, #8
 22307 0018 01F8054D 		strb	r4, [r1, #-5]!
 22308              	.LVL455:
3046:../sd_card/fatfs/ff.c **** 	f_write(fil, &c, 1, &bw);	/* Write a byte to the file */
 22309              		.loc 1 3046 0
 22310 001c 2846     		mov	r0, r5
 22311 001e 4FF00102 		mov	r2, #1
 22312 0022 01AB     		add	r3, sp, #4
 22313 0024 FFF7FEFF 		bl	f_write
3047:../sd_card/fatfs/ff.c **** 	return bw ? chr : EOF;		/* Return the result */
 22314              		.loc 1 3047 0
 22315 0028 019B     		ldr	r3, [sp, #4]
 22316              	.LVL456:
 22317 002a 002B     		cmp	r3, #0
 22318 002c 08BF     		it	eq
 22319 002e 4FF0FF34 		moveq	r4, #-1
 22320              	.LVL457:
 22321              	.L272:
3048:../sd_card/fatfs/ff.c **** }
 22322              		.loc 1 3048 0
 22323 0032 2046     		mov	r0, r4
 22324 0034 03B0     		add	sp, sp, #12
 22325 0036 30BD     		pop	{r4, r5, pc}
 22326              		.cfi_endproc
 22327              	.LFE62:
 22329              		.section	.text.f_puts,"ax",%progbits
 22330              		.align	2
 22331              		.global	f_puts
 22332              		.thumb
 22333              		.thumb_func
 22335              	f_puts:
 22336              	.LFB63:
3049:../sd_card/fatfs/ff.c **** 
3050:../sd_card/fatfs/ff.c **** 
3051:../sd_card/fatfs/ff.c **** 
3052:../sd_card/fatfs/ff.c **** 
3053:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3054:../sd_card/fatfs/ff.c **** /* Put a string to the file                                              */
3055:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3056:../sd_card/fatfs/ff.c **** int f_puts (
3057:../sd_card/fatfs/ff.c **** 	const char* str,	/* Pointer to the string to be output */
3058:../sd_card/fatfs/ff.c **** 	FIL* fil			/* Pointer to the file object */
3059:../sd_card/fatfs/ff.c **** )
3060:../sd_card/fatfs/ff.c **** {
 22337              		.loc 1 3060 0
 22338              		.cfi_startproc
 22339              		@ args = 0, pretend = 0, frame = 0
 22340              		@ frame_needed = 0, uses_anonymous_args = 0
 22341              	.LVL458:
 22342 0000 70B5     		push	{r4, r5, r6, lr}
 22343              	.LCFI19:
 22344              		.cfi_def_cfa_offset 16
 22345 0002 0546     		mov	r5, r0
 22346              		.cfi_offset 14, -4
 22347              		.cfi_offset 6, -8
 22348              		.cfi_offset 5, -12
 22349              		.cfi_offset 4, -16
 22350 0004 0E46     		mov	r6, r1
3061:../sd_card/fatfs/ff.c **** 	int n;
3062:../sd_card/fatfs/ff.c **** 
3063:../sd_card/fatfs/ff.c **** 
3064:../sd_card/fatfs/ff.c **** 	for (n = 0; *str; str++, n++) {
 22351              		.loc 1 3064 0
 22352 0006 0078     		ldrb	r0, [r0, #0]	@ zero_extendqisi2
 22353              	.LVL459:
 22354 0008 10B9     		cbnz	r0, .L275
 22355              	.LVL460:
 22356 000a 4FF00004 		mov	r4, #0
 22357              	.LVL461:
 22358 000e 0FE0     		b	.L276
 22359              	.LVL462:
 22360              	.L275:
 22361 0010 4FF00004 		mov	r4, #0
 22362              	.LVL463:
 22363              	.L278:
3065:../sd_card/fatfs/ff.c **** 		if (f_putc(*str, fil) == EOF) return EOF;
 22364              		.loc 1 3065 0
 22365 0014 3146     		mov	r1, r6
 22366 0016 FFF7FEFF 		bl	f_putc
 22367 001a B0F1FF3F 		cmp	r0, #-1
 22368 001e 02D1     		bne	.L277
 22369 0020 4FF0FF34 		mov	r4, #-1
 22370 0024 04E0     		b	.L276
 22371              	.L277:
 22372              		.loc 1 3064 0
 22373 0026 04F10104 		add	r4, r4, #1
 22374 002a 285D     		ldrb	r0, [r5, r4]	@ zero_extendqisi2
 22375 002c 0028     		cmp	r0, #0
 22376 002e F1D1     		bne	.L278
 22377              	.LVL464:
 22378              	.L276:
3066:../sd_card/fatfs/ff.c **** 	}
3067:../sd_card/fatfs/ff.c **** 	return n;
3068:../sd_card/fatfs/ff.c **** }
 22379              		.loc 1 3068 0
 22380 0030 2046     		mov	r0, r4
 22381 0032 70BD     		pop	{r4, r5, r6, pc}
 22382              		.cfi_endproc
 22383              	.LFE63:
 22385              		.section	.text.f_printf,"ax",%progbits
 22386              		.align	2
 22387              		.global	f_printf
 22388              		.thumb
 22389              		.thumb_func
 22391              	f_printf:
 22392              	.LFB64:
3069:../sd_card/fatfs/ff.c **** 
3070:../sd_card/fatfs/ff.c **** 
3071:../sd_card/fatfs/ff.c **** 
3072:../sd_card/fatfs/ff.c **** 
3073:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3074:../sd_card/fatfs/ff.c **** /* Put a formatted string to the file                                    */
3075:../sd_card/fatfs/ff.c **** /*-----------------------------------------------------------------------*/
3076:../sd_card/fatfs/ff.c **** int f_printf (
3077:../sd_card/fatfs/ff.c **** 	FIL* fil,			/* Pointer to the file object */
3078:../sd_card/fatfs/ff.c **** 	const char* str,	/* Pointer to the format string */
3079:../sd_card/fatfs/ff.c **** 	...					/* Optional arguments... */
3080:../sd_card/fatfs/ff.c **** )
3081:../sd_card/fatfs/ff.c **** {
 22393              		.loc 1 3081 0
 22394              		.cfi_startproc
 22395              		@ args = 4, pretend = 12, frame = 24
 22396              		@ frame_needed = 0, uses_anonymous_args = 1
 22397              	.LVL465:
 22398 0000 0EB4     		push	{r1, r2, r3}
 22399              	.LCFI20:
 22400              		.cfi_def_cfa_offset 12
 22401 0002 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 22402              	.LCFI21:
 22403              		.cfi_def_cfa_offset 48
 22404 0006 86B0     		sub	sp, sp, #24
 22405              	.LCFI22:
 22406              		.cfi_def_cfa_offset 72
 22407 0008 8046     		mov	r8, r0
 22408              		.cfi_offset 14, -16
 22409              		.cfi_offset 11, -20
 22410              		.cfi_offset 10, -24
 22411              		.cfi_offset 9, -28
 22412              		.cfi_offset 8, -32
 22413              		.cfi_offset 7, -36
 22414              		.cfi_offset 6, -40
 22415              		.cfi_offset 5, -44
 22416              		.cfi_offset 4, -48
 22417              		.cfi_offset 3, -4
 22418              		.cfi_offset 2, -8
 22419              		.cfi_offset 1, -12
 22420 000a 0FAB     		add	r3, sp, #60
 22421 000c 53F8044B 		ldr	r4, [r3], #4
3082:../sd_card/fatfs/ff.c **** 	va_list arp;
3083:../sd_card/fatfs/ff.c **** 	UCHAR c, f, r;
3084:../sd_card/fatfs/ff.c **** 	ULONG val;
3085:../sd_card/fatfs/ff.c **** 	char s[16];
3086:../sd_card/fatfs/ff.c **** 	int i, w, res, cc;
3087:../sd_card/fatfs/ff.c **** 
3088:../sd_card/fatfs/ff.c **** 
3089:../sd_card/fatfs/ff.c **** 	va_start(arp, str);
 22422              		.loc 1 3089 0
 22423 0010 0593     		str	r3, [sp, #20]
3090:../sd_card/fatfs/ff.c **** 
3091:../sd_card/fatfs/ff.c **** 	for (cc = res = 0; cc != EOF; res += cc) {
3092:../sd_card/fatfs/ff.c **** 		c = *str++;
 22424              		.loc 1 3092 0
 22425 0012 2378     		ldrb	r3, [r4, #0]	@ zero_extendqisi2
 22426              	.LVL466:
3093:../sd_card/fatfs/ff.c **** 		if (c == 0) break;			/* End of string */
 22427              		.loc 1 3093 0
 22428 0014 002B     		cmp	r3, #0
 22429 0016 00F0E980 		beq	.L282
 22430              	.LVL467:
 22431              		.loc 1 3092 0
 22432 001a 04F10104 		add	r4, r4, #1
 22433              	.LVL468:
 22434 001e 4FF00000 		mov	r0, #0
 22435              	.LVL469:
 22436 0022 0646     		mov	r6, r0
 22437              	.LVL470:
 22438              		.loc 1 3091 0
 22439 0024 4FF0010A 		mov	sl, #1
 22440              	.LVL471:
3094:../sd_card/fatfs/ff.c **** 		if (c != '%') {				/* Non escape character */
3095:../sd_card/fatfs/ff.c **** 			cc = f_putc(c, fil);
3096:../sd_card/fatfs/ff.c **** 			if (cc != EOF) cc = 1;
3097:../sd_card/fatfs/ff.c **** 			continue;
3098:../sd_card/fatfs/ff.c **** 		}
3099:../sd_card/fatfs/ff.c **** 		w = f = 0;
3100:../sd_card/fatfs/ff.c **** 		c = *str++;
3101:../sd_card/fatfs/ff.c **** 		if (c == '0') {				/* Flag: '0' padding */
3102:../sd_card/fatfs/ff.c **** 			f = 1; c = *str++;
3103:../sd_card/fatfs/ff.c **** 		}
3104:../sd_card/fatfs/ff.c **** 		while (c >= '0' && c <= '9') {	/* Precision */
3105:../sd_card/fatfs/ff.c **** 			w = w * 10 + (c - '0');
3106:../sd_card/fatfs/ff.c **** 			c = *str++;
3107:../sd_card/fatfs/ff.c **** 		}
3108:../sd_card/fatfs/ff.c **** 		if (c == 'l') {				/* Prefix: Size is long int */
3109:../sd_card/fatfs/ff.c **** 			f |= 2; c = *str++;
3110:../sd_card/fatfs/ff.c **** 		}
3111:../sd_card/fatfs/ff.c **** 		if (c == 's') {				/* Type is string */
3112:../sd_card/fatfs/ff.c **** 			cc = f_puts(va_arg(arp, char*), fil);
3113:../sd_card/fatfs/ff.c **** 			continue;
3114:../sd_card/fatfs/ff.c **** 		}
3115:../sd_card/fatfs/ff.c **** 		if (c == 'c') {				/* Type is character */
3116:../sd_card/fatfs/ff.c **** 			cc = f_putc(va_arg(arp, int), fil);
3117:../sd_card/fatfs/ff.c **** 			if (cc != EOF) cc = 1;
3118:../sd_card/fatfs/ff.c **** 			continue;
3119:../sd_card/fatfs/ff.c **** 		}
3120:../sd_card/fatfs/ff.c **** 		r = 0;
3121:../sd_card/fatfs/ff.c **** 		if (c == 'd') r = 10;		/* Type is signed decimal */
3122:../sd_card/fatfs/ff.c **** 		if (c == 'u') r = 10;		/* Type is unsigned decimal */
3123:../sd_card/fatfs/ff.c **** 		if (c == 'X') r = 16;		/* Type is unsigned hexdecimal */
3124:../sd_card/fatfs/ff.c **** 		if (r == 0) break;			/* Unknown type */
3125:../sd_card/fatfs/ff.c **** 		if (f & 2) {				/* Get the value */
3126:../sd_card/fatfs/ff.c **** 			val = (ULONG)va_arg(arp, long);
3127:../sd_card/fatfs/ff.c **** 		} else {
3128:../sd_card/fatfs/ff.c **** 			val = (c == 'd') ? (ULONG)(long)va_arg(arp, int) : (ULONG)va_arg(arp, unsigned int);
3129:../sd_card/fatfs/ff.c **** 		}
3130:../sd_card/fatfs/ff.c **** 		/* Put numeral string */
3131:../sd_card/fatfs/ff.c **** 		if (c == 'd') {
3132:../sd_card/fatfs/ff.c **** 			if (val & 0x80000000) {
3133:../sd_card/fatfs/ff.c **** 				val = 0 - val;
3134:../sd_card/fatfs/ff.c **** 				f |= 4;
3135:../sd_card/fatfs/ff.c **** 			}
3136:../sd_card/fatfs/ff.c **** 		}
3137:../sd_card/fatfs/ff.c **** 		i = sizeof(s) - 1; s[i] = 0;
 22441              		.loc 1 3137 0
 22442 0028 0746     		mov	r7, r0
3138:../sd_card/fatfs/ff.c **** 		do {
3139:../sd_card/fatfs/ff.c **** 			c = (UCHAR)(val % r + '0');
3140:../sd_card/fatfs/ff.c **** 			if (c > '9') c += 7;
3141:../sd_card/fatfs/ff.c **** 			s[--i] = c;
 22443              		.loc 1 3141 0
 22444 002a 01AD     		add	r5, sp, #4
 22445 002c 06E0     		b	.L283
 22446              	.LVL472:
 22447              	.L314:
 22448              		.loc 1 3091 0
 22449 002e 0644     		add	r6, r6, r0
 22450              	.LVL473:
 22451              	.L315:
 22452              		.loc 1 3092 0
 22453 0030 2378     		ldrb	r3, [r4, #0]	@ zero_extendqisi2
 22454              	.LVL474:
 22455              		.loc 1 3093 0
 22456 0032 002B     		cmp	r3, #0
 22457 0034 00F0D080 		beq	.L284
 22458              		.loc 1 3092 0
 22459 0038 04F10104 		add	r4, r4, #1
 22460              	.LVL475:
 22461              	.L283:
 22462              		.loc 1 3094 0
 22463 003c 252B     		cmp	r3, #37
 22464 003e 08D0     		beq	.L285
 22465              		.loc 1 3095 0
 22466 0040 1846     		mov	r0, r3
 22467 0042 4146     		mov	r1, r8
 22468 0044 FFF7FEFF 		bl	f_putc
 22469              	.LVL476:
 22470              		.loc 1 3096 0
 22471 0048 B0F1FF3F 		cmp	r0, #-1
 22472 004c 40F0CA80 		bne	.L286
 22473              	.LVL477:
 22474 0050 C3E0     		b	.L287
 22475              	.LVL478:
 22476              	.L285:
 22477              		.loc 1 3100 0
 22478 0052 14F8013B 		ldrb	r3, [r4], #1	@ zero_extendqisi2
 22479              	.LVL479:
 22480              		.loc 1 3101 0
 22481 0056 302B     		cmp	r3, #48
 22482 0058 12BF     		itee	ne
 22483 005a BC46     		movne	ip, r7
 22484              	.LVL480:
 22485              		.loc 1 3102 0
 22486 005c 14F8013B 		ldrbeq	r3, [r4], #1	@ zero_extendqisi2
 22487              	.LVL481:
 22488 0060 D446     		moveq	ip, sl
 22489              	.LVL482:
 22490              		.loc 1 3104 0
 22491 0062 A3F13002 		sub	r2, r3, #48
 22492 0066 D2B2     		uxtb	r2, r2
 22493 0068 092A     		cmp	r2, #9
 22494 006a 3A46     		mov	r2, r7
 22495              	.LVL483:
 22496 006c 0CD8     		bhi	.L291
 22497              	.LVL484:
 22498              	.L292:
 22499              		.loc 1 3105 0
 22500 006e 02EB8202 		add	r2, r2, r2, lsl #2
 22501              	.LVL485:
 22502 0072 03EB4202 		add	r2, r3, r2, lsl #1
 22503 0076 A2F13002 		sub	r2, r2, #48
 22504              	.LVL486:
 22505              		.loc 1 3106 0
 22506 007a 14F8013B 		ldrb	r3, [r4], #1	@ zero_extendqisi2
 22507              		.loc 1 3104 0
 22508 007e A3F13001 		sub	r1, r3, #48
 22509 0082 C9B2     		uxtb	r1, r1
 22510 0084 0929     		cmp	r1, #9
 22511 0086 F2D9     		bls	.L292
 22512              	.L291:
 22513              		.loc 1 3108 0
 22514 0088 6C2B     		cmp	r3, #108
 22515              		.loc 1 3109 0
 22516 008a 04BF     		itt	eq
 22517 008c 4CF0020C 		orreq	ip, ip, #2
 22518              	.LVL487:
 22519 0090 14F8013B 		ldrbeq	r3, [r4], #1	@ zero_extendqisi2
 22520              	.LVL488:
 22521              		.loc 1 3111 0
 22522 0094 732B     		cmp	r3, #115
 22523 0096 08D1     		bne	.L294
 22524              		.loc 1 3112 0
 22525 0098 059B     		ldr	r3, [sp, #20]
 22526              	.LVL489:
 22527 009a 03F10402 		add	r2, r3, #4
 22528              	.LVL490:
 22529 009e 0592     		str	r2, [sp, #20]
 22530 00a0 1868     		ldr	r0, [r3, #0]
 22531              	.LVL491:
 22532 00a2 4146     		mov	r1, r8
 22533 00a4 FFF7FEFF 		bl	f_puts
 22534              	.LVL492:
 22535              		.loc 1 3113 0
 22536 00a8 8EE0     		b	.L295
 22537              	.LVL493:
 22538              	.L294:
 22539              		.loc 1 3115 0
 22540 00aa 632B     		cmp	r3, #99
 22541 00ac 0CD1     		bne	.L296
 22542              		.loc 1 3116 0
 22543 00ae 059B     		ldr	r3, [sp, #20]
 22544              	.LVL494:
 22545 00b0 03F10402 		add	r2, r3, #4
 22546              	.LVL495:
 22547 00b4 0592     		str	r2, [sp, #20]
 22548 00b6 1868     		ldr	r0, [r3, #0]
 22549              	.LVL496:
 22550 00b8 4146     		mov	r1, r8
 22551 00ba FFF7FEFF 		bl	f_putc
 22552              	.LVL497:
 22553              		.loc 1 3117 0
 22554 00be B0F1FF3F 		cmp	r0, #-1
 22555 00c2 40F08F80 		bne	.L286
 22556              	.LVL498:
 22557 00c6 88E0     		b	.L287
 22558              	.LVL499:
 22559              	.L296:
 22560              		.loc 1 3121 0
 22561 00c8 642B     		cmp	r3, #100
 22562 00ca 08BF     		it	eq
 22563 00cc 0A21     		moveq	r1, #10
 22564              	.LVL500:
 22565 00ce 08D0     		beq	.L298
 22566              		.loc 1 3122 0
 22567 00d0 752B     		cmp	r3, #117
 22568 00d2 08BF     		it	eq
 22569 00d4 0A21     		moveq	r1, #10
 22570              	.LVL501:
 22571 00d6 06D0     		beq	.L300
 22572              		.loc 1 3123 0
 22573 00d8 582B     		cmp	r3, #88
 22574 00da 08BF     		it	eq
 22575 00dc 1021     		moveq	r1, #16
 22576              	.LVL502:
 22577 00de 02D0     		beq	.L300
 22578 00e0 3946     		mov	r1, r7
 22579              	.LVL503:
 22580              	.L298:
 22581              		.loc 1 3124 0
 22582 00e2 0029     		cmp	r1, #0
 22583 00e4 75D0     		beq	.L302
 22584              	.L300:
 22585              		.loc 1 3125 0
 22586 00e6 1CF0020F 		tst	ip, #2
 22587 00ea 09D0     		beq	.L303
 22588              		.loc 1 3126 0
 22589 00ec 0598     		ldr	r0, [sp, #20]
 22590              	.LVL504:
 22591 00ee 00F1040E 		add	lr, r0, #4
 22592 00f2 CDF814E0 		str	lr, [sp, #20]
 22593 00f6 D0F800E0 		ldr	lr, [r0, #0]
 22594              	.LVL505:
 22595              		.loc 1 3131 0
 22596 00fa 642B     		cmp	r3, #100
 22597 00fc 0FD1     		bne	.L305
 22598 00fe 07E0     		b	.L304
 22599              	.LVL506:
 22600              	.L303:
 22601              		.loc 1 3128 0
 22602 0100 642B     		cmp	r3, #100
 22603 0102 059B     		ldr	r3, [sp, #20]
 22604              	.LVL507:
 22605 0104 03F10400 		add	r0, r3, #4
 22606              	.LVL508:
 22607 0108 0590     		str	r0, [sp, #20]
 22608 010a D3F800E0 		ldr	lr, [r3, #0]
 22609              	.LVL509:
 22610 010e 06D1     		bne	.L305
 22611              	.LVL510:
 22612              	.L304:
 22613              		.loc 1 3132 0
 22614 0110 BEF1000F 		cmp	lr, #0
 22615              		.loc 1 3133 0
 22616 0114 BCBF     		itt	lt
 22617 0116 CEF1000E 		rsblt	lr, lr, #0
 22618              		.loc 1 3134 0
 22619 011a 4CF0040C 		orrlt	ip, ip, #4
 22620              	.LVL511:
 22621              	.L305:
 22622              		.loc 1 3137 0
 22623 011e 8DF81370 		strb	r7, [sp, #19]
 22624 0122 4FF00F00 		mov	r0, #15
 22625              	.LVL512:
 22626              		.loc 1 3139 0
 22627 0126 8946     		mov	r9, r1
 22628              	.L308:
 22629 0128 BEFBF1F3 		udiv	r3, lr, r1
 22630              	.LVL513:
 22631 012c 01FB13E3 		mls	r3, r1, r3, lr
 22632 0130 03F13003 		add	r3, r3, #48
 22633 0134 DBB2     		uxtb	r3, r3
 22634              	.LVL514:
 22635              		.loc 1 3140 0
 22636 0136 392B     		cmp	r3, #57
 22637 0138 84BF     		itt	hi
 22638 013a 0733     		addhi	r3, r3, #7
 22639              	.LVL515:
 22640 013c DBB2     		uxtbhi	r3, r3
 22641              	.LVL516:
 22642              		.loc 1 3141 0
 22643 013e 00F1FF30 		add	r0, r0, #-1
 22644              	.LVL517:
 22645 0142 2B54     		strb	r3, [r5, r0]
3142:../sd_card/fatfs/ff.c **** 			val /= r;
 22646              		.loc 1 3142 0
 22647 0144 BEFBF9FE 		udiv	lr, lr, r9
 22648              	.LVL518:
3143:../sd_card/fatfs/ff.c **** 		} while (i && val);
 22649              		.loc 1 3143 0
 22650 0148 031E     		subs	r3, r0, #0
 22651 014a 18BF     		it	ne
 22652 014c 0123     		movne	r3, #1
 22653              	.LVL519:
 22654 014e BEF1000F 		cmp	lr, #0
 22655 0152 0CBF     		ite	eq
 22656 0154 4FF0000B 		moveq	fp, #0
 22657 0158 03F0010B 		andne	fp, r3, #1
 22658 015c BBF1000F 		cmp	fp, #0
 22659 0160 E2D1     		bne	.L308
 22660 0162 0146     		mov	r1, r0
 22661              	.LVL520:
3144:../sd_card/fatfs/ff.c **** 		if (i && (f & 4)) s[--i] = '-';
 22662              		.loc 1 3144 0
 22663 0164 63B3     		cbz	r3, .L309
 22664              	.LVL521:
 22665 0166 1CF0040F 		tst	ip, #4
 22666              	.LVL522:
 22667 016a 1FBF     		itttt	ne
 22668 016c 00F1FF30 		addne	r0, r0, #-1
 22669              	.LVL523:
 22670 0170 06A9     		addne	r1, sp, #24
 22671 0172 0B18     		addne	r3, r1, r0
 22672 0174 2D21     		movne	r1, #45
 22673 0176 18BF     		it	ne
 22674 0178 03F8141C 		strbne	r1, [r3, #-20]
3145:../sd_card/fatfs/ff.c **** 		w = sizeof(s) - 1 - w;
 22675              		.loc 1 3145 0
 22676 017c C2F10F02 		rsb	r2, r2, #15
 22677              	.LVL524:
3146:../sd_card/fatfs/ff.c **** 		while (i && i > w) s[--i] = (f & 1) ? '0' : ' ';
 22678              		.loc 1 3146 0
 22679 0180 9042     		cmp	r0, r2
 22680 0182 D4BF     		ite	le
 22681 0184 0023     		movle	r3, #0
 22682 0186 0123     		movgt	r3, #1
 22683 0188 0028     		cmp	r0, #0
 22684 018a 0CBF     		ite	eq
 22685 018c 0023     		moveq	r3, #0
 22686 018e 03F00103 		andne	r3, r3, #1
 22687 0192 ABB1     		cbz	r3, .L309
 22688 0194 05EB0003 		add	r3, r5, r0
 22689 0198 0CF0010C 		and	ip, ip, #1
 22690              	.L313:
 22691 019c BCF1000F 		cmp	ip, #0
 22692 01a0 14BF     		ite	ne
 22693 01a2 3021     		movne	r1, #48
 22694 01a4 2021     		moveq	r1, #32
 22695 01a6 03F8011D 		strb	r1, [r3, #-1]!
 22696 01aa 0138     		subs	r0, r0, #1
 22697              	.LVL525:
 22698 01ac 0CBF     		ite	eq
 22699 01ae 0021     		moveq	r1, #0
 22700 01b0 0121     		movne	r1, #1
 22701 01b2 8242     		cmp	r2, r0
 22702 01b4 ACBF     		ite	ge
 22703 01b6 0021     		movge	r1, #0
 22704 01b8 01F00101 		andlt	r1, r1, #1
 22705 01bc 0029     		cmp	r1, #0
 22706 01be EDD1     		bne	.L313
 22707              	.LVL526:
 22708              	.L309:
3147:../sd_card/fatfs/ff.c **** 		cc = f_puts(&s[i], fil);
 22709              		.loc 1 3147 0
 22710 01c0 2844     		add	r0, r5, r0
 22711              	.LVL527:
 22712 01c2 4146     		mov	r1, r8
 22713              	.LVL528:
 22714 01c4 FFF7FEFF 		bl	f_puts
 22715              	.LVL529:
 22716              	.L295:
 22717              		.loc 1 3091 0
 22718 01c8 B0F1FF3F 		cmp	r0, #-1
 22719 01cc 7FF42FAF 		bne	.L314
 22720              	.LVL530:
 22721 01d0 03E0     		b	.L287
 22722              	.LVL531:
 22723              	.L302:
3148:../sd_card/fatfs/ff.c **** 	}
3149:../sd_card/fatfs/ff.c **** 
3150:../sd_card/fatfs/ff.c **** 	va_end(arp);
3151:../sd_card/fatfs/ff.c **** 	return (cc == EOF) ? cc : res;
 22724              		.loc 1 3151 0
 22725 01d2 B0F1FF3F 		cmp	r0, #-1
 22726 01d6 00D0     		beq	.L287
 22727              	.LVL532:
 22728              	.L284:
 22729 01d8 3046     		mov	r0, r6
 22730              	.LVL533:
 22731              	.L287:
 22732              	.LVL534:
3152:../sd_card/fatfs/ff.c **** }
 22733              		.loc 1 3152 0
 22734 01da 06B0     		add	sp, sp, #24
 22735 01dc BDE8F04F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 22736 01e0 03B0     		add	sp, sp, #12
 22737 01e2 7047     		bx	lr
 22738              	.LVL535:
 22739              	.L286:
 22740              		.loc 1 3091 0
 22741 01e4 06F10106 		add	r6, r6, #1
 22742              	.LVL536:
 22743 01e8 5046     		mov	r0, sl
 22744 01ea 21E7     		b	.L315
 22745              	.LVL537:
 22746              	.L282:
 22747 01ec 4FF00006 		mov	r6, #0
 22748              	.LVL538:
 22749 01f0 F2E7     		b	.L284
 22750              		.cfi_endproc
 22751              	.LFE64:
 22753 01f2 00BF     		.section	.text.f_read,"ax",%progbits
 22754              		.align	2
 22755              		.global	f_read
 22756              		.thumb
 22757              		.thumb_func
 22759              	f_read:
 22760              	.LFB53:
 22761              		.loc 1 1769 0
 22762              		.cfi_startproc
 22763              		@ args = 0, pretend = 0, frame = 0
 22764              		@ frame_needed = 0, uses_anonymous_args = 0
 22765              	.LVL539:
 22766 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 22767              	.LCFI23:
 22768              		.cfi_def_cfa_offset 40
 22769              	.LVL540:
 22770 0004 0446     		mov	r4, r0
 22771              		.cfi_offset 14, -4
 22772              		.cfi_offset 11, -8
 22773              		.cfi_offset 10, -12
 22774              		.cfi_offset 9, -16
 22775              		.cfi_offset 8, -20
 22776              		.cfi_offset 7, -24
 22777              		.cfi_offset 6, -28
 22778              		.cfi_offset 5, -32
 22779              		.cfi_offset 4, -36
 22780              		.cfi_offset 3, -40
 22781 0006 8846     		mov	r8, r1
 22782 0008 1546     		mov	r5, r2
 22783 000a 1E46     		mov	r6, r3
 22784              	.LVL541:
 22785              		.loc 1 1776 0
 22786 000c 4FF00003 		mov	r3, #0
 22787              	.LVL542:
 22788 0010 3360     		str	r3, [r6, #0]
 22789              		.loc 1 1778 0
 22790 0012 0068     		ldr	r0, [r0, #0]
 22791              	.LVL543:
 22792 0014 A188     		ldrh	r1, [r4, #4]
 22793              	.LVL544:
 22794 0016 FFF7FEFF 		bl	validate
 22795              	.LVL545:
 22796              		.loc 1 1779 0
 22797 001a 8346     		mov	fp, r0
 22798              	.LVL546:
 22799 001c 0028     		cmp	r0, #0
 22800 001e 40F0BF80 		bne	.L322
 22801              		.loc 1 1780 0
 22802 0022 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 22803 0024 13F0800F 		tst	r3, #128
 22804              		.loc 1 1788 0
 22805 0028 18BF     		it	ne
 22806 002a 4FF0020B 		movne	fp, #2
 22807              	.LVL547:
 22808              		.loc 1 1780 0
 22809 002e 40F0B780 		bne	.L322
 22810              		.loc 1 1782 0
 22811 0032 13F0010F 		tst	r3, #1
 22812 0036 08BF     		it	eq
 22813 0038 4FF0070B 		moveq	fp, #7
 22814              	.LVL548:
 22815 003c 00F0B080 		beq	.L322
 22816 0040 E768     		ldr	r7, [r4, #12]
 22817 0042 A368     		ldr	r3, [r4, #8]
 22818 0044 C3EB0707 		rsb	r7, r3, r7
 22819 0048 BD42     		cmp	r5, r7
 22820 004a 38BF     		it	cc
 22821 004c 2F46     		movcc	r7, r5
 22822              	.LVL549:
 22823              		.loc 1 1787 0
 22824 004e 002F     		cmp	r7, #0
 22825 0050 00F0A680 		beq	.L322
 22826              	.LVL550:
 22827              	.L338:
 22828              		.loc 1 1789 0
 22829 0054 A268     		ldr	r2, [r4, #8]
 22830 0056 4FEAC253 		lsl	r3, r2, #23
 22831 005a 4FEAD353 		lsr	r3, r3, #23
 22832 005e 002B     		cmp	r3, #0
 22833 0060 6FD1     		bne	.L325
 22834              		.loc 1 1790 0
 22835 0062 2068     		ldr	r0, [r4, #0]
 22836 0064 E179     		ldrb	r1, [r4, #7]	@ zero_extendqisi2
 22837 0066 8378     		ldrb	r3, [r0, #2]	@ zero_extendqisi2
 22838 0068 9942     		cmp	r1, r3
 22839 006a 20D3     		bcc	.L326
 22840              		.loc 1 1791 0
 22841 006c 0AB9     		cbnz	r2, .L327
 22842 006e 2069     		ldr	r0, [r4, #16]
 22843              	.LVL551:
 22844 0070 02E0     		b	.L328
 22845              	.LVL552:
 22846              	.L327:
 22847              		.loc 1 1792 0
 22848 0072 6169     		ldr	r1, [r4, #20]
 22849 0074 FFF7FEFF 		bl	get_fat
 22850              	.LVL553:
 22851              	.L328:
 22852              		.loc 1 1793 0
 22853 0078 0128     		cmp	r0, #1
 22854 007a 08D8     		bhi	.L329
 22855 007c A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 22856 007e 6FEA4363 		mvn	r3, r3, lsl #25
 22857 0082 6FEA5363 		mvn	r3, r3, lsr #25
 22858 0086 A371     		strb	r3, [r4, #6]
 22859 0088 4FF0020B 		mov	fp, #2
 22860              	.LVL554:
 22861 008c 88E0     		b	.L322
 22862              	.L329:
 22863              		.loc 1 1794 0
 22864 008e B0F1FF3F 		cmp	r0, #-1
 22865 0092 08D1     		bne	.L330
 22866 0094 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 22867 0096 6FEA4363 		mvn	r3, r3, lsl #25
 22868 009a 6FEA5363 		mvn	r3, r3, lsr #25
 22869 009e A371     		strb	r3, [r4, #6]
 22870 00a0 4FF0010B 		mov	fp, #1
 22871              	.LVL555:
 22872 00a4 7CE0     		b	.L322
 22873              	.L330:
 22874              		.loc 1 1795 0
 22875 00a6 6061     		str	r0, [r4, #20]
 22876              		.loc 1 1796 0
 22877 00a8 4FF00003 		mov	r3, #0
 22878 00ac E371     		strb	r3, [r4, #7]
 22879              	.L326:
 22880              		.loc 1 1798 0
 22881 00ae 2568     		ldr	r5, [r4, #0]
 22882              	.LVL556:
 22883 00b0 2846     		mov	r0, r5
 22884              	.LVL557:
 22885 00b2 6169     		ldr	r1, [r4, #20]
 22886 00b4 FFF7FEFF 		bl	clust2sect
 22887              		.loc 1 1799 0
 22888 00b8 8146     		mov	r9, r0
 22889              	.LVL558:
 22890 00ba 40B9     		cbnz	r0, .L331
 22891 00bc A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 22892 00be 6FEA4363 		mvn	r3, r3, lsl #25
 22893 00c2 6FEA5363 		mvn	r3, r3, lsr #25
 22894 00c6 A371     		strb	r3, [r4, #6]
 22895 00c8 4FF0020B 		mov	fp, #2
 22896              	.LVL559:
 22897 00cc 68E0     		b	.L322
 22898              	.L331:
 22899              		.loc 1 1800 0
 22900 00ce E379     		ldrb	r3, [r4, #7]	@ zero_extendqisi2
 22901 00d0 00EB0309 		add	r9, r0, r3
 22902              	.LVL560:
 22903              		.loc 1 1802 0
 22904 00d4 5FEA572A 		lsrs	sl, r7, #9
 22905 00d8 2DD0     		beq	.L332
 22906              		.loc 1 1803 0
 22907 00da A978     		ldrb	r1, [r5, #2]	@ zero_extendqisi2
 22908 00dc 0AEB0302 		add	r2, sl, r3
 22909 00e0 8A42     		cmp	r2, r1
 22910              		.loc 1 1804 0
 22911 00e2 88BF     		it	hi
 22912 00e4 C3EB010A 		rsbhi	sl, r3, r1
 22913              		.loc 1 1805 0
 22914 00e8 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 22915 00ea 4146     		mov	r1, r8
 22916 00ec 4A46     		mov	r2, r9
 22917 00ee 5FFA8AF3 		uxtb	r3, sl
 22918 00f2 FFF7FEFF 		bl	disk_read
 22919 00f6 40B1     		cbz	r0, .L334
 22920              		.loc 1 1806 0
 22921 00f8 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 22922 00fa 6FEA4363 		mvn	r3, r3, lsl #25
 22923 00fe 6FEA5363 		mvn	r3, r3, lsr #25
 22924 0102 A371     		strb	r3, [r4, #6]
 22925 0104 4FF0010B 		mov	fp, #1
 22926              	.LVL561:
 22927 0108 4AE0     		b	.L322
 22928              	.L334:
 22929              		.loc 1 1809 0
 22930 010a 2168     		ldr	r1, [r4, #0]
 22931 010c 0B79     		ldrb	r3, [r1, #4]	@ zero_extendqisi2
 22932 010e 63B1     		cbz	r3, .L335
 22933 0110 CB6A     		ldr	r3, [r1, #44]
 22934 0112 C9EB0309 		rsb	r9, r9, r3
 22935              	.LVL562:
 22936 0116 CA45     		cmp	sl, r9
 22937 0118 07D9     		bls	.L335
 22938              		.loc 1 1810 0
 22939 011a 08EB4920 		add	r0, r8, r9, lsl #9
 22940 011e 01F13001 		add	r1, r1, #48
 22941 0122 4FF40072 		mov	r2, #512
 22942 0126 FFF7FEFF 		bl	mem_cpy
 22943              	.LVL563:
 22944              	.L335:
 22945              		.loc 1 1816 0
 22946 012a E379     		ldrb	r3, [r4, #7]	@ zero_extendqisi2
 22947 012c 5344     		add	r3, sl, r3
 22948 012e E371     		strb	r3, [r4, #7]
 22949              		.loc 1 1817 0
 22950 0130 4FEA4A25 		lsl	r5, sl, #9
 22951              	.LVL564:
 22952              		.loc 1 1818 0
 22953 0134 2AE0     		b	.L336
 22954              	.LVL565:
 22955              	.L332:
 22956              		.loc 1 1833 0
 22957 0136 C4F81890 		str	r9, [r4, #24]
 22958              		.loc 1 1834 0
 22959 013a E379     		ldrb	r3, [r4, #7]	@ zero_extendqisi2
 22960 013c 03F10103 		add	r3, r3, #1
 22961 0140 E371     		strb	r3, [r4, #7]
 22962              	.LVL566:
 22963              	.L325:
 22964              		.loc 1 1836 0
 22965 0142 A568     		ldr	r5, [r4, #8]
 22966              	.LVL567:
 22967              		.loc 1 1839 0
 22968 0144 2068     		ldr	r0, [r4, #0]
 22969 0146 A169     		ldr	r1, [r4, #24]
 22970 0148 FFF7FEFF 		bl	move_window
 22971 014c 40B1     		cbz	r0, .L337
 22972              		.loc 1 1840 0
 22973 014e A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 22974 0150 6FEA4363 		mvn	r3, r3, lsl #25
 22975 0154 6FEA5363 		mvn	r3, r3, lsr #25
 22976 0158 A371     		strb	r3, [r4, #6]
 22977 015a 4FF0010B 		mov	fp, #1
 22978              	.LVL568:
 22979 015e 1FE0     		b	.L322
 22980              	.L337:
 22981              		.loc 1 1836 0
 22982 0160 4FEAC555 		lsl	r5, r5, #23
 22983 0164 4FEAD555 		lsr	r5, r5, #23
 22984 0168 C5F50075 		rsb	r5, r5, #512
 22985              	.LVL569:
 22986 016c AF42     		cmp	r7, r5
 22987 016e 38BF     		it	cc
 22988 0170 3D46     		movcc	r5, r7
 22989              	.LVL570:
 22990              		.loc 1 1841 0
 22991 0172 2168     		ldr	r1, [r4, #0]
 22992 0174 01F13001 		add	r1, r1, #48
 22993 0178 A368     		ldr	r3, [r4, #8]
 22994 017a 4FEAC353 		lsl	r3, r3, #23
 22995 017e 4FEAD353 		lsr	r3, r3, #23
 22996 0182 4046     		mov	r0, r8
 22997 0184 1944     		add	r1, r1, r3
 22998 0186 2A46     		mov	r2, r5
 22999 0188 FFF7FEFF 		bl	mem_cpy
 23000              	.L336:
 23001              		.loc 1 1788 0
 23002 018c A368     		ldr	r3, [r4, #8]
 23003 018e 2B44     		add	r3, r3, r5
 23004 0190 A360     		str	r3, [r4, #8]
 23005 0192 3368     		ldr	r3, [r6, #0]
 23006 0194 2B44     		add	r3, r3, r5
 23007 0196 3360     		str	r3, [r6, #0]
 23008              		.loc 1 1787 0
 23009 0198 7F1B     		subs	r7, r7, r5
 23010 019a 01D0     		beq	.L322
 23011              		.loc 1 1788 0
 23012 019c A844     		add	r8, r8, r5
 23013              	.LVL571:
 23014 019e 59E7     		b	.L338
 23015              	.LVL572:
 23016              	.L322:
 23017              		.loc 1 1848 0
 23018 01a0 5846     		mov	r0, fp
 23019              	.LVL573:
 23020 01a2 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23021              		.cfi_endproc
 23022              	.LFE53:
 23024 01a6 00BF     		.section	.text.f_gets,"ax",%progbits
 23025              		.align	2
 23026              		.global	f_gets
 23027              		.thumb
 23028              		.thumb_func
 23030              	f_gets:
 23031              	.LFB61:
 23032              		.loc 1 3003 0
 23033              		.cfi_startproc
 23034              		@ args = 0, pretend = 0, frame = 8
 23035              		@ frame_needed = 0, uses_anonymous_args = 0
 23036              	.LVL574:
 23037 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, sl, lr}
 23038              	.LCFI24:
 23039              		.cfi_def_cfa_offset 32
 23040 0004 82B0     		sub	sp, sp, #8
 23041              	.LCFI25:
 23042              		.cfi_def_cfa_offset 40
 23043 0006 8146     		mov	r9, r0
 23044              		.cfi_offset 14, -4
 23045              		.cfi_offset 10, -8
 23046              		.cfi_offset 9, -12
 23047              		.cfi_offset 8, -16
 23048              		.cfi_offset 7, -20
 23049              		.cfi_offset 6, -24
 23050              		.cfi_offset 5, -28
 23051              		.cfi_offset 4, -32
 23052 0008 1746     		mov	r7, r2
 23053              		.loc 1 3003 0
 23054 000a 0446     		mov	r4, r0
 23055              	.LVL575:
 23056 000c 4FF00005 		mov	r5, #0
 23057              	.LVL576:
 23058              		.loc 1 3009 0
 23059 0010 01F1FF36 		add	r6, r1, #-1
 23060              		.loc 1 3010 0
 23061 0014 0DF10408 		add	r8, sp, #4
 23062 0018 4FF0010A 		mov	sl, #1
 23063              		.loc 1 3009 0
 23064 001c 11E0     		b	.L346
 23065              	.LVL577:
 23066              	.L343:
 23067              		.loc 1 3010 0
 23068 001e 3846     		mov	r0, r7
 23069 0020 2146     		mov	r1, r4
 23070              	.LVL578:
 23071 0022 5246     		mov	r2, sl
 23072 0024 4346     		mov	r3, r8
 23073 0026 FFF7FEFF 		bl	f_read
 23074              		.loc 1 3011 0
 23075 002a 019B     		ldr	r3, [sp, #4]
 23076 002c 012B     		cmp	r3, #1
 23077 002e 0AD1     		bne	.L342
 23078              	.LVL579:
 23079              		.loc 1 3013 0
 23080 0030 2378     		ldrb	r3, [r4, #0]	@ zero_extendqisi2
 23081              	.LVL580:
 23082 0032 0D2B     		cmp	r3, #13
 23083 0034 05D0     		beq	.L346
 23084              		.loc 1 3015 0
 23085 0036 05F10105 		add	r5, r5, #1
 23086              		.loc 1 3016 0
 23087 003a 04F10104 		add	r4, r4, #1
 23088 003e 0A2B     		cmp	r3, #10
 23089 0040 01D0     		beq	.L342
 23090              	.LVL581:
 23091              	.L346:
 23092              		.loc 1 3009 0
 23093 0042 B542     		cmp	r5, r6
 23094 0044 EBDB     		blt	.L343
 23095              	.LVL582:
 23096              	.L342:
 23097              		.loc 1 3018 0
 23098 0046 4FF00003 		mov	r3, #0
 23099 004a 2370     		strb	r3, [r4, #0]
 23100              		.loc 1 3020 0
 23101 004c 9D42     		cmp	r5, r3
 23102 004e 14BF     		ite	ne
 23103 0050 4846     		movne	r0, r9
 23104 0052 1846     		moveq	r0, r3
 23105 0054 02B0     		add	sp, sp, #8
 23106 0056 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 23107              		.cfi_endproc
 23108              	.LFE61:
 23110 005a 00BF     		.section	.text.check_fs,"ax",%progbits
 23111              		.align	2
 23112              		.thumb
 23113              		.thumb_func
 23115              	check_fs:
 23116              	.LFB48:
 23117              		.loc 1 1442 0
 23118              		.cfi_startproc
 23119              		@ args = 0, pretend = 0, frame = 0
 23120              		@ frame_needed = 0, uses_anonymous_args = 0
 23121              	.LVL583:
 23122 0000 10B5     		push	{r4, lr}
 23123              	.LCFI26:
 23124              		.cfi_def_cfa_offset 8
 23125 0002 0446     		mov	r4, r0
 23126              		.cfi_offset 14, -4
 23127              		.cfi_offset 4, -8
 23128 0004 0A46     		mov	r2, r1
 23129              		.loc 1 1443 0
 23130 0006 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 23131              	.LVL584:
 23132 0008 04F13001 		add	r1, r4, #48
 23133              	.LVL585:
 23134 000c 4FF00103 		mov	r3, #1
 23135 0010 FFF7FEFF 		bl	disk_read
 23136              	.LVL586:
 23137 0014 10B1     		cbz	r0, .L348
 23138 0016 4FF00300 		mov	r0, #3
 23139 001a 10BD     		pop	{r4, pc}
 23140              	.L348:
 23141              		.loc 1 1445 0
 23142 001c 94F82F22 		ldrb	r2, [r4, #559]	@ zero_extendqisi2
 23143 0020 94F82E32 		ldrb	r3, [r4, #558]	@ zero_extendqisi2
 23144 0024 43EA0222 		orr	r2, r3, r2, lsl #8
 23145 0028 12B2     		sxth	r2, r2
 23146 002a 4AF65523 		movw	r3, #:lower16:-21931
 23147 002e CFF6FF73 		movt	r3, #:upper16:-21931
 23148 0032 9A42     		cmp	r2, r3
 23149 0034 02D0     		beq	.L350
 23150 0036 4FF00200 		mov	r0, #2
 23151 003a 10BD     		pop	{r4, pc}
 23152              	.L350:
 23153              		.loc 1 1448 0
 23154 003c 94F86930 		ldrb	r3, [r4, #105]	@ zero_extendqisi2
 23155 0040 94F86820 		ldrb	r2, [r4, #104]	@ zero_extendqisi2
 23156 0044 4FEA0242 		lsl	r2, r2, #16
 23157 0048 42EA0362 		orr	r2, r2, r3, lsl #24
 23158 004c 94F86630 		ldrb	r3, [r4, #102]	@ zero_extendqisi2
 23159 0050 42EA0302 		orr	r2, r2, r3
 23160 0054 94F86730 		ldrb	r3, [r4, #103]	@ zero_extendqisi2
 23161 0058 42EA0322 		orr	r2, r2, r3, lsl #8
 23162 005c 22F07F42 		bic	r2, r2, #-16777216
 23163 0060 44F24613 		movw	r3, #:lower16:5521734
 23164 0064 C0F25403 		movt	r3, #:upper16:5521734
 23165 0068 9A42     		cmp	r2, r3
 23166 006a 02D1     		bne	.L351
 23167 006c 4FF00000 		mov	r0, #0
 23168 0070 10BD     		pop	{r4, pc}
 23169              	.L351:
 23170 0072 94F88530 		ldrb	r3, [r4, #133]	@ zero_extendqisi2
 23171 0076 94F88400 		ldrb	r0, [r4, #132]	@ zero_extendqisi2
 23172 007a 4FEA0040 		lsl	r0, r0, #16
 23173 007e 40EA0360 		orr	r0, r0, r3, lsl #24
 23174 0082 94F88230 		ldrb	r3, [r4, #130]	@ zero_extendqisi2
 23175 0086 40EA0300 		orr	r0, r0, r3
 23176 008a 94F88330 		ldrb	r3, [r4, #131]	@ zero_extendqisi2
 23177 008e 40EA0320 		orr	r0, r0, r3, lsl #8
 23178 0092 20F07F40 		bic	r0, r0, #-16777216
 23179 0096 44F24613 		movw	r3, #:lower16:5521734
 23180 009a C0F25403 		movt	r3, #:upper16:5521734
 23181 009e C01A     		subs	r0, r0, r3
 23182 00a0 18BF     		it	ne
 23183 00a2 0120     		movne	r0, #1
 23184              		.loc 1 1454 0
 23185 00a4 10BD     		pop	{r4, pc}
 23186              		.cfi_endproc
 23187              	.LFE48:
 23189 00a6 00BF     		.section	.text.chk_mounted,"ax",%progbits
 23190              		.align	2
 23191              		.global	chk_mounted
 23192              		.thumb
 23193              		.thumb_func
 23195              	chk_mounted:
 23196              	.LFB49:
 23197              		.loc 1 1469 0
 23198              		.cfi_startproc
 23199              		@ args = 0, pretend = 0, frame = 0
 23200              		@ frame_needed = 0, uses_anonymous_args = 0
 23201              	.LVL587:
 23202 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 23203              	.LCFI27:
 23204              		.cfi_def_cfa_offset 24
 23205 0002 1546     		mov	r5, r2
 23206              		.cfi_offset 14, -4
 23207              		.cfi_offset 7, -8
 23208              		.cfi_offset 6, -12
 23209              		.cfi_offset 5, -16
 23210              		.cfi_offset 4, -20
 23211              		.cfi_offset 3, -24
 23212              		.loc 1 1474 0
 23213 0004 0368     		ldr	r3, [r0, #0]
 23214              	.LVL588:
 23215              		.loc 1 1478 0
 23216 0006 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 23217              	.LVL589:
 23218 0008 A2F13002 		sub	r2, r2, #48
 23219              	.LVL590:
 23220              		.loc 1 1479 0
 23221 000c 092A     		cmp	r2, #9
 23222 000e 0BD8     		bhi	.L354
 23223 0010 93F801C0 		ldrb	ip, [r3, #1]	@ zero_extendqisi2
 23224 0014 BCF13A0F 		cmp	ip, #58
 23225 0018 06D1     		bne	.L354
 23226              		.loc 1 1480 0
 23227 001a 03F10203 		add	r3, r3, #2
 23228              	.LVL591:
 23229 001e 0360     		str	r3, [r0, #0]
 23230              		.loc 1 1490 0
 23231 0020 12B1     		cbz	r2, .L354
 23232 0022 4FF00B00 		mov	r0, #11
 23233              	.LVL592:
 23234 0026 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 23235              	.LVL593:
 23236              	.L354:
 23237              		.loc 1 1492 0
 23238 0028 40F20003 		movw	r3, #:lower16:.LANCHOR0
 23239              	.LVL594:
 23240 002c C0F20003 		movt	r3, #:upper16:.LANCHOR0
 23241 0030 1C68     		ldr	r4, [r3, #0]
 23242              	.LVL595:
 23243 0032 0C60     		str	r4, [r1, #0]
 23244              		.loc 1 1493 0
 23245 0034 14B9     		cbnz	r4, .L356
 23246 0036 4FF00C00 		mov	r0, #12
 23247              	.LVL596:
 23248 003a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 23249              	.LVL597:
 23250              	.L356:
 23251              		.loc 1 1497 0
 23252 003c 2378     		ldrb	r3, [r4, #0]	@ zero_extendqisi2
 23253 003e 6BB1     		cbz	r3, .L357
 23254              		.loc 1 1498 0
 23255 0040 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 23256              	.LVL598:
 23257 0042 FFF7FEFF 		bl	disk_status
 23258              	.LVL599:
 23259              		.loc 1 1499 0
 23260 0046 10F0010F 		tst	r0, #1
 23261 004a 07D1     		bne	.L357
 23262              		.loc 1 1501 0
 23263 004c 002D     		cmp	r5, #0
 23264 004e 00F05581 		beq	.L358
 23265 0052 10F0040F 		tst	r0, #4
 23266 0056 40F04E81 		bne	.L359
 23267 005a 4FE1     		b	.L358
 23268              	.LVL600:
 23269              	.L357:
 23270              		.loc 1 1510 0
 23271 005c 4FF00000 		mov	r0, #0
 23272              	.LVL601:
 23273 0060 2070     		strb	r0, [r4, #0]
 23274              		.loc 1 1511 0
 23275 0062 6070     		strb	r0, [r4, #1]
 23276              		.loc 1 1512 0
 23277 0064 FFF7FEFF 		bl	disk_initialize
 23278              	.LVL602:
 23279              		.loc 1 1513 0
 23280 0068 10F0010F 		tst	r0, #1
 23281 006c 02D0     		beq	.L360
 23282 006e 4FF00300 		mov	r0, #3
 23283 0072 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 23284              	.L360:
 23285              		.loc 1 1520 0
 23286 0074 1DB1     		cbz	r5, .L361
 23287 0076 10F0040F 		tst	r0, #4
 23288 007a 40F03C81 		bne	.L359
 23289              	.L361:
 23290              		.loc 1 1524 0
 23291 007e 2046     		mov	r0, r4
 23292 0080 4FF00001 		mov	r1, #0
 23293 0084 FFF7FEFF 		bl	check_fs
 23294              		.loc 1 1525 0
 23295 0088 0128     		cmp	r0, #1
 23296              	.LVL603:
 23297 008a 18BF     		it	ne
 23298 008c 0025     		movne	r5, #0
 23299              	.LVL604:
 23300 008e 15D1     		bne	.L363
 23301              		.loc 1 1527 0
 23302 0090 04F5F773 		add	r3, r4, #494
 23303              	.LVL605:
 23304              		.loc 1 1528 0
 23305 0094 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 23306 0096 002A     		cmp	r2, #0
 23307 0098 00F03381 		beq	.L364
 23308              		.loc 1 1529 0
 23309 009c DD7A     		ldrb	r5, [r3, #11]	@ zero_extendqisi2
 23310              	.LVL606:
 23311 009e 9A7A     		ldrb	r2, [r3, #10]	@ zero_extendqisi2
 23312 00a0 4FEA0242 		lsl	r2, r2, #16
 23313 00a4 42EA0565 		orr	r5, r2, r5, lsl #24
 23314 00a8 1A7A     		ldrb	r2, [r3, #8]	@ zero_extendqisi2
 23315 00aa 45EA0202 		orr	r2, r5, r2
 23316 00ae 5D7A     		ldrb	r5, [r3, #9]	@ zero_extendqisi2
 23317 00b0 42EA0525 		orr	r5, r2, r5, lsl #8
 23318              	.LVL607:
 23319              		.loc 1 1530 0
 23320 00b4 2046     		mov	r0, r4
 23321              	.LVL608:
 23322 00b6 2946     		mov	r1, r5
 23323 00b8 FFF7FEFF 		bl	check_fs
 23324              	.LVL609:
 23325              	.L363:
 23326              		.loc 1 1533 0
 23327 00bc 0328     		cmp	r0, #3
 23328 00be 02D1     		bne	.L365
 23329 00c0 4FF00100 		mov	r0, #1
 23330              	.LVL610:
 23331 00c4 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 23332              	.LVL611:
 23333              	.L365:
 23334              		.loc 1 1534 0
 23335 00c6 0028     		cmp	r0, #0
 23336 00c8 40F01B81 		bne	.L364
 23337 00cc 94F83C20 		ldrb	r2, [r4, #60]	@ zero_extendqisi2
 23338 00d0 94F83B30 		ldrb	r3, [r4, #59]	@ zero_extendqisi2
 23339 00d4 43EA0223 		orr	r3, r3, r2, lsl #8
 23340 00d8 1BB2     		sxth	r3, r3
 23341 00da B3F5007F 		cmp	r3, #512
 23342 00de 40F01081 		bne	.L364
 23343              		.loc 1 1538 0
 23344 00e2 94F84720 		ldrb	r2, [r4, #71]	@ zero_extendqisi2
 23345 00e6 94F84630 		ldrb	r3, [r4, #70]	@ zero_extendqisi2
 23346              		.loc 1 1539 0
 23347 00ea 53EA0223 		orrs	r3, r3, r2, lsl #8
 23348              	.LVL612:
 23349 00ee 0FD1     		bne	.L366
 23350 00f0 94F85720 		ldrb	r2, [r4, #87]	@ zero_extendqisi2
 23351 00f4 94F85630 		ldrb	r3, [r4, #86]	@ zero_extendqisi2
 23352              	.LVL613:
 23353 00f8 4FEA0343 		lsl	r3, r3, #16
 23354 00fc 43EA0262 		orr	r2, r3, r2, lsl #24
 23355 0100 94F85430 		ldrb	r3, [r4, #84]	@ zero_extendqisi2
 23356 0104 42EA0303 		orr	r3, r2, r3
 23357 0108 94F85520 		ldrb	r2, [r4, #85]	@ zero_extendqisi2
 23358 010c 43EA0223 		orr	r3, r3, r2, lsl #8
 23359              	.LVL614:
 23360              	.L366:
 23361              		.loc 1 1540 0
 23362 0110 A361     		str	r3, [r4, #24]
 23363              		.loc 1 1541 0
 23364 0112 94F84020 		ldrb	r2, [r4, #64]	@ zero_extendqisi2
 23365 0116 E270     		strb	r2, [r4, #3]
 23366              		.loc 1 1542 0
 23367 0118 02FB03F2 		mul	r2, r2, r3
 23368              	.LVL615:
 23369              		.loc 1 1543 0
 23370 011c 94F83F10 		ldrb	r1, [r4, #63]	@ zero_extendqisi2
 23371 0120 94F83E30 		ldrb	r3, [r4, #62]	@ zero_extendqisi2
 23372 0124 43EA0121 		orr	r1, r3, r1, lsl #8
 23373 0128 2944     		add	r1, r5, r1
 23374 012a 2162     		str	r1, [r4, #32]
 23375              		.loc 1 1544 0
 23376 012c 94F83D30 		ldrb	r3, [r4, #61]	@ zero_extendqisi2
 23377 0130 A370     		strb	r3, [r4, #2]
 23378              		.loc 1 1545 0
 23379 0132 94F842C0 		ldrb	ip, [r4, #66]	@ zero_extendqisi2
 23380 0136 94F84100 		ldrb	r0, [r4, #65]	@ zero_extendqisi2
 23381              	.LVL616:
 23382 013a 40EA0C20 		orr	r0, r0, ip, lsl #8
 23383 013e 2081     		strh	r0, [r4, #8]	@ movhi
 23384              		.loc 1 1546 0
 23385 0140 94F84460 		ldrb	r6, [r4, #68]	@ zero_extendqisi2
 23386 0144 94F843C0 		ldrb	ip, [r4, #67]	@ zero_extendqisi2
 23387              		.loc 1 1547 0
 23388 0148 5CEA062C 		orrs	ip, ip, r6, lsl #8
 23389              	.LVL617:
 23390 014c 0FD1     		bne	.L367
 23391 014e 94F85360 		ldrb	r6, [r4, #83]	@ zero_extendqisi2
 23392 0152 94F852C0 		ldrb	ip, [r4, #82]	@ zero_extendqisi2
 23393              	.LVL618:
 23394 0156 4FEA0C4C 		lsl	ip, ip, #16
 23395 015a 4CEA0666 		orr	r6, ip, r6, lsl #24
 23396 015e 94F850C0 		ldrb	ip, [r4, #80]	@ zero_extendqisi2
 23397 0162 46EA0C0C 		orr	ip, r6, ip
 23398 0166 94F85160 		ldrb	r6, [r4, #81]	@ zero_extendqisi2
 23399 016a 4CEA062C 		orr	ip, ip, r6, lsl #8
 23400              	.LVL619:
 23401              	.L367:
 23402              		.loc 1 1548 0
 23403 016e 4FEA1010 		lsr	r0, r0, #4
 23404 0172 94F83F70 		ldrb	r7, [r4, #63]	@ zero_extendqisi2
 23405 0176 94F83E60 		ldrb	r6, [r4, #62]	@ zero_extendqisi2
 23406 017a 46EA0726 		orr	r6, r6, r7, lsl #8
 23407 017e C6EB0C0C 		rsb	ip, r6, ip
 23408              	.LVL620:
 23409 0182 C2EB0C0C 		rsb	ip, r2, ip
 23410 0186 C0EB0C0C 		rsb	ip, r0, ip
 23411 018a BCFBF3F3 		udiv	r3, ip, r3
 23412 018e 03F10203 		add	r3, r3, #2
 23413              	.LVL621:
 23414 0192 E361     		str	r3, [r4, #28]
 23415              		.loc 1 1553 0
 23416 0194 40F6F676 		movw	r6, #4086
 23417 0198 B342     		cmp	r3, r6
 23418 019a 94BF     		ite	ls
 23419 019c 0126     		movls	r6, #1
 23420 019e 0226     		movhi	r6, #2
 23421              	.LVL622:
 23422              		.loc 1 1554 0
 23423 01a0 4FF6F67C 		movw	ip, #65526
 23424 01a4 6345     		cmp	r3, ip
 23425 01a6 88BF     		it	hi
 23426 01a8 0326     		movhi	r6, #3
 23427              	.LVL623:
 23428 01aa 01D8     		bhi	.L371
 23429              		.loc 1 1556 0
 23430 01ac 032E     		cmp	r6, #3
 23431 01ae 2BD1     		bne	.L372
 23432              	.L371:
 23433              		.loc 1 1557 0
 23434 01b0 94F85FC0 		ldrb	ip, [r4, #95]	@ zero_extendqisi2
 23435 01b4 94F85E30 		ldrb	r3, [r4, #94]	@ zero_extendqisi2
 23436              	.LVL624:
 23437 01b8 4FEA0343 		lsl	r3, r3, #16
 23438 01bc 43EA0C6C 		orr	ip, r3, ip, lsl #24
 23439 01c0 94F85C30 		ldrb	r3, [r4, #92]	@ zero_extendqisi2
 23440 01c4 4CEA0303 		orr	r3, ip, r3
 23441 01c8 94F85DC0 		ldrb	ip, [r4, #93]	@ zero_extendqisi2
 23442 01cc 43EA0C23 		orr	r3, r3, ip, lsl #8
 23443 01d0 6362     		str	r3, [r4, #36]
 23444              		.loc 1 1560 0
 23445 01d2 0144     		add	r1, r1, r0
 23446 01d4 0A44     		add	r2, r1, r2
 23447              	.LVL625:
 23448 01d6 A262     		str	r2, [r4, #40]
 23449              		.loc 1 1564 0
 23450 01d8 4FF0FF33 		mov	r3, #-1
 23451 01dc 2361     		str	r3, [r4, #16]
 23452              		.loc 1 1565 0
 23453 01de 4FF00003 		mov	r3, #0
 23454 01e2 2371     		strb	r3, [r4, #4]
 23455              		.loc 1 1568 0
 23456 01e4 6371     		strb	r3, [r4, #5]
 23457              		.loc 1 1569 0
 23458 01e6 94F86120 		ldrb	r2, [r4, #97]	@ zero_extendqisi2
 23459 01ea 94F86030 		ldrb	r3, [r4, #96]	@ zero_extendqisi2
 23460 01ee 43EA0222 		orr	r2, r3, r2, lsl #8
 23461 01f2 2A44     		add	r2, r5, r2
 23462 01f4 6261     		str	r2, [r4, #20]
 23463              		.loc 1 1570 0
 23464 01f6 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 23465 01f8 04F13001 		add	r1, r4, #48
 23466 01fc 4FF00103 		mov	r3, #1
 23467 0200 FFF7FEFF 		bl	disk_read
 23468 0204 68B1     		cbz	r0, .L373
 23469 0206 67E0     		b	.L374
 23470              	.LVL626:
 23471              	.L372:
 23472              		.loc 1 1559 0
 23473 0208 02EB0103 		add	r3, r2, r1
 23474              	.LVL627:
 23475 020c 6362     		str	r3, [r4, #36]
 23476              		.loc 1 1560 0
 23477 020e 0844     		add	r0, r1, r0
 23478 0210 0244     		add	r2, r0, r2
 23479              	.LVL628:
 23480 0212 A262     		str	r2, [r4, #40]
 23481              		.loc 1 1564 0
 23482 0214 4FF0FF33 		mov	r3, #-1
 23483 0218 2361     		str	r3, [r4, #16]
 23484              		.loc 1 1565 0
 23485 021a 4FF00003 		mov	r3, #0
 23486 021e 2371     		strb	r3, [r4, #4]
 23487 0220 5AE0     		b	.L374
 23488              	.L373:
 23489              		.loc 1 1571 0
 23490 0222 94F82F22 		ldrb	r2, [r4, #559]	@ zero_extendqisi2
 23491 0226 94F82E32 		ldrb	r3, [r4, #558]	@ zero_extendqisi2
 23492 022a 43EA0222 		orr	r2, r3, r2, lsl #8
 23493 022e 12B2     		sxth	r2, r2
 23494 0230 4AF65523 		movw	r3, #:lower16:-21931
 23495 0234 CFF6FF73 		movt	r3, #:upper16:-21931
 23496 0238 9A42     		cmp	r2, r3
 23497 023a 4DD1     		bne	.L374
 23498              		.loc 1 1572 0
 23499 023c 94F83320 		ldrb	r2, [r4, #51]	@ zero_extendqisi2
 23500 0240 94F83230 		ldrb	r3, [r4, #50]	@ zero_extendqisi2
 23501 0244 4FEA0343 		lsl	r3, r3, #16
 23502 0248 43EA0262 		orr	r2, r3, r2, lsl #24
 23503 024c 94F83030 		ldrb	r3, [r4, #48]	@ zero_extendqisi2
 23504 0250 42EA0303 		orr	r3, r2, r3
 23505 0254 94F83120 		ldrb	r2, [r4, #49]	@ zero_extendqisi2
 23506 0258 43EA0222 		orr	r2, r3, r2, lsl #8
 23507 025c 45F25223 		movw	r3, #:lower16:1096897106
 23508 0260 C4F26113 		movt	r3, #:upper16:1096897106
 23509 0264 9A42     		cmp	r2, r3
 23510 0266 37D1     		bne	.L374
 23511              		.loc 1 1573 0
 23512 0268 94F81722 		ldrb	r2, [r4, #535]	@ zero_extendqisi2
 23513 026c 94F81632 		ldrb	r3, [r4, #534]	@ zero_extendqisi2
 23514 0270 4FEA0343 		lsl	r3, r3, #16
 23515 0274 43EA0262 		orr	r2, r3, r2, lsl #24
 23516 0278 94F81432 		ldrb	r3, [r4, #532]	@ zero_extendqisi2
 23517 027c 42EA0303 		orr	r3, r2, r3
 23518 0280 94F81522 		ldrb	r2, [r4, #533]	@ zero_extendqisi2
 23519 0284 43EA0222 		orr	r2, r3, r2, lsl #8
 23520 0288 47F27223 		movw	r3, #:lower16:1631679090
 23521 028c C6F24113 		movt	r3, #:upper16:1631679090
 23522 0290 9A42     		cmp	r2, r3
 23523 0292 21D1     		bne	.L374
 23524              		.loc 1 1574 0
 23525 0294 94F81F22 		ldrb	r2, [r4, #543]	@ zero_extendqisi2
 23526 0298 94F81E32 		ldrb	r3, [r4, #542]	@ zero_extendqisi2
 23527 029c 4FEA0343 		lsl	r3, r3, #16
 23528 02a0 43EA0262 		orr	r2, r3, r2, lsl #24
 23529 02a4 94F81C32 		ldrb	r3, [r4, #540]	@ zero_extendqisi2
 23530 02a8 42EA0303 		orr	r3, r2, r3
 23531 02ac 94F81D22 		ldrb	r2, [r4, #541]	@ zero_extendqisi2
 23532 02b0 43EA0223 		orr	r3, r3, r2, lsl #8
 23533 02b4 E360     		str	r3, [r4, #12]
 23534              		.loc 1 1575 0
 23535 02b6 94F81B22 		ldrb	r2, [r4, #539]	@ zero_extendqisi2
 23536 02ba 94F81A32 		ldrb	r3, [r4, #538]	@ zero_extendqisi2
 23537 02be 4FEA0343 		lsl	r3, r3, #16
 23538 02c2 43EA0262 		orr	r2, r3, r2, lsl #24
 23539 02c6 94F81832 		ldrb	r3, [r4, #536]	@ zero_extendqisi2
 23540 02ca 42EA0303 		orr	r3, r2, r3
 23541 02ce 94F81922 		ldrb	r2, [r4, #537]	@ zero_extendqisi2
 23542 02d2 43EA0223 		orr	r3, r3, r2, lsl #8
 23543 02d6 2361     		str	r3, [r4, #16]
 23544              	.L374:
 23545              		.loc 1 1579 0
 23546 02d8 2670     		strb	r6, [r4, #0]
 23547              		.loc 1 1580 0
 23548 02da 4FF00000 		mov	r0, #0
 23549 02de E062     		str	r0, [r4, #44]
 23550              		.loc 1 1584 0
 23551 02e0 40F20003 		movw	r3, #:lower16:.LANCHOR4
 23552 02e4 C0F20003 		movt	r3, #:upper16:.LANCHOR4
 23553 02e8 1A88     		ldrh	r2, [r3, #0]
 23554 02ea 02F10102 		add	r2, r2, #1
 23555 02ee 92B2     		uxth	r2, r2
 23556 02f0 1A80     		strh	r2, [r3, #0]	@ movhi
 23557 02f2 E280     		strh	r2, [r4, #6]	@ movhi
 23558              		.loc 1 1586 0
 23559 02f4 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 23560              	.LVL629:
 23561              	.L359:
 23562 02f6 4FF00A00 		mov	r0, #10
 23563 02fa F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 23564              	.L358:
 23565 02fc 4FF00000 		mov	r0, #0
 23566 0300 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 23567              	.LVL630:
 23568              	.L364:
 23569 0302 4FF00D00 		mov	r0, #13
 23570              	.LVL631:
 23571              		.loc 1 1587 0
 23572 0306 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 23573              		.cfi_endproc
 23574              	.LFE49:
 23576              		.section	.text.f_opendir,"ax",%progbits
 23577              		.align	2
 23578              		.global	f_opendir
 23579              		.thumb
 23580              		.thumb_func
 23582              	f_opendir:
 23583              	.LFB58:
 23584              		.loc 1 2207 0
 23585              		.cfi_startproc
 23586              		@ args = 0, pretend = 0, frame = 24
 23587              		@ frame_needed = 0, uses_anonymous_args = 0
 23588              	.LVL632:
 23589 0000 10B5     		push	{r4, lr}
 23590              	.LCFI28:
 23591              		.cfi_def_cfa_offset 8
 23592 0002 86B0     		sub	sp, sp, #24
 23593              	.LCFI29:
 23594              		.cfi_def_cfa_offset 32
 23595 0004 0446     		mov	r4, r0
 23596              		.cfi_offset 14, -4
 23597              		.cfi_offset 4, -8
 23598 0006 06A8     		add	r0, sp, #24
 23599              	.LVL633:
 23600 0008 40F8141D 		str	r1, [r0, #-20]!
 23601              		.loc 1 2213 0
 23602 000c 2146     		mov	r1, r4
 23603              	.LVL634:
 23604 000e 4FF00002 		mov	r2, #0
 23605 0012 FFF7FEFF 		bl	chk_mounted
 23606              		.loc 1 2214 0
 23607 0016 0346     		mov	r3, r0
 23608              	.LVL635:
 23609 0018 30BB     		cbnz	r0, .L377
 23610              		.loc 1 2215 0
 23611 001a 03AB     		add	r3, sp, #12
 23612              	.LVL636:
 23613 001c A361     		str	r3, [r4, #24]
 23614              		.loc 1 2216 0
 23615 001e 2046     		mov	r0, r4
 23616 0020 0199     		ldr	r1, [sp, #4]
 23617 0022 FFF7FEFF 		bl	follow_path
 23618              		.loc 1 2217 0
 23619 0026 0346     		mov	r3, r0
 23620              	.LVL637:
 23621 0028 D8B9     		cbnz	r0, .L378
 23622              	.LVL638:
 23623              		.loc 1 2218 0
 23624 002a 6369     		ldr	r3, [r4, #20]
 23625              	.LVL639:
 23626              		.loc 1 2219 0
 23627 002c 83B1     		cbz	r3, .L379
 23628              		.loc 1 2220 0
 23629 002e DA7A     		ldrb	r2, [r3, #11]	@ zero_extendqisi2
 23630 0030 12F0100F 		tst	r2, #16
 23631 0034 08BF     		it	eq
 23632 0036 0523     		moveq	r3, #5
 23633              	.LVL640:
 23634 0038 16D0     		beq	.L377
 23635              		.loc 1 2221 0
 23636 003a 597D     		ldrb	r1, [r3, #21]	@ zero_extendqisi2
 23637              	.LVL641:
 23638 003c 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 23639 003e 42EA0122 		orr	r2, r2, r1, lsl #8
 23640 0042 D97E     		ldrb	r1, [r3, #27]	@ zero_extendqisi2
 23641 0044 9B7E     		ldrb	r3, [r3, #26]	@ zero_extendqisi2
 23642              	.LVL642:
 23643 0046 43EA0123 		orr	r3, r3, r1, lsl #8
 23644 004a 43EA0243 		orr	r3, r3, r2, lsl #16
 23645 004e A360     		str	r3, [r4, #8]
 23646              	.LVL643:
 23647              	.L379:
 23648              		.loc 1 2227 0
 23649 0050 2368     		ldr	r3, [r4, #0]
 23650              	.LVL644:
 23651 0052 DB88     		ldrh	r3, [r3, #6]
 23652 0054 A380     		strh	r3, [r4, #4]	@ movhi
 23653              		.loc 1 2228 0
 23654 0056 2046     		mov	r0, r4
 23655 0058 4FF00001 		mov	r1, #0
 23656 005c FFF7FEFF 		bl	dir_seek
 23657 0060 0346     		mov	r3, r0
 23658              	.LVL645:
 23659              	.L378:
 23660              		.loc 1 2231 0
 23661 0062 042B     		cmp	r3, #4
 23662 0064 08BF     		it	eq
 23663 0066 0523     		moveq	r3, #5
 23664              	.LVL646:
 23665              	.L377:
 23666              		.loc 1 2235 0
 23667 0068 1846     		mov	r0, r3
 23668 006a 06B0     		add	sp, sp, #24
 23669 006c 10BD     		pop	{r4, pc}
 23670              		.cfi_endproc
 23671              	.LFE58:
 23673 006e 00BF     		.section	.text.f_open,"ax",%progbits
 23674              		.align	2
 23675              		.global	f_open
 23676              		.thumb
 23677              		.thumb_func
 23679              	f_open:
 23680              	.LFB52:
 23681              		.loc 1 1670 0
 23682              		.cfi_startproc
 23683              		@ args = 0, pretend = 0, frame = 56
 23684              		@ frame_needed = 0, uses_anonymous_args = 0
 23685              	.LVL647:
 23686 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23687              	.LCFI30:
 23688              		.cfi_def_cfa_offset 36
 23689 0004 8FB0     		sub	sp, sp, #60
 23690              	.LCFI31:
 23691              		.cfi_def_cfa_offset 96
 23692 0006 0446     		mov	r4, r0
 23693              		.cfi_offset 14, -4
 23694              		.cfi_offset 11, -8
 23695              		.cfi_offset 10, -12
 23696              		.cfi_offset 9, -16
 23697              		.cfi_offset 8, -20
 23698              		.cfi_offset 7, -24
 23699              		.cfi_offset 6, -28
 23700              		.cfi_offset 5, -32
 23701              		.cfi_offset 4, -36
 23702 0008 0EA8     		add	r0, sp, #56
 23703              	.LVL648:
 23704 000a 40F82C1D 		str	r1, [r0, #-44]!
 23705              		.loc 1 1677 0
 23706 000e 4FF00003 		mov	r3, #0
 23707 0012 2360     		str	r3, [r4, #0]
 23708              		.loc 1 1679 0
 23709 0014 02F01F05 		and	r5, r2, #31
 23710              	.LVL649:
 23711              		.loc 1 1680 0
 23712 0018 07A9     		add	r1, sp, #28
 23713              	.LVL650:
 23714 001a 02F01E02 		and	r2, r2, #30
 23715 001e FFF7FEFF 		bl	chk_mounted
 23716              		.loc 1 1685 0
 23717 0022 0746     		mov	r7, r0
 23718              	.LVL651:
 23719 0024 08B1     		cbz	r0, .L383
 23720 0026 0346     		mov	r3, r0
 23721 0028 1FE1     		b	.L384
 23722              	.LVL652:
 23723              	.L383:
 23724              		.loc 1 1686 0
 23725 002a 04AB     		add	r3, sp, #16
 23726 002c 0D93     		str	r3, [sp, #52]
 23727              		.loc 1 1687 0
 23728 002e 07A8     		add	r0, sp, #28
 23729 0030 0399     		ldr	r1, [sp, #12]
 23730 0032 FFF7FEFF 		bl	follow_path
 23731 0036 0346     		mov	r3, r0
 23732              	.LVL653:
 23733              		.loc 1 1691 0
 23734 0038 15F01C0F 		tst	r5, #28
 23735 003c 00F0D780 		beq	.L385
 23736              	.LVL654:
 23737              	.LBB48:
 23738              		.loc 1 1694 0
 23739 0040 0028     		cmp	r0, #0
 23740 0042 44D0     		beq	.L386
 23741              	.LVL655:
 23742              		.loc 1 1695 0
 23743 0044 0428     		cmp	r0, #4
 23744 0046 40F01081 		bne	.L384
 23745              	.LBB52:
 23746              	.LBB54:
 23747              		.loc 1 1017 0
 23748 004a 07A8     		add	r0, sp, #28
 23749              	.LVL656:
 23750 004c 4FF00001 		mov	r1, #0
 23751 0050 FFF7FEFF 		bl	dir_seek
 23752              	.LVL657:
 23753              		.loc 1 1018 0
 23754 0054 0346     		mov	r3, r0
 23755              	.LVL658:
 23756 0056 E8B9     		cbnz	r0, .L387
 23757              		.loc 1 1024 0
 23758 0058 07AE     		add	r6, sp, #28
 23759 005a 4FF00108 		mov	r8, #1
 23760              	.L404:
 23761              		.loc 1 1020 0
 23762 005e 0798     		ldr	r0, [sp, #28]
 23763 0060 0B99     		ldr	r1, [sp, #44]
 23764 0062 FFF7FEFF 		bl	move_window
 23765              	.LVL659:
 23766              		.loc 1 1021 0
 23767 0066 0346     		mov	r3, r0
 23768              	.LVL660:
 23769 0068 A0B9     		cbnz	r0, .L387
 23770              		.loc 1 1022 0
 23771 006a 0C9B     		ldr	r3, [sp, #48]
 23772              	.LVL661:
 23773 006c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 23774              	.LVL662:
 23775              		.loc 1 1023 0
 23776 006e D3F10102 		rsbs	r2, r3, #1
 23777 0072 38BF     		it	cc
 23778 0074 0022     		movcc	r2, #0
 23779 0076 E52B     		cmp	r3, #229
 23780 0078 14BF     		ite	ne
 23781 007a 1346     		movne	r3, r2
 23782 007c 42F00103 		orreq	r3, r2, #1
 23783              	.LVL663:
 23784 0080 002B     		cmp	r3, #0
 23785 0082 40F0F680 		bne	.L388
 23786              		.loc 1 1024 0
 23787 0086 3046     		mov	r0, r6
 23788 0088 4146     		mov	r1, r8
 23789 008a FFF7FEFF 		bl	dir_next
 23790              		.loc 1 1025 0
 23791 008e 0346     		mov	r3, r0
 23792              	.LVL664:
 23793 0090 0028     		cmp	r0, #0
 23794 0092 E4D0     		beq	.L404
 23795              	.L387:
 23796              	.LBE54:
 23797              	.LBE52:
 23798              		.loc 1 1697 0
 23799 0094 BBB1     		cbz	r3, .L390
 23800 0096 E8E0     		b	.L384
 23801              	.L406:
 23802              	.LBB51:
 23803              	.LBB53:
 23804              		.loc 1 1032 0
 23805 0098 0C9E     		ldr	r6, [sp, #48]
 23806              	.LVL665:
 23807              		.loc 1 1033 0
 23808 009a 3046     		mov	r0, r6
 23809 009c 4FF00001 		mov	r1, #0
 23810 00a0 4FF02002 		mov	r2, #32
 23811 00a4 FFF7FEFF 		bl	mem_set
 23812              	.LVL666:
 23813              		.loc 1 1034 0
 23814 00a8 3046     		mov	r0, r6
 23815 00aa 0D99     		ldr	r1, [sp, #52]
 23816 00ac 4FF00B02 		mov	r2, #11
 23817 00b0 FFF7FEFF 		bl	mem_cpy
 23818              		.loc 1 1035 0
 23819 00b4 0D9B     		ldr	r3, [sp, #52]
 23820 00b6 DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 23821 00b8 03F01803 		and	r3, r3, #24
 23822 00bc 3373     		strb	r3, [r6, #12]
 23823              		.loc 1 1036 0
 23824 00be 4FF00102 		mov	r2, #1
 23825 00c2 079B     		ldr	r3, [sp, #28]
 23826 00c4 1A71     		strb	r2, [r3, #4]
 23827              	.LVL667:
 23828              	.L390:
 23829              	.LBE53:
 23830              	.LBE51:
 23831              		.loc 1 1699 0
 23832 00c6 0C9E     		ldr	r6, [sp, #48]
 23833              	.LVL668:
 23834              		.loc 1 1723 0
 23835 00c8 45F00805 		orr	r5, r5, #8
 23836              	.LVL669:
 23837 00cc 79E0     		b	.L391
 23838              	.LVL670:
 23839              	.L386:
 23840              		.loc 1 1702 0
 23841 00ce 15F0040F 		tst	r5, #4
 23842              	.LVL671:
 23843 00d2 18BF     		it	ne
 23844 00d4 0823     		movne	r3, #8
 23845              	.LVL672:
 23846 00d6 40F0C880 		bne	.L384
 23847              		.loc 1 1704 0
 23848 00da 0C9E     		ldr	r6, [sp, #48]
 23849              	.LVL673:
 23850              		.loc 1 1705 0
 23851 00dc 002E     		cmp	r6, #0
 23852 00de 00F0BF80 		beq	.L394
 23853 00e2 F37A     		ldrb	r3, [r6, #11]	@ zero_extendqisi2
 23854              	.LVL674:
 23855 00e4 13F0110F 		tst	r3, #17
 23856 00e8 40F0BA80 		bne	.L394
 23857              		.loc 1 1707 0
 23858 00ec 15F0080F 		tst	r5, #8
 23859 00f0 00F08C80 		beq	.L392
 23860              		.loc 1 1708 0
 23861 00f4 3046     		mov	r0, r6
 23862 00f6 B046     		mov	r8, r6
 23863 00f8 3246     		mov	r2, r6
 23864 00fa 3146     		mov	r1, r6
 23865 00fc 10F815AF 		ldrb	sl, [r0, #21]!	@ zero_extendqisi2
 23866 0100 18F8143F 		ldrb	r3, [r8, #20]!	@ zero_extendqisi2
 23867 0104 43EA0A2A 		orr	sl, r3, sl, lsl #8
 23868 0108 12F81BCF 		ldrb	ip, [r2, #27]!	@ zero_extendqisi2
 23869 010c 11F81A3F 		ldrb	r3, [r1, #26]!	@ zero_extendqisi2
 23870 0110 43EA0C2C 		orr	ip, r3, ip, lsl #8
 23871              		.loc 1 1709 0
 23872 0114 4FF00003 		mov	r3, #0
 23873 0118 88F80030 		strb	r3, [r8, #0]
 23874 011c 0370     		strb	r3, [r0, #0]
 23875              		.loc 1 1710 0
 23876 011e 0B70     		strb	r3, [r1, #0]
 23877 0120 1370     		strb	r3, [r2, #0]
 23878              		.loc 1 1711 0
 23879 0122 3377     		strb	r3, [r6, #28]
 23880 0124 7377     		strb	r3, [r6, #29]
 23881 0126 B377     		strb	r3, [r6, #30]
 23882 0128 F377     		strb	r3, [r6, #31]
 23883              		.loc 1 1712 0
 23884 012a 4FF00102 		mov	r2, #1
 23885 012e 079B     		ldr	r3, [sp, #28]
 23886 0130 1A71     		strb	r2, [r3, #4]
 23887              		.loc 1 1713 0
 23888 0132 DDF81C80 		ldr	r8, [sp, #28]
 23889 0136 D8F82C20 		ldr	r2, [r8, #44]
 23890 013a 0292     		str	r2, [sp, #8]
 23891              		.loc 1 1714 0
 23892 013c 5CEA0A4C 		orrs	ip, ip, sl, lsl #16
 23893 0140 CDF804C0 		str	ip, [sp, #4]
 23894 0144 36D0     		beq	.L395
 23895              	.LBB49:
 23896              	.LBB50:
 23897              		.loc 1 436 0
 23898 0146 BCF1010F 		cmp	ip, #1
 23899 014a 40F29D80 		bls	.L396
 23900 014e D8F81C30 		ldr	r3, [r8, #28]
 23901 0152 9C45     		cmp	ip, r3
 23902 0154 80F09880 		bcs	.L396
 23903 0158 E146     		mov	r9, ip
 23904              	.LVL675:
 23905              		.loc 1 446 0
 23906 015a 4FF0000B 		mov	fp, #0
 23907              	.LVL676:
 23908              	.L400:
 23909              		.loc 1 442 0
 23910 015e 4046     		mov	r0, r8
 23911 0160 4946     		mov	r1, r9
 23912 0162 FFF7FEFF 		bl	get_fat
 23913              		.loc 1 443 0
 23914 0166 8246     		mov	sl, r0
 23915              	.LVL677:
 23916 0168 F8B1     		cbz	r0, .L397
 23917              		.loc 1 444 0
 23918 016a 0128     		cmp	r0, #1
 23919 016c 00F08C80 		beq	.L396
 23920              	.LVL678:
 23921              		.loc 1 445 0
 23922 0170 B0F1FF3F 		cmp	r0, #-1
 23923 0174 00F08580 		beq	.L398
 23924              		.loc 1 446 0
 23925 0178 4046     		mov	r0, r8
 23926              	.LVL679:
 23927 017a 4946     		mov	r1, r9
 23928 017c 5A46     		mov	r2, fp
 23929 017e FFF7FEFF 		bl	put_fat
 23930              		.loc 1 447 0
 23931 0182 0346     		mov	r3, r0
 23932              	.LVL680:
 23933 0184 0028     		cmp	r0, #0
 23934 0186 70D1     		bne	.L384
 23935              	.LVL681:
 23936              		.loc 1 448 0
 23937 0188 D8F81030 		ldr	r3, [r8, #16]
 23938              	.LVL682:
 23939 018c B3F1FF3F 		cmp	r3, #-1
 23940              		.loc 1 449 0
 23941 0190 1FBF     		itttt	ne
 23942 0192 0133     		addne	r3, r3, #1
 23943 0194 C8F81030 		strne	r3, [r8, #16]
 23944              		.loc 1 450 0
 23945 0198 0123     		movne	r3, #1
 23946 019a 88F80530 		strbne	r3, [r8, #5]
 23947              		.loc 1 441 0
 23948 019e D8F81C30 		ldr	r3, [r8, #28]
 23949 01a2 9A45     		cmp	sl, r3
 23950 01a4 01D2     		bcs	.L397
 23951              	.LVL683:
 23952 01a6 D146     		mov	r9, sl
 23953 01a8 D9E7     		b	.L400
 23954              	.L397:
 23955              	.LBE50:
 23956              	.LBE49:
 23957              		.loc 1 1717 0
 23958 01aa 019B     		ldr	r3, [sp, #4]
 23959 01ac 03F1FF32 		add	r2, r3, #-1
 23960 01b0 079B     		ldr	r3, [sp, #28]
 23961 01b2 DA60     		str	r2, [r3, #12]
 23962              	.L395:
 23963              		.loc 1 1719 0
 23964 01b4 0798     		ldr	r0, [sp, #28]
 23965 01b6 0299     		ldr	r1, [sp, #8]
 23966 01b8 FFF7FEFF 		bl	move_window
 23967              		.loc 1 1720 0
 23968 01bc 0346     		mov	r3, r0
 23969              	.LVL684:
 23970 01be 0028     		cmp	r0, #0
 23971 01c0 53D1     		bne	.L384
 23972              	.LVL685:
 23973              	.L391:
 23974              		.loc 1 1724 0
 23975 01c2 4FF00003 		mov	r3, #0
 23976              	.LVL686:
 23977 01c6 F372     		strb	r3, [r6, #11]
 23978              		.loc 1 1725 0
 23979 01c8 FFF7FEFF 		bl	get_fattime
 23980              		.loc 1 1726 0
 23981 01cc B073     		strb	r0, [r6, #14]
 23982              	.LVL687:
 23983 01ce C0F30723 		ubfx	r3, r0, #8, #8
 23984 01d2 F373     		strb	r3, [r6, #15]
 23985 01d4 4FEA1043 		lsr	r3, r0, #16
 23986 01d8 3374     		strb	r3, [r6, #16]
 23987 01da 4FEA1060 		lsr	r0, r0, #24
 23988              	.LVL688:
 23989 01de 7074     		strb	r0, [r6, #17]
 23990              		.loc 1 1727 0
 23991 01e0 4FF00102 		mov	r2, #1
 23992 01e4 079B     		ldr	r3, [sp, #28]
 23993 01e6 1A71     		strb	r2, [r3, #4]
 23994              		.loc 1 1728 0
 23995 01e8 45F02005 		orr	r5, r5, #32
 23996              	.LVL689:
 23997 01ec 0EE0     		b	.L392
 23998              	.LVL690:
 23999              	.L385:
 24000              	.LBE48:
 24001              		.loc 1 1734 0
 24002 01ee 0028     		cmp	r0, #0
 24003 01f0 3BD1     		bne	.L384
 24004              	.LVL691:
 24005              		.loc 1 1735 0
 24006 01f2 0C9E     		ldr	r6, [sp, #48]
 24007              	.LVL692:
 24008              		.loc 1 1736 0
 24009 01f4 002E     		cmp	r6, #0
 24010 01f6 36D0     		beq	.L401
 24011 01f8 F37A     		ldrb	r3, [r6, #11]	@ zero_extendqisi2
 24012 01fa 13F0100F 		tst	r3, #16
 24013 01fe 32D1     		bne	.L401
 24014              		.loc 1 1739 0
 24015 0200 15F0020F 		tst	r5, #2
 24016              	.LVL693:
 24017 0204 02D0     		beq	.L392
 24018 0206 13F0010F 		tst	r3, #1
 24019 020a 29D1     		bne	.L394
 24020              	.LVL694:
 24021              	.L392:
 24022              		.loc 1 1742 0
 24023 020c 079B     		ldr	r3, [sp, #28]
 24024 020e DA6A     		ldr	r2, [r3, #44]
 24025 0210 E261     		str	r2, [r4, #28]
 24026              		.loc 1 1743 0
 24027 0212 0C9A     		ldr	r2, [sp, #48]
 24028 0214 2262     		str	r2, [r4, #32]
 24029              		.loc 1 1745 0
 24030 0216 A571     		strb	r5, [r4, #6]
 24031              		.loc 1 1746 0
 24032 0218 717D     		ldrb	r1, [r6, #21]	@ zero_extendqisi2
 24033 021a 327D     		ldrb	r2, [r6, #20]	@ zero_extendqisi2
 24034 021c 42EA0121 		orr	r1, r2, r1, lsl #8
 24035 0220 F07E     		ldrb	r0, [r6, #27]	@ zero_extendqisi2
 24036              	.LVL695:
 24037 0222 B27E     		ldrb	r2, [r6, #26]	@ zero_extendqisi2
 24038 0224 42EA0022 		orr	r2, r2, r0, lsl #8
 24039 0228 42EA0142 		orr	r2, r2, r1, lsl #16
 24040 022c 2261     		str	r2, [r4, #16]
 24041              		.loc 1 1748 0
 24042 022e F17F     		ldrb	r1, [r6, #31]	@ zero_extendqisi2
 24043 0230 B27F     		ldrb	r2, [r6, #30]	@ zero_extendqisi2
 24044 0232 4FEA0242 		lsl	r2, r2, #16
 24045 0236 42EA0162 		orr	r2, r2, r1, lsl #24
 24046 023a 317F     		ldrb	r1, [r6, #28]	@ zero_extendqisi2
 24047 023c 42EA0102 		orr	r2, r2, r1
 24048 0240 717F     		ldrb	r1, [r6, #29]	@ zero_extendqisi2
 24049 0242 42EA0122 		orr	r2, r2, r1, lsl #8
 24050 0246 E260     		str	r2, [r4, #12]
 24051              		.loc 1 1749 0
 24052 0248 4FF00002 		mov	r2, #0
 24053 024c A260     		str	r2, [r4, #8]
 24054 024e 4FF0FF31 		mov	r1, #-1
 24055 0252 E171     		strb	r1, [r4, #7]
 24056              		.loc 1 1750 0
 24057 0254 A261     		str	r2, [r4, #24]
 24058              		.loc 1 1751 0
 24059 0256 2360     		str	r3, [r4, #0]
 24060 0258 DB88     		ldrh	r3, [r3, #6]
 24061 025a A380     		strh	r3, [r4, #4]	@ movhi
 24062 025c 3B46     		mov	r3, r7
 24063              	.LVL696:
 24064              		.loc 1 1753 0
 24065 025e 04E0     		b	.L384
 24066              	.LVL697:
 24067              	.L394:
 24068 0260 4FF00703 		mov	r3, #7
 24069              	.LVL698:
 24070 0264 01E0     		b	.L384
 24071              	.LVL699:
 24072              	.L401:
 24073 0266 4FF00403 		mov	r3, #4
 24074              	.LVL700:
 24075              	.L384:
 24076              		.loc 1 1754 0
 24077 026a 1846     		mov	r0, r3
 24078 026c 0FB0     		add	sp, sp, #60
 24079 026e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 24080              	.LVL701:
 24081              	.L388:
 24082              	.LBB57:
 24083              	.LBB56:
 24084              	.LBB55:
 24085              		.loc 1 1030 0
 24086 0272 0798     		ldr	r0, [sp, #28]
 24087 0274 0B99     		ldr	r1, [sp, #44]
 24088 0276 FFF7FEFF 		bl	move_window
 24089              		.loc 1 1031 0
 24090 027a 0346     		mov	r3, r0
 24091              	.LVL702:
 24092 027c 0028     		cmp	r0, #0
 24093 027e F4D1     		bne	.L384
 24094 0280 0AE7     		b	.L406
 24095              	.LVL703:
 24096              	.L398:
 24097 0282 4FF00103 		mov	r3, #1
 24098              	.LVL704:
 24099 0286 F0E7     		b	.L384
 24100              	.LVL705:
 24101              	.L396:
 24102 0288 4FF00203 		mov	r3, #2
 24103              	.LVL706:
 24104 028c EDE7     		b	.L384
 24105              	.LBE55:
 24106              	.LBE56:
 24107              	.LBE57:
 24108              		.cfi_endproc
 24109              	.LFE52:
 24111 028e 00BF     		.section	.rodata.cstbl.4975,"a",%progbits
 24112              		.align	2
 24113              		.set	.LANCHOR2,. + 0
 24116              	cstbl.4975:
 24117 0000 0080     		.short	-32768
 24118 0002 0040     		.short	16384
 24119 0004 0020     		.short	8192
 24120 0006 0010     		.short	4096
 24121 0008 0008     		.short	2048
 24122 000a 0040     		.short	16384
 24123 000c 0020     		.short	8192
 24124 000e 0010     		.short	4096
 24125 0010 0008     		.short	2048
 24126 0012 0004     		.short	1024
 24127 0014 0002     		.short	512
 24128 0016 0000     		.section	.rodata.sstbl.4974,"a",%progbits
 24129              		.align	2
 24130              		.set	.LANCHOR1,. + 0
 24133              	sstbl.4974:
 24134 0000 00401F00 		.word	2048000
 24135 0004 00A00F00 		.word	1024000
 24136 0008 00D00700 		.word	512000
 24137 000c 00E80300 		.word	256000
 24138 0010 00F40100 		.word	128000
 24139 0014 00FA0000 		.word	64000
 24140 0018 007D0000 		.word	32000
 24141 001c 803E0000 		.word	16000
 24142 0020 401F0000 		.word	8000
 24143 0024 A00F0000 		.word	4000
 24144 0028 00000000 		.word	0
 24145              		.section	.rodata.cvt.3752,"a",%progbits
 24146              		.align	2
 24147              		.set	.LANCHOR3,. + 0
 24150              	cvt.3752:
 24151 0000 80       		.byte	-128
 24152 0001 81       		.byte	-127
 24153 0002 82       		.byte	-126
 24154 0003 83       		.byte	-125
 24155 0004 84       		.byte	-124
 24156 0005 85       		.byte	-123
 24157 0006 86       		.byte	-122
 24158 0007 87       		.byte	-121
 24159 0008 88       		.byte	-120
 24160 0009 89       		.byte	-119
 24161 000a 8A       		.byte	-118
 24162 000b 8B       		.byte	-117
 24163 000c 8C       		.byte	-116
 24164 000d 8D       		.byte	-115
 24165 000e 8E       		.byte	-114
 24166 000f 8F       		.byte	-113
 24167 0010 90       		.byte	-112
 24168 0011 91       		.byte	-111
 24169 0012 92       		.byte	-110
 24170 0013 93       		.byte	-109
 24171 0014 94       		.byte	-108
 24172 0015 95       		.byte	-107
 24173 0016 96       		.byte	-106
 24174 0017 97       		.byte	-105
 24175 0018 98       		.byte	-104
 24176 0019 99       		.byte	-103
 24177 001a AD       		.byte	-83
 24178 001b 9B       		.byte	-101
 24179 001c 8C       		.byte	-116
 24180 001d 9D       		.byte	-99
 24181 001e AE       		.byte	-82
 24182 001f 9F       		.byte	-97
 24183 0020 A0       		.byte	-96
 24184 0021 21       		.byte	33
 24185 0022 A2       		.byte	-94
 24186 0023 A3       		.byte	-93
 24187 0024 A4       		.byte	-92
 24188 0025 A5       		.byte	-91
 24189 0026 A6       		.byte	-90
 24190 0027 A7       		.byte	-89
 24191 0028 A8       		.byte	-88
 24192 0029 A9       		.byte	-87
 24193 002a AA       		.byte	-86
 24194 002b AB       		.byte	-85
 24195 002c AC       		.byte	-84
 24196 002d AD       		.byte	-83
 24197 002e AE       		.byte	-82
 24198 002f AF       		.byte	-81
 24199 0030 B0       		.byte	-80
 24200 0031 B1       		.byte	-79
 24201 0032 B2       		.byte	-78
 24202 0033 B3       		.byte	-77
 24203 0034 B4       		.byte	-76
 24204 0035 B5       		.byte	-75
 24205 0036 B6       		.byte	-74
 24206 0037 B7       		.byte	-73
 24207 0038 B8       		.byte	-72
 24208 0039 B9       		.byte	-71
 24209 003a BA       		.byte	-70
 24210 003b BB       		.byte	-69
 24211 003c BC       		.byte	-68
 24212 003d BD       		.byte	-67
 24213 003e BE       		.byte	-66
 24214 003f BF       		.byte	-65
 24215 0040 C0       		.byte	-64
 24216 0041 C1       		.byte	-63
 24217 0042 C2       		.byte	-62
 24218 0043 C3       		.byte	-61
 24219 0044 C4       		.byte	-60
 24220 0045 C5       		.byte	-59
 24221 0046 C6       		.byte	-58
 24222 0047 C7       		.byte	-57
 24223 0048 C8       		.byte	-56
 24224 0049 C9       		.byte	-55
 24225 004a CA       		.byte	-54
 24226 004b CB       		.byte	-53
 24227 004c CC       		.byte	-52
 24228 004d CD       		.byte	-51
 24229 004e CE       		.byte	-50
 24230 004f CF       		.byte	-49
 24231 0050 D0       		.byte	-48
 24232 0051 D1       		.byte	-47
 24233 0052 D2       		.byte	-46
 24234 0053 D3       		.byte	-45
 24235 0054 D4       		.byte	-44
 24236 0055 D5       		.byte	-43
 24237 0056 D6       		.byte	-42
 24238 0057 D7       		.byte	-41
 24239 0058 D8       		.byte	-40
 24240 0059 D9       		.byte	-39
 24241 005a DA       		.byte	-38
 24242 005b DB       		.byte	-37
 24243 005c DC       		.byte	-36
 24244 005d DD       		.byte	-35
 24245 005e DE       		.byte	-34
 24246 005f DF       		.byte	-33
 24247 0060 C0       		.byte	-64
 24248 0061 C1       		.byte	-63
 24249 0062 C2       		.byte	-62
 24250 0063 C3       		.byte	-61
 24251 0064 C4       		.byte	-60
 24252 0065 C5       		.byte	-59
 24253 0066 C6       		.byte	-58
 24254 0067 C7       		.byte	-57
 24255 0068 C8       		.byte	-56
 24256 0069 C9       		.byte	-55
 24257 006a CA       		.byte	-54
 24258 006b CB       		.byte	-53
 24259 006c CC       		.byte	-52
 24260 006d CD       		.byte	-51
 24261 006e CE       		.byte	-50
 24262 006f CF       		.byte	-49
 24263 0070 D0       		.byte	-48
 24264 0071 D1       		.byte	-47
 24265 0072 D2       		.byte	-46
 24266 0073 D3       		.byte	-45
 24267 0074 D4       		.byte	-44
 24268 0075 D5       		.byte	-43
 24269 0076 D6       		.byte	-42
 24270 0077 F7       		.byte	-9
 24271 0078 D8       		.byte	-40
 24272 0079 D9       		.byte	-39
 24273 007a DA       		.byte	-38
 24274 007b DB       		.byte	-37
 24275 007c DC       		.byte	-36
 24276 007d DD       		.byte	-35
 24277 007e DE       		.byte	-34
 24278 007f 9F       		.byte	-97
 24279              		.section	.rodata.str1.4,"aMS",%progbits,1
 24280              		.align	2
 24281              	.LC0:
 24282 0000 4E4F204E 		.ascii	"NO NAME    FAT     \000"
 24282      414D4520 
 24282      20202046 
 24282      41542020 
 24282      20202000 
 24283              	.LC1:
 24284 0014 4E4F204E 		.ascii	"NO NAME    FAT32   \000"
 24284      414D4520 
 24284      20202046 
 24284      41543332 
 24284      20202000 
 24285              	.LC2:
 24286 0028 20222A2B 		.ascii	" \"*+,[=]|\177\000"
 24286      2C5B3D5D 
 24286      7C7F00
 24287 0033 00       		.section	.bss.Fsid,"aw",%nobits
 24288              		.align	1
 24289              		.set	.LANCHOR4,. + 0
 24292              	Fsid:
 24293 0000 0000     		.space	2
 24294              		.section	.bss.FatFs,"aw",%nobits
 24295              		.align	2
 24296              		.set	.LANCHOR0,. + 0
 24299              	FatFs:
 24300 0000 00000000 		.space	4
 24301              		.text
 24302              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 ff.c
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:18792  .text.mem_cpy:00000000 $t
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:18796  .text.mem_cpy:00000000 mem_cpy
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:18822  .text.mem_set:00000000 $t
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:18826  .text.mem_set:00000000 mem_set
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:18851  .text.clust2sect:00000000 $t
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:18856  .text.clust2sect:00000000 clust2sect
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:18886  .text.f_mount:00000000 $t
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:18891  .text.f_mount:00000000 f_mount
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:24296  .bss.FatFs:00000000 .LANCHOR0
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:18938  .text.f_mkfs:00000000 $t
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:18943  .text.f_mkfs:00000000 f_mkfs
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:24130  .rodata.sstbl.4974:00000000 .LANCHOR1
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:24113  .rodata.cstbl.4975:00000000 .LANCHOR2
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:24281  .rodata.str1.4:00000000 .LC0
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:24283  .rodata.str1.4:00000014 .LC1
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:19788  .text.validate:00000000 $t
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:19792  .text.validate:00000000 validate
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:19831  .text.move_window:00000000 $t
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:19835  .text.move_window:00000000 move_window
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:19936  .text.f_sync:00000000 $t
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:19941  .text.f_sync:00000000 f_sync
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:20126  .text.f_close:00000000 $t
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:20131  .text.f_close:00000000 f_close
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:20161  .text.put_fat:00000000 $t
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:20166  .text.put_fat:00000000 put_fat
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:20340  .text.get_fat:00000000 $t
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:20345  .text.get_fat:00000000 get_fat
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:20476  .text.dir_seek:00000000 $t
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:20480  .text.dir_seek:00000000 dir_seek
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:20614  .text.create_chain:00000000 $t
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:20618  .text.create_chain:00000000 create_chain
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:20768  .text.f_lseek:00000000 $t
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:20773  .text.f_lseek:00000000 f_lseek
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:21054  .text.dir_next:00000000 $t
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:21058  .text.dir_next:00000000 dir_next
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:21254  .text.f_readdir:00000000 $t
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:21259  .text.f_readdir:00000000 f_readdir
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:21541  .text.follow_path:00000000 $t
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:21545  .text.follow_path:00000000 follow_path
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:24147  .rodata.cvt.3752:00000000 .LANCHOR3
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:24285  .rodata.str1.4:00000028 .LC2
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:21928  .text.f_write:00000000 $t
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:21933  .text.f_write:00000000 f_write
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:22271  .text.f_putc:00000000 $t
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:22276  .text.f_putc:00000000 f_putc
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:22330  .text.f_puts:00000000 $t
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:22335  .text.f_puts:00000000 f_puts
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:22386  .text.f_printf:00000000 $t
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:22391  .text.f_printf:00000000 f_printf
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:22754  .text.f_read:00000000 $t
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:22759  .text.f_read:00000000 f_read
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:23025  .text.f_gets:00000000 $t
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:23030  .text.f_gets:00000000 f_gets
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:23111  .text.check_fs:00000000 $t
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:23115  .text.check_fs:00000000 check_fs
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:23190  .text.chk_mounted:00000000 $t
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:23195  .text.chk_mounted:00000000 chk_mounted
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:24289  .bss.Fsid:00000000 .LANCHOR4
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:23577  .text.f_opendir:00000000 $t
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:23582  .text.f_opendir:00000000 f_opendir
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:23674  .text.f_open:00000000 $t
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:23679  .text.f_open:00000000 f_open
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:24112  .rodata.cstbl.4975:00000000 $d
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:24116  .rodata.cstbl.4975:00000000 cstbl.4975
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:24129  .rodata.sstbl.4974:00000000 $d
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:24133  .rodata.sstbl.4974:00000000 sstbl.4974
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:24146  .rodata.cvt.3752:00000000 $d
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:24150  .rodata.cvt.3752:00000000 cvt.3752
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:24280  .rodata.str1.4:00000000 $d
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:24288  .bss.Fsid:00000000 $d
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:24292  .bss.Fsid:00000000 Fsid
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:24295  .bss.FatFs:00000000 $d
C:\Users\user\AppData\Local\Temp\ccfke8KX.s:24299  .bss.FatFs:00000000 FatFs
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
disk_initialize
disk_ioctl
disk_write
get_fattime
disk_status
disk_read
