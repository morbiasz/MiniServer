   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"ip_arp_udp_tcp.c"
  23              	.Ltext0:
  24              		.file 1 "../SERVER/tcpip/ip_arp_udp_tcp.c"
 19923              		.align	2
 19924              		.global	checksum
 19925              		.thumb
 19926              		.thumb_func
 19928              	checksum:
 19929              	.LFB29:
   1:../SERVER/tcpip/ip_arp_udp_tcp.c **** /*********************************************
   2:../SERVER/tcpip/ip_arp_udp_tcp.c ****  * vim:sw=8:ts=8:si:et
   3:../SERVER/tcpip/ip_arp_udp_tcp.c ****  * To use the above modeline in vim you must have "set modeline" in your .vimrc
   4:../SERVER/tcpip/ip_arp_udp_tcp.c ****  *
   5:../SERVER/tcpip/ip_arp_udp_tcp.c ****  * Author: Guido Socher 
   6:../SERVER/tcpip/ip_arp_udp_tcp.c ****  * Copyright:LGPL V2
   7:../SERVER/tcpip/ip_arp_udp_tcp.c ****  * See http://www.gnu.org/licenses/old-licenses/lgpl-2.0.html
   8:../SERVER/tcpip/ip_arp_udp_tcp.c ****  *
   9:../SERVER/tcpip/ip_arp_udp_tcp.c ****  * IP, Arp, UDP and TCP functions.
  10:../SERVER/tcpip/ip_arp_udp_tcp.c ****  *
  11:../SERVER/tcpip/ip_arp_udp_tcp.c ****  * The TCP implementation uses some size optimisations which are valid
  12:../SERVER/tcpip/ip_arp_udp_tcp.c ****  * only if all data can be sent in one single packet. This is however
  13:../SERVER/tcpip/ip_arp_udp_tcp.c ****  * not a big limitation for a microcontroller as you will anyhow use
  14:../SERVER/tcpip/ip_arp_udp_tcp.c ****  * small web-pages. The web server must send the entire web page in one
  15:../SERVER/tcpip/ip_arp_udp_tcp.c ****  * packet. The client "web browser" as implemented here can also receive
  16:../SERVER/tcpip/ip_arp_udp_tcp.c ****  * large pages.
  17:../SERVER/tcpip/ip_arp_udp_tcp.c ****  *
  18:../SERVER/tcpip/ip_arp_udp_tcp.c ****  * Chip type           : ATMEGA88/168/328/644 with ENC28J60
  19:../SERVER/tcpip/ip_arp_udp_tcp.c ****  *********************************************/
  20:../SERVER/tcpip/ip_arp_udp_tcp.c **** // http://www.nongnu.org/avr-libc/changes-1.8.html:
  21:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
  22:../SERVER/tcpip/ip_arp_udp_tcp.c **** #include <string.h>
  23:../SERVER/tcpip/ip_arp_udp_tcp.c **** #include <ctype.h>
  24:../SERVER/tcpip/ip_arp_udp_tcp.c **** #include <stdlib.h>
  25:../SERVER/tcpip/ip_arp_udp_tcp.c **** #include "net.h"
  26:../SERVER/tcpip/ip_arp_udp_tcp.c **** #include "enc28j60.h"
  27:../SERVER/tcpip/ip_arp_udp_tcp.c **** #include "ip_config.h"
  28:../SERVER/tcpip/ip_arp_udp_tcp.c **** #include "ip_arp_udp_tcp.h"
  29:../SERVER/tcpip/ip_arp_udp_tcp.c **** #include <conversion.h>
  30:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
  31:../SERVER/tcpip/ip_arp_udp_tcp.c **** static uint8_t macaddr[6];
  32:../SERVER/tcpip/ip_arp_udp_tcp.c **** static uint8_t ipaddr[4]={0,0,0,0};
  33:../SERVER/tcpip/ip_arp_udp_tcp.c **** static uint8_t seqnum=0xa; // my initial tcp sequence number
  34:../SERVER/tcpip/ip_arp_udp_tcp.c **** static void (*icmp_callback)(uint8_t *ip);
  35:../SERVER/tcpip/ip_arp_udp_tcp.c **** //
  36:../SERVER/tcpip/ip_arp_udp_tcp.c **** #if defined (NTP_client) || defined (UDP_client) || defined (TCP_client) || defined (PING_client)
  37:../SERVER/tcpip/ip_arp_udp_tcp.c **** #define ARP_MAC_resolver_client 1
  38:../SERVER/tcpip/ip_arp_udp_tcp.c **** #define ALL_clients 1
  39:../SERVER/tcpip/ip_arp_udp_tcp.c **** #endif
  40:../SERVER/tcpip/ip_arp_udp_tcp.c **** #if defined (WWW_client) || defined (TCP_client) 
  41:../SERVER/tcpip/ip_arp_udp_tcp.c **** // just lower byte, the upper byte is TCPCLIENT_SRC_PORT_H:
  42:../SERVER/tcpip/ip_arp_udp_tcp.c **** static uint8_t tcpclient_src_port_l=1; 
  43:../SERVER/tcpip/ip_arp_udp_tcp.c **** static uint8_t tcp_fd=0; // a file descriptor, will be encoded into the port
  44:../SERVER/tcpip/ip_arp_udp_tcp.c **** static uint8_t tcp_otherside_ip[4];
  45:../SERVER/tcpip/ip_arp_udp_tcp.c **** static uint8_t tcp_dst_mac[6]; // normally the gateway via which we want to send
  46:../SERVER/tcpip/ip_arp_udp_tcp.c **** static uint8_t tcp_client_state=0;
  47:../SERVER/tcpip/ip_arp_udp_tcp.c **** static uint16_t tcp_client_port=0;
  48:../SERVER/tcpip/ip_arp_udp_tcp.c **** // This function will be called if we ever get a result back from the
  49:../SERVER/tcpip/ip_arp_udp_tcp.c **** // TCP connection to the sever:
  50:../SERVER/tcpip/ip_arp_udp_tcp.c **** // close_connection= your_client_tcp_result_callback(uint8_t fd, uint8_t statuscode,uint16_t data_s
  51:../SERVER/tcpip/ip_arp_udp_tcp.c **** // statuscode=0 means the buffer has valid data
  52:../SERVER/tcpip/ip_arp_udp_tcp.c **** static uint8_t (*client_tcp_result_callback)(uint8_t,uint8_t,uint16_t,uint16_t);
  53:../SERVER/tcpip/ip_arp_udp_tcp.c **** // len_of_data_filled_in=your_client_tcp_datafill_callback(uint8_t fd){...your code}
  54:../SERVER/tcpip/ip_arp_udp_tcp.c **** static uint16_t (*client_tcp_datafill_callback)(uint8_t);
  55:../SERVER/tcpip/ip_arp_udp_tcp.c **** #endif
  56:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
  57:../SERVER/tcpip/ip_arp_udp_tcp.c **** #define TCPCLIENT_SRC_PORT_H 11
  58:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
  59:../SERVER/tcpip/ip_arp_udp_tcp.c **** #if defined (WWW_client)
  60:../SERVER/tcpip/ip_arp_udp_tcp.c **** // WWW_client uses TCP_client
  61:../SERVER/tcpip/ip_arp_udp_tcp.c **** #define TCP_client 1
  62:../SERVER/tcpip/ip_arp_udp_tcp.c **** static uint8_t www_fd=0;
  63:../SERVER/tcpip/ip_arp_udp_tcp.c **** static uint8_t browsertype=0; // 0 = get, 1 = post
  64:../SERVER/tcpip/ip_arp_udp_tcp.c **** static void (*client_browser_callback)(uint16_t,uint16_t,uint16_t); // the fields are: uint16_t web
  65:../SERVER/tcpip/ip_arp_udp_tcp.c **** static const char *client_additionalheaderline;
  66:../SERVER/tcpip/ip_arp_udp_tcp.c **** static char *client_postval;
  67:../SERVER/tcpip/ip_arp_udp_tcp.c **** static const char *client_urlbuf;
  68:../SERVER/tcpip/ip_arp_udp_tcp.c **** static const char *client_urlbuf_var;
  69:../SERVER/tcpip/ip_arp_udp_tcp.c **** static const char *client_hoststr;
  70:../SERVER/tcpip/ip_arp_udp_tcp.c **** static uint8_t *bufptr=0; // ugly workaround for backward compatibility
  71:../SERVER/tcpip/ip_arp_udp_tcp.c **** #endif
  72:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
  73:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
  74:../SERVER/tcpip/ip_arp_udp_tcp.c **** #ifdef ARP_MAC_resolver_client
  75:../SERVER/tcpip/ip_arp_udp_tcp.c **** // This function will be called if we ever get a result back from the
  76:../SERVER/tcpip/ip_arp_udp_tcp.c **** // the arp request we sent out.
  77:../SERVER/tcpip/ip_arp_udp_tcp.c **** void (*client_arp_result_callback)(uint8_t*,uint8_t,uint8_t*);
  78:../SERVER/tcpip/ip_arp_udp_tcp.c **** static int16_t arp_delaycnt=1;
  79:../SERVER/tcpip/ip_arp_udp_tcp.c **** static uint8_t arpip[4];  // IP to find via arp
  80:../SERVER/tcpip/ip_arp_udp_tcp.c **** static uint8_t arpip_state=0; // 0 at poweron, 1=req sent no answer yet, 2=have mac, 8=ready to acc
  81:../SERVER/tcpip/ip_arp_udp_tcp.c **** static uint8_t arp_reference_number=0;
  82:../SERVER/tcpip/ip_arp_udp_tcp.c **** #define WGW_INITIAL_ARP 1
  83:../SERVER/tcpip/ip_arp_udp_tcp.c **** #define WGW_HAVE_MAC 2
  84:../SERVER/tcpip/ip_arp_udp_tcp.c **** #define WGW_ACCEPT_ARP_REPLY 8
  85:../SERVER/tcpip/ip_arp_udp_tcp.c **** #endif
  86:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
  87:../SERVER/tcpip/ip_arp_udp_tcp.c **** #ifdef WWW_server
  88:../SERVER/tcpip/ip_arp_udp_tcp.c **** static uint8_t wwwport_l=80; // server port
  89:../SERVER/tcpip/ip_arp_udp_tcp.c **** static uint8_t wwwport_h=0;  // Note: never use same as TCPCLIENT_SRC_PORT_H
  90:../SERVER/tcpip/ip_arp_udp_tcp.c **** static uint16_t info_data_len=0;
  91:../SERVER/tcpip/ip_arp_udp_tcp.c **** #endif
  92:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
  93:../SERVER/tcpip/ip_arp_udp_tcp.c **** #if defined (ALL_clients)
  94:../SERVER/tcpip/ip_arp_udp_tcp.c **** static uint8_t ipnetmask[4]={255,255,255,255};
  95:../SERVER/tcpip/ip_arp_udp_tcp.c **** static uint8_t ipid=0x2; // IP-identification, it works as well if you do not change it but it is b
  96:../SERVER/tcpip/ip_arp_udp_tcp.c **** const char iphdr[] ={0x45,0,0,0x82,0,0,0x40,0,0x20}; // 0x82 is the total len on ip, 0x20 is ttl (t
  97:../SERVER/tcpip/ip_arp_udp_tcp.c **** #endif
  98:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
  99:../SERVER/tcpip/ip_arp_udp_tcp.c **** #define CLIENTMSS 750
 100:../SERVER/tcpip/ip_arp_udp_tcp.c **** #define TCP_DATA_START ((uint16_t)TCP_SRC_PORT_H_P+(buf[TCP_HEADER_LEN_P]>>4)*4)
 101:../SERVER/tcpip/ip_arp_udp_tcp.c **** const char arpreqhdr[] ={0,1,8,0,6,4,0,1};
 102:../SERVER/tcpip/ip_arp_udp_tcp.c **** #ifdef NTP_client
 103:../SERVER/tcpip/ip_arp_udp_tcp.c **** const char ntpreqhdr[] ={0xe3,0,4,0xfa,0,1,0,0,0,1};
 104:../SERVER/tcpip/ip_arp_udp_tcp.c **** #endif
 105:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
 106:../SERVER/tcpip/ip_arp_udp_tcp.c **** // The Ip checksum is calculated over the ip header only starting
 107:../SERVER/tcpip/ip_arp_udp_tcp.c **** // with the header length field and a total length of 20 bytes
 108:../SERVER/tcpip/ip_arp_udp_tcp.c **** // unitl ip.dst
 109:../SERVER/tcpip/ip_arp_udp_tcp.c **** // You must set the IP checksum field to zero before you start
 110:../SERVER/tcpip/ip_arp_udp_tcp.c **** // the calculation.
 111:../SERVER/tcpip/ip_arp_udp_tcp.c **** // len for ip is 20.
 112:../SERVER/tcpip/ip_arp_udp_tcp.c **** //
 113:../SERVER/tcpip/ip_arp_udp_tcp.c **** // For UDP/TCP we do not make up the required pseudo header. Instead we 
 114:../SERVER/tcpip/ip_arp_udp_tcp.c **** // use the ip.src and ip.dst fields of the real packet:
 115:../SERVER/tcpip/ip_arp_udp_tcp.c **** // The udp checksum calculation starts with the ip.src field
 116:../SERVER/tcpip/ip_arp_udp_tcp.c **** // Ip.src=4bytes,Ip.dst=4 bytes,Udp header=8bytes + data length=16+len
 117:../SERVER/tcpip/ip_arp_udp_tcp.c **** // In other words the len here is 8 + length over which you actually
 118:../SERVER/tcpip/ip_arp_udp_tcp.c **** // want to calculate the checksum.
 119:../SERVER/tcpip/ip_arp_udp_tcp.c **** // You must set the checksum field to zero before you start
 120:../SERVER/tcpip/ip_arp_udp_tcp.c **** // the calculation.
 121:../SERVER/tcpip/ip_arp_udp_tcp.c **** // The same algorithm is also used for udp and tcp checksums.
 122:../SERVER/tcpip/ip_arp_udp_tcp.c **** // len for udp is: 8 + 8 + data length
 123:../SERVER/tcpip/ip_arp_udp_tcp.c **** // len for tcp is: 4+4 + 20 + option len + data length
 124:../SERVER/tcpip/ip_arp_udp_tcp.c **** //
 125:../SERVER/tcpip/ip_arp_udp_tcp.c **** // For more information on how this algorithm works see:
 126:../SERVER/tcpip/ip_arp_udp_tcp.c **** // http://www.netfor2.com/checksum.html
 127:../SERVER/tcpip/ip_arp_udp_tcp.c **** // http://www.msc.uky.edu/ken/cs471/notes/chap3.htm
 128:../SERVER/tcpip/ip_arp_udp_tcp.c **** // The RFC has also a C code example: http://www.faqs.org/rfcs/rfc1071.html
 129:../SERVER/tcpip/ip_arp_udp_tcp.c **** uint16_t checksum(uint8_t *buf, uint16_t len,uint8_t type){
 19930              		.loc 1 129 0
 19931              		.cfi_startproc
 19932              		@ args = 0, pretend = 0, frame = 0
 19933              		@ frame_needed = 0, uses_anonymous_args = 0
 19934              		@ link register save eliminated.
 19935              	.LVL0:
 19936 0000 70B4     		push	{r4, r5, r6}
 19937              	.LCFI0:
 19938              		.cfi_def_cfa_offset 12
 130:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // type 0=ip , icmp
 131:../SERVER/tcpip/ip_arp_udp_tcp.c ****         //      1=udp
 132:../SERVER/tcpip/ip_arp_udp_tcp.c ****         //      2=tcp
 133:../SERVER/tcpip/ip_arp_udp_tcp.c ****         uint32_t sum = 0;
 134:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
 135:../SERVER/tcpip/ip_arp_udp_tcp.c ****         //if(type==0){    
 136:../SERVER/tcpip/ip_arp_udp_tcp.c ****         //        // do not add anything, standard IP checksum as described above
 137:../SERVER/tcpip/ip_arp_udp_tcp.c ****         //        // Usable for ICMP and IP header
 138:../SERVER/tcpip/ip_arp_udp_tcp.c ****         //}
 139:../SERVER/tcpip/ip_arp_udp_tcp.c ****         if(type==1){
 19939              		.loc 1 139 0
 19940 0002 012A     		cmp	r2, #1
 140:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 sum+=IP_PROTO_UDP_V; // protocol udp
 141:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 // the length here is the length of udp (data+header len)
 142:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 // =length given to this function - (IP.scr+IP.dst length)
 143:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 sum+=len-8; // = real udp len
 19941              		.loc 1 143 0
 19942 0004 08BF     		it	eq
 19943 0006 01F10903 		addeq	r3, r1, #9
 19944              	.LVL1:
 19945              		.loc 1 139 0
 19946 000a 03D0     		beq	.L3
 19947              		.cfi_offset 6, -4
 19948              		.cfi_offset 5, -8
 19949              		.cfi_offset 4, -12
 144:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 145:../SERVER/tcpip/ip_arp_udp_tcp.c ****         if(type==2){
 19950              		.loc 1 145 0
 19951 000c 022A     		cmp	r2, #2
 19952 000e 14BF     		ite	ne
 19953 0010 0023     		movne	r3, #0
 146:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 sum+=IP_PROTO_TCP_V; 
 147:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 // the length here is the length of tcp (data+header len)
 148:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 // =length given to this function - (IP.scr+IP.dst length)
 149:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 sum+=len-8; // = real tcp len
 19954              		.loc 1 149 0
 19955 0012 8B1E     		subeq	r3, r1, #2
 19956              	.L3:
 150:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 151:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // build the sum of 16bit words
 152:../SERVER/tcpip/ip_arp_udp_tcp.c ****         while(len >1){
 19957              		.loc 1 152 0
 19958 0014 0129     		cmp	r1, #1
 19959 0016 19D9     		bls	.L5
 19960              		.loc 1 129 0
 19961 0018 A1F10201 		sub	r1, r1, #2
 19962              	.LVL2:
 19963 001c 89B2     		uxth	r1, r1
 19964 001e 4FEA5106 		lsr	r6, r1, #1
 19965 0022 00F10205 		add	r5, r0, #2
 19966 0026 05EB4605 		add	r5, r5, r6, lsl #1
 19967 002a 0246     		mov	r2, r0
 19968              	.LVL3:
 19969              	.L6:
 153:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 sum += 0xFFFF & (((uint32_t)*buf<<8)|*(buf+1));
 19970              		.loc 1 153 0
 19971 002c 1478     		ldrb	r4, [r2, #0]	@ zero_extendqisi2
 19972 002e 92F801C0 		ldrb	ip, [r2, #1]	@ zero_extendqisi2
 19973 0032 4CEA042C 		orr	ip, ip, r4, lsl #8
 19974 0036 6344     		add	r3, r3, ip
 154:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf+=2;
 19975              		.loc 1 154 0
 19976 0038 02F10202 		add	r2, r2, #2
 19977              		.loc 1 152 0
 19978 003c AA42     		cmp	r2, r5
 19979 003e F5D1     		bne	.L6
 19980 0040 06F10106 		add	r6, r6, #1
 19981 0044 00EB4600 		add	r0, r0, r6, lsl #1
 19982              	.LVL4:
 19983 0048 01F00101 		and	r1, r1, #1
 19984              	.LVL5:
 19985              	.L5:
 155:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 len-=2;
 156:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 157:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // if there is a byte left then add it (padded with zero)
 158:../SERVER/tcpip/ip_arp_udp_tcp.c ****         if (len){
 19986              		.loc 1 158 0
 19987 004c 11B1     		cbz	r1, .L7
 159:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 sum += ((uint32_t)(0xFF & *buf))<<8;
 19988              		.loc 1 159 0
 19989 004e 0278     		ldrb	r2, [r0, #0]	@ zero_extendqisi2
 19990              	.LVL6:
 19991 0050 03EB0223 		add	r3, r3, r2, lsl #8
 19992              	.LVL7:
 19993              	.L7:
 160:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 161:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // now calculate the sum over the bytes in the sum
 162:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // until the result is only 16bit long
 163:../SERVER/tcpip/ip_arp_udp_tcp.c ****         while (sum>>16){
 19994              		.loc 1 163 0
 19995 0054 1A0C     		lsrs	r2, r3, #16
 19996              	.LVL8:
 19997 0056 03D0     		beq	.L8
 19998              	.L11:
 164:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 sum = (sum & 0xFFFF)+(sum >> 16);
 19999              		.loc 1 164 0
 20000 0058 9BB2     		uxth	r3, r3
 20001              	.LVL9:
 20002 005a 1344     		add	r3, r3, r2
 20003              	.LVL10:
 20004              		.loc 1 163 0
 20005 005c 1A0C     		lsrs	r2, r3, #16
 20006 005e FBD1     		bne	.L11
 20007              	.L8:
 20008 0060 6FEA0303 		mvn	r3, r3
 20009              	.LVL11:
 165:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 166:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // build 1's complement:
 167:../SERVER/tcpip/ip_arp_udp_tcp.c ****         return( (uint16_t) sum ^ 0xFFFF);
 168:../SERVER/tcpip/ip_arp_udp_tcp.c **** }
 20010              		.loc 1 168 0
 20011 0064 98B2     		uxth	r0, r3
 20012              	.LVL12:
 20013 0066 70BC     		pop	{r4, r5, r6}
 20014 0068 7047     		bx	lr
 20015              		.cfi_endproc
 20016              	.LFE29:
 20018 006a 00BF     		.section	.text.client_ifconfig,"ax",%progbits
 20019              		.align	2
 20020              		.global	client_ifconfig
 20021              		.thumb
 20022              		.thumb_func
 20024              	client_ifconfig:
 20025              	.LFB31:
 169:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
 170:../SERVER/tcpip/ip_arp_udp_tcp.c **** void init_mac(uint8_t *mymac){
 171:../SERVER/tcpip/ip_arp_udp_tcp.c ****         if (mymac){
 172:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 memcpy(macaddr,mymac,6);
 173:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 174:../SERVER/tcpip/ip_arp_udp_tcp.c **** }
 175:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
 176:../SERVER/tcpip/ip_arp_udp_tcp.c **** #if defined (ALL_clients)
 177:../SERVER/tcpip/ip_arp_udp_tcp.c **** void client_ifconfig(uint8_t *ip,uint8_t *netmask)
 178:../SERVER/tcpip/ip_arp_udp_tcp.c **** {
 20026              		.loc 1 178 0
 20027              		.cfi_startproc
 20028              		@ args = 0, pretend = 0, frame = 0
 20029              		@ frame_needed = 0, uses_anonymous_args = 0
 20030              		@ link register save eliminated.
 20031              	.LVL13:
 179:../SERVER/tcpip/ip_arp_udp_tcp.c ****         uint8_t i;
 180:../SERVER/tcpip/ip_arp_udp_tcp.c ****         if (ip){
 20032              		.loc 1 180 0
 20033 0000 0346     		mov	r3, r0
 20034 0002 60B1     		cbz	r0, .L15
 20035 0004 4FF00002 		mov	r2, #0
 181:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 i=0;while(i<4){ipaddr[i]=ip[i];i++;}
 20036              		.loc 1 181 0
 20037 0008 40F2000C 		movw	ip, #:lower16:.LANCHOR0
 20038 000c C0F2000C 		movt	ip, #:upper16:.LANCHOR0
 20039              	.L16:
 20040 0010 985C     		ldrb	r0, [r3, r2]	@ zero_extendqisi2
 20041              	.LVL14:
 20042 0012 0CF80200 		strb	r0, [ip, r2]
 20043 0016 02F10102 		add	r2, r2, #1
 20044 001a 042A     		cmp	r2, #4
 20045 001c F8D1     		bne	.L16
 20046              	.LVL15:
 20047              	.L15:
 182:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 183:../SERVER/tcpip/ip_arp_udp_tcp.c ****         if (netmask){
 20048              		.loc 1 183 0
 20049 001e 59B1     		cbz	r1, .L19
 20050 0020 4FF00003 		mov	r3, #0
 20051              	.LVL16:
 184:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 i=0;while(i<4){ipnetmask[i]=netmask[i];i++;}
 20052              		.loc 1 184 0
 20053 0024 40F20000 		movw	r0, #:lower16:.LANCHOR1
 20054              	.LVL17:
 20055 0028 C0F20000 		movt	r0, #:upper16:.LANCHOR1
 20056              	.L18:
 20057 002c CA5C     		ldrb	r2, [r1, r3]	@ zero_extendqisi2
 20058 002e C254     		strb	r2, [r0, r3]
 20059 0030 03F10103 		add	r3, r3, #1
 20060 0034 042B     		cmp	r3, #4
 20061 0036 F9D1     		bne	.L18
 20062              	.LVL18:
 20063              	.L19:
 20064 0038 7047     		bx	lr
 20065              		.cfi_endproc
 20066              	.LFE31:
 20068 003a 00BF     		.section	.text.route_via_gw,"ax",%progbits
 20069              		.align	2
 20070              		.global	route_via_gw
 20071              		.thumb
 20072              		.thumb_func
 20074              	route_via_gw:
 20075              	.LFB32:
 185:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 186:../SERVER/tcpip/ip_arp_udp_tcp.c **** }
 187:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
 188:../SERVER/tcpip/ip_arp_udp_tcp.c **** // returns 1 if destip must be routed via the GW. Returns 0 if destip is on the local LAN
 189:../SERVER/tcpip/ip_arp_udp_tcp.c **** uint8_t route_via_gw(uint8_t *destip)
 190:../SERVER/tcpip/ip_arp_udp_tcp.c **** {
 20076              		.loc 1 190 0
 20077              		.cfi_startproc
 20078              		@ args = 0, pretend = 0, frame = 0
 20079              		@ frame_needed = 0, uses_anonymous_args = 0
 20080              		@ link register save eliminated.
 20081              	.LVL19:
 20082 0000 10B4     		push	{r4}
 20083              	.LCFI1:
 20084              		.cfi_def_cfa_offset 4
 191:../SERVER/tcpip/ip_arp_udp_tcp.c **** 	uint8_t i=0;
 192:../SERVER/tcpip/ip_arp_udp_tcp.c **** 	while(i<4){
 193:../SERVER/tcpip/ip_arp_udp_tcp.c **** 		if ((destip[i] & ipnetmask[i]) != (ipaddr[i] & ipnetmask[i])){
 20085              		.loc 1 193 0
 20086 0002 40F20003 		movw	r3, #:lower16:.LANCHOR0
 20087 0006 C0F20003 		movt	r3, #:upper16:.LANCHOR0
 20088 000a 0178     		ldrb	r1, [r0, #0]	@ zero_extendqisi2
 20089 000c 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 20090 000e 40F20003 		movw	r3, #:lower16:.LANCHOR1
 20091 0012 C0F20003 		movt	r3, #:upper16:.LANCHOR1
 20092 0016 81EA0202 		eor	r2, r1, r2
 20093 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 20094 001c 1342     		tst	r3, r2
 20095 001e 19D1     		bne	.L23
 20096              		.cfi_offset 4, -4
 20097 0020 4FF00103 		mov	r3, #1
 20098 0024 40F20001 		movw	r1, #:lower16:.LANCHOR0
 20099 0028 C0F20001 		movt	r1, #:upper16:.LANCHOR0
 20100 002c 40F20002 		movw	r2, #:lower16:.LANCHOR1
 20101 0030 C0F20002 		movt	r2, #:upper16:.LANCHOR1
 20102              	.L24:
 20103 0034 CC5C     		ldrb	r4, [r1, r3]	@ zero_extendqisi2
 20104 0036 10F803C0 		ldrb	ip, [r0, r3]	@ zero_extendqisi2
 20105 003a 84EA0C0C 		eor	ip, r4, ip
 20106 003e D45C     		ldrb	r4, [r2, r3]	@ zero_extendqisi2
 20107 0040 14EA0C0F 		tst	r4, ip
 20108 0044 06D1     		bne	.L23
 20109 0046 03F10103 		add	r3, r3, #1
 20110              		.loc 1 192 0
 20111 004a 042B     		cmp	r3, #4
 20112 004c F2D1     		bne	.L24
 20113 004e 4FF00000 		mov	r0, #0
 20114              	.LVL20:
 20115 0052 01E0     		b	.L25
 20116              	.LVL21:
 20117              	.L23:
 20118 0054 4FF00100 		mov	r0, #1
 20119              	.LVL22:
 20120              	.L25:
 194:../SERVER/tcpip/ip_arp_udp_tcp.c **** 			return(1);
 195:../SERVER/tcpip/ip_arp_udp_tcp.c **** 		}
 196:../SERVER/tcpip/ip_arp_udp_tcp.c **** 		i++;
 197:../SERVER/tcpip/ip_arp_udp_tcp.c **** 	}
 198:../SERVER/tcpip/ip_arp_udp_tcp.c **** 	return(0);
 199:../SERVER/tcpip/ip_arp_udp_tcp.c **** }
 20121              		.loc 1 199 0
 20122 0058 10BC     		pop	{r4}
 20123 005a 7047     		bx	lr
 20124              		.cfi_endproc
 20125              	.LFE32:
 20127              		.section	.text.check_ip_message_is_from,"ax",%progbits
 20128              		.align	2
 20129              		.global	check_ip_message_is_from
 20130              		.thumb
 20131              		.thumb_func
 20133              	check_ip_message_is_from:
 20134              	.LFB33:
 200:../SERVER/tcpip/ip_arp_udp_tcp.c **** #endif
 201:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
 202:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
 203:../SERVER/tcpip/ip_arp_udp_tcp.c **** uint8_t check_ip_message_is_from(uint8_t *buf,uint8_t *ip)
 204:../SERVER/tcpip/ip_arp_udp_tcp.c **** {
 20135              		.loc 1 204 0
 20136              		.cfi_startproc
 20137              		@ args = 0, pretend = 0, frame = 0
 20138              		@ frame_needed = 0, uses_anonymous_args = 0
 20139              		@ link register save eliminated.
 20140              	.LVL23:
 205:../SERVER/tcpip/ip_arp_udp_tcp.c ****         uint8_t i=0;
 206:../SERVER/tcpip/ip_arp_udp_tcp.c ****         while(i<4){
 207:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 if(buf[IP_SRC_P+i]!=ip[i]){
 20141              		.loc 1 207 0
 20142 0000 827E     		ldrb	r2, [r0, #26]	@ zero_extendqisi2
 20143 0002 0B78     		ldrb	r3, [r1, #0]	@ zero_extendqisi2
 20144 0004 9A42     		cmp	r2, r3
 20145 0006 0FD1     		bne	.L29
 20146 0008 4FF00103 		mov	r3, #1
 20147              	.L30:
 20148 000c 00EB0302 		add	r2, r0, r3
 20149 0010 92F81AC0 		ldrb	ip, [r2, #26]	@ zero_extendqisi2
 20150 0014 CA5C     		ldrb	r2, [r1, r3]	@ zero_extendqisi2
 20151 0016 9445     		cmp	ip, r2
 20152 0018 06D1     		bne	.L29
 20153 001a 03F10103 		add	r3, r3, #1
 20154              		.loc 1 206 0
 20155 001e 042B     		cmp	r3, #4
 20156 0020 F4D1     		bne	.L30
 20157 0022 4FF00100 		mov	r0, #1
 20158              	.LVL24:
 20159 0026 7047     		bx	lr
 20160              	.LVL25:
 20161              	.L29:
 20162 0028 4FF00000 		mov	r0, #0
 20163              	.LVL26:
 208:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         return(0);
 209:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 }
 210:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 i++;
 211:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 212:../SERVER/tcpip/ip_arp_udp_tcp.c ****         return(1);
 213:../SERVER/tcpip/ip_arp_udp_tcp.c **** }
 20164              		.loc 1 213 0
 20165 002c 7047     		bx	lr
 20166              		.cfi_endproc
 20167              	.LFE33:
 20169 002e 00BF     		.section	.text.eth_type_is_arp_and_my_ip,"ax",%progbits
 20170              		.align	2
 20171              		.global	eth_type_is_arp_and_my_ip
 20172              		.thumb
 20173              		.thumb_func
 20175              	eth_type_is_arp_and_my_ip:
 20176              	.LFB34:
 214:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
 215:../SERVER/tcpip/ip_arp_udp_tcp.c **** uint8_t eth_type_is_arp_and_my_ip(uint8_t *buf,uint16_t len){
 20177              		.loc 1 215 0
 20178              		.cfi_startproc
 20179              		@ args = 0, pretend = 0, frame = 0
 20180              		@ frame_needed = 0, uses_anonymous_args = 0
 20181              		@ link register save eliminated.
 20182              	.LVL27:
 216:../SERVER/tcpip/ip_arp_udp_tcp.c ****         uint8_t i=0;
 217:../SERVER/tcpip/ip_arp_udp_tcp.c ****         //  
 218:../SERVER/tcpip/ip_arp_udp_tcp.c ****         if (len<41){
 20183              		.loc 1 218 0
 20184 0000 2829     		cmp	r1, #40
 20185 0002 2CD9     		bls	.L35
 219:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 return(0);
 220:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 221:../SERVER/tcpip/ip_arp_udp_tcp.c ****         if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V || 
 20186              		.loc 1 221 0
 20187 0004 037B     		ldrb	r3, [r0, #12]	@ zero_extendqisi2
 20188 0006 082B     		cmp	r3, #8
 20189 0008 29D1     		bne	.L35
 222:../SERVER/tcpip/ip_arp_udp_tcp.c ****            buf[ETH_TYPE_L_P] != ETHTYPE_ARP_L_V){
 20190              		.loc 1 222 0
 20191 000a 437B     		ldrb	r3, [r0, #13]	@ zero_extendqisi2
 20192 000c 062B     		cmp	r3, #6
 20193 000e 26D1     		bne	.L35
 223:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 return(0);
 224:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 225:../SERVER/tcpip/ip_arp_udp_tcp.c ****         while(i<4){
 226:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 if(buf[ETH_ARP_DST_IP_P+i] != ipaddr[i]){
 20194              		.loc 1 226 0
 20195 0010 40F20003 		movw	r3, #:lower16:.LANCHOR0
 20196 0014 C0F20003 		movt	r3, #:upper16:.LANCHOR0
 20197 0018 90F82620 		ldrb	r2, [r0, #38]	@ zero_extendqisi2
 20198 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 20199 001e 9A42     		cmp	r2, r3
 20200 0020 1DD1     		bne	.L35
 20201 0022 40F20003 		movw	r3, #:lower16:.LANCHOR0
 20202 0026 C0F20003 		movt	r3, #:upper16:.LANCHOR0
 20203 002a 90F82720 		ldrb	r2, [r0, #39]	@ zero_extendqisi2
 20204 002e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 20205 0030 9A42     		cmp	r2, r3
 20206 0032 14D1     		bne	.L35
 20207 0034 40F20003 		movw	r3, #:lower16:.LANCHOR0
 20208 0038 C0F20003 		movt	r3, #:upper16:.LANCHOR0
 20209 003c 90F82820 		ldrb	r2, [r0, #40]	@ zero_extendqisi2
 20210 0040 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 20211 0042 9A42     		cmp	r2, r3
 20212 0044 0BD1     		bne	.L35
 20213 0046 40F20003 		movw	r3, #:lower16:.LANCHOR0
 20214 004a C0F20003 		movt	r3, #:upper16:.LANCHOR0
 20215 004e 90F82900 		ldrb	r0, [r0, #41]	@ zero_extendqisi2
 20216              	.LVL28:
 20217 0052 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 20218 0054 9842     		cmp	r0, r3
 20219 0056 14BF     		ite	ne
 20220 0058 0020     		movne	r0, #0
 20221 005a 0120     		moveq	r0, #1
 20222 005c 7047     		bx	lr
 20223              	.LVL29:
 20224              	.L35:
 20225 005e 4FF00000 		mov	r0, #0
 20226              	.LVL30:
 227:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         return(0);
 228:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 }
 229:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 i++;
 230:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 231:../SERVER/tcpip/ip_arp_udp_tcp.c ****         return(1);
 232:../SERVER/tcpip/ip_arp_udp_tcp.c **** }
 20227              		.loc 1 232 0
 20228 0062 7047     		bx	lr
 20229              		.cfi_endproc
 20230              	.LFE34:
 20232              		.section	.text.eth_type_is_ip_and_my_ip,"ax",%progbits
 20233              		.align	2
 20234              		.global	eth_type_is_ip_and_my_ip
 20235              		.thumb
 20236              		.thumb_func
 20238              	eth_type_is_ip_and_my_ip:
 20239              	.LFB35:
 233:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
 234:../SERVER/tcpip/ip_arp_udp_tcp.c **** uint8_t eth_type_is_ip_and_my_ip(uint8_t *buf,uint16_t len){
 20240              		.loc 1 234 0
 20241              		.cfi_startproc
 20242              		@ args = 0, pretend = 0, frame = 0
 20243              		@ frame_needed = 0, uses_anonymous_args = 0
 20244              		@ link register save eliminated.
 20245              	.LVL31:
 235:../SERVER/tcpip/ip_arp_udp_tcp.c ****         uint8_t i=0;
 236:../SERVER/tcpip/ip_arp_udp_tcp.c ****         //eth+ip+udp header is 42
 237:../SERVER/tcpip/ip_arp_udp_tcp.c ****         if (len<42){
 20246              		.loc 1 237 0
 20247 0000 2929     		cmp	r1, #41
 20248 0002 2CD9     		bls	.L39
 238:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 return(0);
 239:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 240:../SERVER/tcpip/ip_arp_udp_tcp.c ****         if(buf[ETH_TYPE_H_P]!=ETHTYPE_IP_H_V || 
 20249              		.loc 1 240 0
 20250 0004 037B     		ldrb	r3, [r0, #12]	@ zero_extendqisi2
 20251 0006 082B     		cmp	r3, #8
 20252 0008 29D1     		bne	.L39
 241:../SERVER/tcpip/ip_arp_udp_tcp.c ****            buf[ETH_TYPE_L_P]!=ETHTYPE_IP_L_V){
 20253              		.loc 1 241 0
 20254 000a 437B     		ldrb	r3, [r0, #13]	@ zero_extendqisi2
 20255 000c 3BBB     		cbnz	r3, .L39
 242:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 return(0);
 243:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 244:../SERVER/tcpip/ip_arp_udp_tcp.c ****         if (buf[IP_HEADER_LEN_VER_P]!=0x45){
 20256              		.loc 1 244 0
 20257 000e 837B     		ldrb	r3, [r0, #14]	@ zero_extendqisi2
 20258 0010 452B     		cmp	r3, #69
 20259 0012 24D1     		bne	.L39
 245:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 // must be IP V4 and 20 byte header
 246:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 return(0);
 247:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 248:../SERVER/tcpip/ip_arp_udp_tcp.c ****         while(i<4){
 249:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 if(buf[IP_DST_P+i]!=ipaddr[i]){
 20260              		.loc 1 249 0
 20261 0014 40F20003 		movw	r3, #:lower16:.LANCHOR0
 20262 0018 C0F20003 		movt	r3, #:upper16:.LANCHOR0
 20263 001c 827F     		ldrb	r2, [r0, #30]	@ zero_extendqisi2
 20264 001e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 20265 0020 9A42     		cmp	r2, r3
 20266 0022 1CD1     		bne	.L39
 20267 0024 40F20003 		movw	r3, #:lower16:.LANCHOR0
 20268 0028 C0F20003 		movt	r3, #:upper16:.LANCHOR0
 20269 002c C27F     		ldrb	r2, [r0, #31]	@ zero_extendqisi2
 20270 002e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 20271 0030 9A42     		cmp	r2, r3
 20272 0032 14D1     		bne	.L39
 20273 0034 40F20003 		movw	r3, #:lower16:.LANCHOR0
 20274 0038 C0F20003 		movt	r3, #:upper16:.LANCHOR0
 20275 003c 90F82020 		ldrb	r2, [r0, #32]	@ zero_extendqisi2
 20276 0040 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 20277 0042 9A42     		cmp	r2, r3
 20278 0044 0BD1     		bne	.L39
 20279 0046 40F20003 		movw	r3, #:lower16:.LANCHOR0
 20280 004a C0F20003 		movt	r3, #:upper16:.LANCHOR0
 20281 004e 90F82100 		ldrb	r0, [r0, #33]	@ zero_extendqisi2
 20282              	.LVL32:
 20283 0052 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 20284 0054 9842     		cmp	r0, r3
 20285 0056 14BF     		ite	ne
 20286 0058 0020     		movne	r0, #0
 20287 005a 0120     		moveq	r0, #1
 20288 005c 7047     		bx	lr
 20289              	.LVL33:
 20290              	.L39:
 20291 005e 4FF00000 		mov	r0, #0
 20292              	.LVL34:
 250:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         return(0);
 251:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 }
 252:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 i++;
 253:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 254:../SERVER/tcpip/ip_arp_udp_tcp.c ****         return(1);
 255:../SERVER/tcpip/ip_arp_udp_tcp.c **** }
 20293              		.loc 1 255 0
 20294 0062 7047     		bx	lr
 20295              		.cfi_endproc
 20296              	.LFE35:
 20298              		.section	.text.make_eth,"ax",%progbits
 20299              		.align	2
 20300              		.global	make_eth
 20301              		.thumb
 20302              		.thumb_func
 20304              	make_eth:
 20305              	.LFB36:
 256:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
 257:../SERVER/tcpip/ip_arp_udp_tcp.c **** // make a return eth header from a received eth packet
 258:../SERVER/tcpip/ip_arp_udp_tcp.c **** void make_eth(uint8_t *buf)
 259:../SERVER/tcpip/ip_arp_udp_tcp.c **** {
 20306              		.loc 1 259 0
 20307              		.cfi_startproc
 20308              		@ args = 0, pretend = 0, frame = 0
 20309              		@ frame_needed = 0, uses_anonymous_args = 0
 20310              		@ link register save eliminated.
 20311              	.LVL35:
 20312              		.loc 1 259 0
 20313 0000 0246     		mov	r2, r0
 20314 0002 4FF00003 		mov	r3, #0
 260:../SERVER/tcpip/ip_arp_udp_tcp.c ****         uint8_t i=0;
 261:../SERVER/tcpip/ip_arp_udp_tcp.c ****         //
 262:../SERVER/tcpip/ip_arp_udp_tcp.c ****         //copy the destination mac from the source and fill my mac into src
 263:../SERVER/tcpip/ip_arp_udp_tcp.c ****         while(i<6){
 264:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
 265:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[ETH_SRC_MAC +i]=macaddr[i];
 20315              		.loc 1 265 0
 20316 0006 40F20001 		movw	r1, #:lower16:.LANCHOR2
 20317 000a C0F20001 		movt	r1, #:upper16:.LANCHOR2
 20318              	.L43:
 20319              		.loc 1 264 0
 20320 000e 92F806C0 		ldrb	ip, [r2, #6]	@ zero_extendqisi2
 20321 0012 00F803C0 		strb	ip, [r0, r3]
 20322              		.loc 1 265 0
 20323 0016 11F803C0 		ldrb	ip, [r1, r3]	@ zero_extendqisi2
 20324 001a 82F806C0 		strb	ip, [r2, #6]
 20325 001e 03F10103 		add	r3, r3, #1
 20326 0022 02F10102 		add	r2, r2, #1
 20327              		.loc 1 263 0
 20328 0026 062B     		cmp	r3, #6
 20329 0028 F1D1     		bne	.L43
 266:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 i++;
 267:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 268:../SERVER/tcpip/ip_arp_udp_tcp.c **** }
 20330              		.loc 1 268 0
 20331 002a 7047     		bx	lr
 20332              		.cfi_endproc
 20333              	.LFE36:
 20335              		.section	.text.fill_ip_hdr_checksum,"ax",%progbits
 20336              		.align	2
 20337              		.global	fill_ip_hdr_checksum
 20338              		.thumb
 20339              		.thumb_func
 20341              	fill_ip_hdr_checksum:
 20342              	.LFB37:
 269:../SERVER/tcpip/ip_arp_udp_tcp.c **** void fill_ip_hdr_checksum(uint8_t *buf)
 270:../SERVER/tcpip/ip_arp_udp_tcp.c **** {
 20343              		.loc 1 270 0
 20344              		.cfi_startproc
 20345              		@ args = 0, pretend = 0, frame = 0
 20346              		@ frame_needed = 0, uses_anonymous_args = 0
 20347              	.LVL36:
 20348 0000 38B5     		push	{r3, r4, r5, lr}
 20349              	.LCFI2:
 20350              		.cfi_def_cfa_offset 16
 271:../SERVER/tcpip/ip_arp_udp_tcp.c ****         uint16_t ck;
 272:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // clear the 2 byte checksum
 273:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[IP_CHECKSUM_P]=0;
 20351              		.loc 1 273 0
 20352 0002 0546     		mov	r5, r0
 20353              		.cfi_offset 14, -4
 20354              		.cfi_offset 5, -8
 20355              		.cfi_offset 4, -12
 20356              		.cfi_offset 3, -16
 20357 0004 4FF00002 		mov	r2, #0
 20358 0008 05F8182F 		strb	r2, [r5, #24]!
 274:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[IP_CHECKSUM_P+1]=0;
 20359              		.loc 1 274 0
 20360 000c 0446     		mov	r4, r0
 20361 000e 04F8192F 		strb	r2, [r4, #25]!
 275:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[IP_FLAGS_P]=0x40; // don't fragment
 20362              		.loc 1 275 0
 20363 0012 4FF04003 		mov	r3, #64
 20364 0016 0375     		strb	r3, [r0, #20]
 276:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[IP_FLAGS_P+1]=0;  // fragement offset
 20365              		.loc 1 276 0
 20366 0018 4275     		strb	r2, [r0, #21]
 277:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[IP_TTL_P]=64; // ttl
 20367              		.loc 1 277 0
 20368 001a 8375     		strb	r3, [r0, #22]
 278:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // calculate the checksum:
 279:../SERVER/tcpip/ip_arp_udp_tcp.c ****         ck=checksum(&buf[IP_P], IP_HEADER_LEN,0);
 20369              		.loc 1 279 0
 20370 001c 00F10E00 		add	r0, r0, #14
 20371              	.LVL37:
 20372 0020 4FF01401 		mov	r1, #20
 20373 0024 FFF7FEFF 		bl	checksum
 280:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[IP_CHECKSUM_P]=ck>>8;
 20374              		.loc 1 280 0
 20375 0028 4FEA1023 		lsr	r3, r0, #8
 20376 002c 2B70     		strb	r3, [r5, #0]
 281:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[IP_CHECKSUM_P+1]=ck& 0xff;
 20377              		.loc 1 281 0
 20378 002e 2070     		strb	r0, [r4, #0]
 282:../SERVER/tcpip/ip_arp_udp_tcp.c **** }
 20379              		.loc 1 282 0
 20380 0030 38BD     		pop	{r3, r4, r5, pc}
 20381              		.cfi_endproc
 20382              	.LFE37:
 20384 0032 00BF     		.section	.text.make_ip,"ax",%progbits
 20385              		.align	2
 20386              		.global	make_ip
 20387              		.thumb
 20388              		.thumb_func
 20390              	make_ip:
 20391              	.LFB38:
 283:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
 284:../SERVER/tcpip/ip_arp_udp_tcp.c **** // make a return ip header from a received ip packet
 285:../SERVER/tcpip/ip_arp_udp_tcp.c **** void make_ip(uint8_t *buf)
 286:../SERVER/tcpip/ip_arp_udp_tcp.c **** {
 20392              		.loc 1 286 0
 20393              		.cfi_startproc
 20394              		@ args = 0, pretend = 0, frame = 0
 20395              		@ frame_needed = 0, uses_anonymous_args = 0
 20396              	.LVL38:
 20397 0000 08B5     		push	{r3, lr}
 20398              	.LCFI3:
 20399              		.cfi_def_cfa_offset 8
 20400              		.loc 1 286 0
 20401 0002 0346     		mov	r3, r0
 20402              		.cfi_offset 14, -4
 20403              		.cfi_offset 3, -8
 20404 0004 4FF00002 		mov	r2, #0
 287:../SERVER/tcpip/ip_arp_udp_tcp.c ****         uint8_t i=0;
 288:../SERVER/tcpip/ip_arp_udp_tcp.c ****         while(i<4){
 289:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[IP_DST_P+i]=buf[IP_SRC_P+i];
 290:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[IP_SRC_P+i]=ipaddr[i];
 20405              		.loc 1 290 0
 20406 0008 40F20001 		movw	r1, #:lower16:.LANCHOR0
 20407 000c C0F20001 		movt	r1, #:upper16:.LANCHOR0
 20408              	.L49:
 20409              		.loc 1 289 0
 20410 0010 93F81AC0 		ldrb	ip, [r3, #26]	@ zero_extendqisi2
 20411 0014 83F81EC0 		strb	ip, [r3, #30]
 20412              		.loc 1 290 0
 20413 0018 11F802C0 		ldrb	ip, [r1, r2]	@ zero_extendqisi2
 20414 001c 83F81AC0 		strb	ip, [r3, #26]
 20415 0020 02F10102 		add	r2, r2, #1
 20416 0024 03F10103 		add	r3, r3, #1
 20417              		.loc 1 288 0
 20418 0028 042A     		cmp	r2, #4
 20419 002a F1D1     		bne	.L49
 291:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 i++;
 292:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 293:../SERVER/tcpip/ip_arp_udp_tcp.c ****         fill_ip_hdr_checksum(buf);
 20420              		.loc 1 293 0
 20421 002c FFF7FEFF 		bl	fill_ip_hdr_checksum
 20422              	.LVL39:
 294:../SERVER/tcpip/ip_arp_udp_tcp.c **** }
 20423              		.loc 1 294 0
 20424 0030 08BD     		pop	{r3, pc}
 20425              		.cfi_endproc
 20426              	.LFE38:
 20428 0032 00BF     		.section	.text.step_seq,"ax",%progbits
 20429              		.align	2
 20430              		.global	step_seq
 20431              		.thumb
 20432              		.thumb_func
 20434              	step_seq:
 20435              	.LFB39:
 295:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
 296:../SERVER/tcpip/ip_arp_udp_tcp.c **** // swap seq and ack number and count ack number up
 297:../SERVER/tcpip/ip_arp_udp_tcp.c **** void step_seq(uint8_t *buf,uint16_t rel_ack_num,uint8_t cp_seq)
 298:../SERVER/tcpip/ip_arp_udp_tcp.c **** {
 20436              		.loc 1 298 0
 20437              		.cfi_startproc
 20438              		@ args = 0, pretend = 0, frame = 0
 20439              		@ frame_needed = 0, uses_anonymous_args = 0
 20440              		@ link register save eliminated.
 20441              	.LVL40:
 20442 0000 10B4     		push	{r4}
 20443              	.LCFI4:
 20444              		.cfi_def_cfa_offset 4
 20445              		.loc 1 298 0
 20446 0002 4FF00403 		mov	r3, #4
 20447              	.LVL41:
 299:../SERVER/tcpip/ip_arp_udp_tcp.c ****         uint8_t i;
 300:../SERVER/tcpip/ip_arp_udp_tcp.c ****         uint8_t tseq;
 301:../SERVER/tcpip/ip_arp_udp_tcp.c ****         i=4;
 302:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // sequence numbers:
 303:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // add the rel ack num to SEQACK
 304:../SERVER/tcpip/ip_arp_udp_tcp.c ****         while(i>0){
 305:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 rel_ack_num=buf[TCP_SEQ_H_P+i-1]+rel_ack_num;
 306:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 tseq=buf[TCP_SEQACK_H_P+i-1];
 307:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[TCP_SEQACK_H_P+i-1]=0xff&rel_ack_num;
 308:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 if (cp_seq){
 309:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         // copy the acknum sent to us into the sequence number
 310:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         buf[TCP_SEQ_H_P+i-1]=tseq;
 311:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 }else{
 312:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         buf[TCP_SEQ_H_P+i-1]= 0; // some preset value
 20448              		.loc 1 312 0
 20449 0006 4FF00004 		mov	r4, #0
 20450              		.cfi_offset 4, -4
 20451              	.LVL42:
 20452              	.L56:
 20453              		.loc 1 305 0
 20454 000a 90F829C0 		ldrb	ip, [r0, #41]	@ zero_extendqisi2
 20455              	.LVL43:
 20456 000e 6144     		add	r1, r1, ip
 20457              	.LVL44:
 20458 0010 89B2     		uxth	r1, r1
 20459              	.LVL45:
 20460              		.loc 1 306 0
 20461 0012 90F82DC0 		ldrb	ip, [r0, #45]	@ zero_extendqisi2
 20462              	.LVL46:
 20463              		.loc 1 307 0
 20464 0016 80F82D10 		strb	r1, [r0, #45]
 20465              		.loc 1 308 0
 20466 001a 12B1     		cbz	r2, .L53
 20467              		.loc 1 310 0
 20468 001c 80F829C0 		strb	ip, [r0, #41]
 20469 0020 01E0     		b	.L54
 20470              	.L53:
 20471              		.loc 1 312 0
 20472 0022 80F82940 		strb	r4, [r0, #41]
 20473              	.L54:
 313:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 }
 314:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 rel_ack_num=rel_ack_num>>8;
 315:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 i--;
 20474              		.loc 1 315 0
 20475 0026 03F1FF33 		add	r3, r3, #-1
 20476              	.LVL47:
 20477 002a DBB2     		uxtb	r3, r3
 20478              	.LVL48:
 20479 002c 00F1FF30 		add	r0, r0, #-1
 20480              		.loc 1 304 0
 20481 0030 13B1     		cbz	r3, .L57
 20482              		.loc 1 314 0
 20483 0032 4FEA1121 		lsr	r1, r1, #8
 20484              	.LVL49:
 20485 0036 E8E7     		b	.L56
 20486              	.L57:
 316:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 317:../SERVER/tcpip/ip_arp_udp_tcp.c **** }
 20487              		.loc 1 317 0
 20488 0038 10BC     		pop	{r4}
 20489 003a 7047     		bx	lr
 20490              		.cfi_endproc
 20491              	.LFE39:
 20493              		.section	.text.make_tcphead,"ax",%progbits
 20494              		.align	2
 20495              		.global	make_tcphead
 20496              		.thumb
 20497              		.thumb_func
 20499              	make_tcphead:
 20500              	.LFB40:
 318:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
 319:../SERVER/tcpip/ip_arp_udp_tcp.c **** // make a return tcp header from a received tcp packet
 320:../SERVER/tcpip/ip_arp_udp_tcp.c **** // rel_ack_num is how much we must step the seq number received from the
 321:../SERVER/tcpip/ip_arp_udp_tcp.c **** // other side. We do not send more than 765 bytes of text (=data) in the tcp packet.
 322:../SERVER/tcpip/ip_arp_udp_tcp.c **** // No mss is included here.
 323:../SERVER/tcpip/ip_arp_udp_tcp.c **** //
 324:../SERVER/tcpip/ip_arp_udp_tcp.c **** // After calling this function you can fill in the first data byte at TCP_OPTIONS_P+4
 325:../SERVER/tcpip/ip_arp_udp_tcp.c **** // If cp_seq=0 then an initial sequence number is used (should be use in synack)
 326:../SERVER/tcpip/ip_arp_udp_tcp.c **** // otherwise it is copied from the packet we received
 327:../SERVER/tcpip/ip_arp_udp_tcp.c **** void make_tcphead(uint8_t *buf,uint16_t rel_ack_num,uint8_t cp_seq)
 328:../SERVER/tcpip/ip_arp_udp_tcp.c **** {
 20501              		.loc 1 328 0
 20502              		.cfi_startproc
 20503              		@ args = 0, pretend = 0, frame = 0
 20504              		@ frame_needed = 0, uses_anonymous_args = 0
 20505              	.LVL50:
 20506 0000 38B5     		push	{r3, r4, r5, lr}
 20507              	.LCFI5:
 20508              		.cfi_def_cfa_offset 16
 20509 0002 0446     		mov	r4, r0
 20510              		.cfi_offset 14, -4
 20511              		.cfi_offset 5, -8
 20512              		.cfi_offset 4, -12
 20513              		.cfi_offset 3, -16
 329:../SERVER/tcpip/ip_arp_udp_tcp.c ****         uint8_t i;
 330:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // copy ports:
 331:../SERVER/tcpip/ip_arp_udp_tcp.c ****         i=buf[TCP_DST_PORT_H_P];
 20514              		.loc 1 331 0
 20515 0004 0546     		mov	r5, r0
 20516 0006 15F824CF 		ldrb	ip, [r5, #36]!	@ zero_extendqisi2
 20517              	.LVL51:
 332:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_DST_PORT_H_P]=buf[TCP_SRC_PORT_H_P];
 20518              		.loc 1 332 0
 20519 000a 0346     		mov	r3, r0
 20520 000c 13F822EF 		ldrb	lr, [r3, #34]!	@ zero_extendqisi2
 20521 0010 85F800E0 		strb	lr, [r5, #0]
 333:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_SRC_PORT_H_P]=i;
 20522              		.loc 1 333 0
 20523 0014 83F800C0 		strb	ip, [r3, #0]
 334:../SERVER/tcpip/ip_arp_udp_tcp.c ****         //
 335:../SERVER/tcpip/ip_arp_udp_tcp.c ****         i=buf[TCP_DST_PORT_L_P];
 20524              		.loc 1 335 0
 20525 0018 0546     		mov	r5, r0
 20526 001a 15F825CF 		ldrb	ip, [r5, #37]!	@ zero_extendqisi2
 20527              	.LVL52:
 336:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_DST_PORT_L_P]=buf[TCP_SRC_PORT_L_P];
 20528              		.loc 1 336 0
 20529 001e 0346     		mov	r3, r0
 20530 0020 13F823EF 		ldrb	lr, [r3, #35]!	@ zero_extendqisi2
 20531 0024 85F800E0 		strb	lr, [r5, #0]
 337:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_SRC_PORT_L_P]=i;
 20532              		.loc 1 337 0
 20533 0028 83F800C0 		strb	ip, [r3, #0]
 338:../SERVER/tcpip/ip_arp_udp_tcp.c ****         step_seq(buf,rel_ack_num,cp_seq);
 20534              		.loc 1 338 0
 20535 002c FFF7FEFF 		bl	step_seq
 20536              	.LVL53:
 339:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // zero the checksum
 340:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_CHECKSUM_H_P]=0;
 20537              		.loc 1 340 0
 20538 0030 4FF00003 		mov	r3, #0
 20539 0034 84F83230 		strb	r3, [r4, #50]
 341:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_CHECKSUM_L_P]=0;
 20540              		.loc 1 341 0
 20541 0038 84F83330 		strb	r3, [r4, #51]
 342:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // no options:
 343:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // 20 bytes:
 344:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // The tcp header length is only a 4 bit field (the upper 4 bits).
 345:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // It is calculated in units of 4 bytes.
 346:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // E.g 20 bytes: 20/4=6 => 0x50=header len field
 347:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_HEADER_LEN_P]=0x50;
 20542              		.loc 1 347 0
 20543 003c 4FF05003 		mov	r3, #80
 20544 0040 84F82E30 		strb	r3, [r4, #46]
 348:../SERVER/tcpip/ip_arp_udp_tcp.c **** }
 20545              		.loc 1 348 0
 20546 0044 38BD     		pop	{r3, r4, r5, pc}
 20547              		.cfi_endproc
 20548              	.LFE40:
 20550 0046 00BF     		.section	.text.get_tcp_data_len,"ax",%progbits
 20551              		.align	2
 20552              		.global	get_tcp_data_len
 20553              		.thumb
 20554              		.thumb_func
 20556              	get_tcp_data_len:
 20557              	.LFB43:
 349:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
 350:../SERVER/tcpip/ip_arp_udp_tcp.c **** void make_arp_answer_from_request(uint8_t *buf)
 351:../SERVER/tcpip/ip_arp_udp_tcp.c **** {
 352:../SERVER/tcpip/ip_arp_udp_tcp.c ****         uint8_t i=0;
 353:../SERVER/tcpip/ip_arp_udp_tcp.c ****         //
 354:../SERVER/tcpip/ip_arp_udp_tcp.c ****         make_eth(buf);
 355:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[ETH_ARP_OPCODE_H_P]=ETH_ARP_OPCODE_REPLY_H_V;
 356:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[ETH_ARP_OPCODE_L_P]=ETH_ARP_OPCODE_REPLY_L_V;
 357:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // fill the mac addresses:
 358:../SERVER/tcpip/ip_arp_udp_tcp.c ****         while(i<6){
 359:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[ETH_ARP_DST_MAC_P+i]=buf[ETH_ARP_SRC_MAC_P+i];
 360:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
 361:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 i++;
 362:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 363:../SERVER/tcpip/ip_arp_udp_tcp.c ****         i=0;
 364:../SERVER/tcpip/ip_arp_udp_tcp.c ****         while(i<4){
 365:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[ETH_ARP_DST_IP_P+i]=buf[ETH_ARP_SRC_IP_P+i];
 366:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
 367:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 i++;
 368:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 369:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // eth+arp is 42 bytes:
 370:../SERVER/tcpip/ip_arp_udp_tcp.c ****         enc28j60PacketSend(42,buf); 
 371:../SERVER/tcpip/ip_arp_udp_tcp.c **** }
 372:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
 373:../SERVER/tcpip/ip_arp_udp_tcp.c **** void make_echo_reply_from_request(uint8_t *buf,uint16_t len)
 374:../SERVER/tcpip/ip_arp_udp_tcp.c **** {
 375:../SERVER/tcpip/ip_arp_udp_tcp.c ****         make_eth(buf);
 376:../SERVER/tcpip/ip_arp_udp_tcp.c ****         make_ip(buf);
 377:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[ICMP_TYPE_P]=ICMP_TYPE_ECHOREPLY_V;
 378:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // we changed only the icmp.type field from request(=8) to reply(=0).
 379:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // we can therefore easily correct the checksum:
 380:../SERVER/tcpip/ip_arp_udp_tcp.c ****         if (buf[ICMP_CHECKSUM_P] > (0xff-0x08)){
 381:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[ICMP_CHECKSUM_P+1]++;
 382:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 383:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[ICMP_CHECKSUM_P]+=0x08;
 384:../SERVER/tcpip/ip_arp_udp_tcp.c ****         //
 385:../SERVER/tcpip/ip_arp_udp_tcp.c ****         enc28j60PacketSend(len,buf);
 386:../SERVER/tcpip/ip_arp_udp_tcp.c **** }
 387:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
 388:../SERVER/tcpip/ip_arp_udp_tcp.c **** // do some basic length calculations 
 389:../SERVER/tcpip/ip_arp_udp_tcp.c **** uint16_t get_tcp_data_len(uint8_t *buf)
 390:../SERVER/tcpip/ip_arp_udp_tcp.c **** {
 20558              		.loc 1 390 0
 20559              		.cfi_startproc
 20560              		@ args = 0, pretend = 0, frame = 0
 20561              		@ frame_needed = 0, uses_anonymous_args = 0
 20562              		@ link register save eliminated.
 20563              	.LVL54:
 391:../SERVER/tcpip/ip_arp_udp_tcp.c ****         int16_t i;
 392:../SERVER/tcpip/ip_arp_udp_tcp.c ****         i=(((int16_t)buf[IP_TOTLEN_H_P])<<8)|(buf[IP_TOTLEN_L_P]&0xff);
 393:../SERVER/tcpip/ip_arp_udp_tcp.c ****         i-=IP_HEADER_LEN;
 394:../SERVER/tcpip/ip_arp_udp_tcp.c ****         i-=(buf[TCP_HEADER_LEN_P]>>4)*4; // generate len in bytes;
 20564              		.loc 1 394 0
 20565 0000 90F82E30 		ldrb	r3, [r0, #46]	@ zero_extendqisi2
 20566 0004 4FEA1313 		lsr	r3, r3, #4
 20567 0008 C3EB8333 		rsb	r3, r3, r3, lsl #14
 20568 000c 4FEA8303 		lsl	r3, r3, #2
 20569 0010 017C     		ldrb	r1, [r0, #16]	@ zero_extendqisi2
 20570 0012 427C     		ldrb	r2, [r0, #17]	@ zero_extendqisi2
 20571 0014 A3F11403 		sub	r3, r3, #20
 20572 0018 42EA0120 		orr	r0, r2, r1, lsl #8
 20573              	.LVL55:
 20574 001c 1844     		add	r0, r3, r0
 20575 001e 00B2     		sxth	r0, r0
 20576              	.LVL56:
 20577 0020 20EAE070 		bic	r0, r0, r0, asr #31
 20578              	.LVL57:
 395:../SERVER/tcpip/ip_arp_udp_tcp.c ****         if (i<=0){
 396:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 i=0;
 397:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 398:../SERVER/tcpip/ip_arp_udp_tcp.c ****         return((uint16_t)i);
 399:../SERVER/tcpip/ip_arp_udp_tcp.c **** }
 20579              		.loc 1 399 0
 20580 0024 80B2     		uxth	r0, r0
 20581 0026 7047     		bx	lr
 20582              		.cfi_endproc
 20583              	.LFE43:
 20585              		.section	.text.fill_tcp_data_p,"ax",%progbits
 20586              		.align	2
 20587              		.global	fill_tcp_data_p
 20588              		.thumb
 20589              		.thumb_func
 20591              	fill_tcp_data_p:
 20592              	.LFB44:
 400:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
 401:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
 402:../SERVER/tcpip/ip_arp_udp_tcp.c **** // fill in tcp data at position pos. pos=0 means start of
 403:../SERVER/tcpip/ip_arp_udp_tcp.c **** // tcp data. Returns the position at which the string after
 404:../SERVER/tcpip/ip_arp_udp_tcp.c **** // this string could be filled.
 405:../SERVER/tcpip/ip_arp_udp_tcp.c **** uint16_t fill_tcp_data_p(uint8_t *buf,uint16_t pos, const char *progmem_s)
 406:../SERVER/tcpip/ip_arp_udp_tcp.c **** {
 20593              		.loc 1 406 0
 20594              		.cfi_startproc
 20595              		@ args = 0, pretend = 0, frame = 0
 20596              		@ frame_needed = 0, uses_anonymous_args = 0
 20597              		@ link register save eliminated.
 20598              	.LVL58:
 20599 0000 10B4     		push	{r4}
 20600              	.LCFI6:
 20601              		.cfi_def_cfa_offset 4
 20602 0002 0346     		mov	r3, r0
 407:../SERVER/tcpip/ip_arp_udp_tcp.c ****         char c;
 408:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // fill in tcp data at position pos
 409:../SERVER/tcpip/ip_arp_udp_tcp.c ****         //
 410:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
 411:../SERVER/tcpip/ip_arp_udp_tcp.c ****         while ((c = *(progmem_s++))) {
 20603              		.loc 1 411 0
 20604 0004 1078     		ldrb	r0, [r2, #0]	@ zero_extendqisi2
 20605              	.LVL59:
 20606 0006 50B1     		cbz	r0, .L63
 20607              		.cfi_offset 4, -4
 20608              	.L64:
 412:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[TCP_CHECKSUM_L_P+3+pos]=c;
 20609              		.loc 1 412 0
 20610 0008 03EB0104 		add	r4, r3, r1
 20611 000c 84F83600 		strb	r0, [r4, #54]
 413:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 pos++;
 20612              		.loc 1 413 0
 20613 0010 01F10101 		add	r1, r1, #1
 20614              	.LVL60:
 20615 0014 89B2     		uxth	r1, r1
 20616              	.LVL61:
 20617              		.loc 1 411 0
 20618 0016 12F8010F 		ldrb	r0, [r2, #1]!	@ zero_extendqisi2
 20619              	.LVL62:
 20620 001a 0028     		cmp	r0, #0
 20621 001c F4D1     		bne	.L64
 20622              	.LVL63:
 20623              	.L63:
 414:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 415:../SERVER/tcpip/ip_arp_udp_tcp.c ****         return(pos);
 416:../SERVER/tcpip/ip_arp_udp_tcp.c **** }
 20624              		.loc 1 416 0
 20625 001e 0846     		mov	r0, r1
 20626              	.LVL64:
 20627 0020 10BC     		pop	{r4}
 20628 0022 7047     		bx	lr
 20629              		.cfi_endproc
 20630              	.LFE44:
 20632              		.section	.text.fill_tcp_data_len,"ax",%progbits
 20633              		.align	2
 20634              		.global	fill_tcp_data_len
 20635              		.thumb
 20636              		.thumb_func
 20638              	fill_tcp_data_len:
 20639              	.LFB45:
 417:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
 418:../SERVER/tcpip/ip_arp_udp_tcp.c **** // fill a binary string of len data into the tcp packet
 419:../SERVER/tcpip/ip_arp_udp_tcp.c **** uint16_t fill_tcp_data_len(uint8_t *buf,uint16_t pos, const uint8_t *s, uint16_t len)
 420:../SERVER/tcpip/ip_arp_udp_tcp.c **** {
 20640              		.loc 1 420 0
 20641              		.cfi_startproc
 20642              		@ args = 0, pretend = 0, frame = 0
 20643              		@ frame_needed = 0, uses_anonymous_args = 0
 20644              		@ link register save eliminated.
 20645              	.LVL65:
 20646 0000 F0B4     		push	{r4, r5, r6, r7}
 20647              	.LCFI7:
 20648              		.cfi_def_cfa_offset 16
 20649 0002 8446     		mov	ip, r0
 421:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // fill in tcp data at position pos
 422:../SERVER/tcpip/ip_arp_udp_tcp.c ****         //
 423:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
 424:../SERVER/tcpip/ip_arp_udp_tcp.c ****         while (len) {
 20650              		.loc 1 424 0
 20651 0004 1846     		mov	r0, r3
 20652              	.LVL66:
 20653 0006 ABB1     		cbz	r3, .L68
 20654              		.cfi_offset 7, -4
 20655              		.cfi_offset 6, -8
 20656              		.cfi_offset 5, -12
 20657              		.cfi_offset 4, -16
 20658              		.loc 1 419 0
 20659 0008 03F1FF37 		add	r7, r3, #-1
 20660 000c BFB2     		uxth	r7, r7
 20661 000e 07F10107 		add	r7, r7, #1
 20662 0012 0C46     		mov	r4, r1
 20663 0014 4FF00003 		mov	r3, #0
 20664              	.LVL67:
 20665              	.L69:
 425:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[TCP_CHECKSUM_L_P+3+pos]=*s;
 20666              		.loc 1 425 0
 20667 0018 04EB0C05 		add	r5, r4, ip
 20668 001c D65C     		ldrb	r6, [r2, r3]	@ zero_extendqisi2
 20669 001e 85F83660 		strb	r6, [r5, #54]
 426:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 pos++;
 20670              		.loc 1 426 0
 20671 0022 04F10104 		add	r4, r4, #1
 20672              	.LVL68:
 20673 0026 A4B2     		uxth	r4, r4
 20674              	.LVL69:
 20675 0028 03F10103 		add	r3, r3, #1
 20676              		.loc 1 424 0
 20677 002c BB42     		cmp	r3, r7
 20678 002e F3D1     		bne	.L69
 20679 0030 0144     		add	r1, r0, r1
 20680 0032 89B2     		uxth	r1, r1
 20681              	.LVL70:
 20682              	.L68:
 427:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 s++;
 428:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 len--;
 429:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 430:../SERVER/tcpip/ip_arp_udp_tcp.c ****         return(pos);
 431:../SERVER/tcpip/ip_arp_udp_tcp.c **** }
 20683              		.loc 1 431 0
 20684 0034 0846     		mov	r0, r1
 20685              	.LVL71:
 20686 0036 F0BC     		pop	{r4, r5, r6, r7}
 20687 0038 7047     		bx	lr
 20688              		.cfi_endproc
 20689              	.LFE45:
 20691 003a 00BF     		.section	.text.www_server_port,"ax",%progbits
 20692              		.align	2
 20693              		.global	www_server_port
 20694              		.thumb
 20695              		.thumb_func
 20697              	www_server_port:
 20698              	.LFB52:
 432:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
 433:../SERVER/tcpip/ip_arp_udp_tcp.c **** // fill in tcp data at position pos. pos=0 means start of
 434:../SERVER/tcpip/ip_arp_udp_tcp.c **** // tcp data. Returns the position at which the string after
 435:../SERVER/tcpip/ip_arp_udp_tcp.c **** // this string could be filled.
 436:../SERVER/tcpip/ip_arp_udp_tcp.c **** uint16_t fill_tcp_data(uint8_t *buf,uint16_t pos, const char *s)
 437:../SERVER/tcpip/ip_arp_udp_tcp.c **** {
 438:../SERVER/tcpip/ip_arp_udp_tcp.c ****         return(fill_tcp_data_len(buf,pos,(uint8_t*)s,strlen(s)));
 439:../SERVER/tcpip/ip_arp_udp_tcp.c **** }
 440:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
 441:../SERVER/tcpip/ip_arp_udp_tcp.c **** // Make just an ack packet with no tcp data inside
 442:../SERVER/tcpip/ip_arp_udp_tcp.c **** // This will modify the eth/ip/tcp header 
 443:../SERVER/tcpip/ip_arp_udp_tcp.c **** void make_tcp_ack_from_any(uint8_t *buf,int16_t datlentoack,uint8_t addflags)
 444:../SERVER/tcpip/ip_arp_udp_tcp.c **** {
 445:../SERVER/tcpip/ip_arp_udp_tcp.c ****         uint16_t j;
 446:../SERVER/tcpip/ip_arp_udp_tcp.c ****         make_eth(buf);
 447:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // fill the header:
 448:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_FLAGS_P]=TCP_FLAGS_ACK_V|addflags;
 449:../SERVER/tcpip/ip_arp_udp_tcp.c ****         if (addflags==TCP_FLAGS_RST_V){
 450:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 make_tcphead(buf,datlentoack,1); 
 451:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }else{
 452:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 if (datlentoack==0){
 453:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         // if there is no data then we must still acknoledge one packet
 454:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         datlentoack=1;
 455:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 }
 456:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 // normal case, ack the data:
 457:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 make_tcphead(buf,datlentoack,1); // no options
 458:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 459:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // total length field in the IP header must be set:
 460:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // 20 bytes IP + 20 bytes tcp (when no options) 
 461:../SERVER/tcpip/ip_arp_udp_tcp.c ****         j=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN;
 462:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[IP_TOTLEN_H_P]=j>>8;
 463:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[IP_TOTLEN_L_P]=j& 0xff;
 464:../SERVER/tcpip/ip_arp_udp_tcp.c ****         make_ip(buf);
 465:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // use a low window size otherwise we have to have
 466:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // timers and can not just react on every packet.
 467:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_WIN_SIZE]=0x4; // 1024=0x400, 1280=0x500 2048=0x800 768=0x300
 468:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_WIN_SIZE+1]=0;
 469:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + data len
 470:../SERVER/tcpip/ip_arp_udp_tcp.c ****         j=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN,2);
 471:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_CHECKSUM_H_P]=j>>8;
 472:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_CHECKSUM_L_P]=j& 0xff;
 473:../SERVER/tcpip/ip_arp_udp_tcp.c ****         enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN,buf);
 474:../SERVER/tcpip/ip_arp_udp_tcp.c **** }
 475:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
 476:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
 477:../SERVER/tcpip/ip_arp_udp_tcp.c **** // dlen is the amount of tcp data (http data) we send in this packet
 478:../SERVER/tcpip/ip_arp_udp_tcp.c **** // You can use this function only immediately after make_tcp_ack_from_any
 479:../SERVER/tcpip/ip_arp_udp_tcp.c **** // This is because this function will NOT modify the eth/ip/tcp header except for
 480:../SERVER/tcpip/ip_arp_udp_tcp.c **** // length and checksum
 481:../SERVER/tcpip/ip_arp_udp_tcp.c **** // You must set TCP_FLAGS before calling this
 482:../SERVER/tcpip/ip_arp_udp_tcp.c **** void make_tcp_ack_with_data_noflags(uint8_t *buf,uint16_t dlen)
 483:../SERVER/tcpip/ip_arp_udp_tcp.c **** {
 484:../SERVER/tcpip/ip_arp_udp_tcp.c ****         uint16_t j;
 485:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // total length field in the IP header must be set:
 486:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // 20 bytes IP + 20 bytes tcp (when no options) + len of data
 487:../SERVER/tcpip/ip_arp_udp_tcp.c ****         j=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen;
 488:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[IP_TOTLEN_H_P]=j>>8;
 489:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[IP_TOTLEN_L_P]=j& 0xff;
 490:../SERVER/tcpip/ip_arp_udp_tcp.c ****         fill_ip_hdr_checksum(buf);
 491:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // zero the checksum
 492:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_CHECKSUM_H_P]=0;
 493:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_CHECKSUM_L_P]=0;
 494:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + data len
 495:../SERVER/tcpip/ip_arp_udp_tcp.c ****         j=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN+dlen,2);
 496:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_CHECKSUM_H_P]=j>>8;
 497:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_CHECKSUM_L_P]=j& 0xff;
 498:../SERVER/tcpip/ip_arp_udp_tcp.c ****         enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen+ETH_HEADER_LEN,buf);
 499:../SERVER/tcpip/ip_arp_udp_tcp.c **** }
 500:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
 501:../SERVER/tcpip/ip_arp_udp_tcp.c **** #if defined (UDP_server)
 502:../SERVER/tcpip/ip_arp_udp_tcp.c **** // a udp server
 503:../SERVER/tcpip/ip_arp_udp_tcp.c **** void make_udp_reply_from_request_udpdat_ready(uint8_t *buf,uint16_t datalen,uint16_t port)
 504:../SERVER/tcpip/ip_arp_udp_tcp.c **** {
 505:../SERVER/tcpip/ip_arp_udp_tcp.c ****         uint16_t j;
 506:../SERVER/tcpip/ip_arp_udp_tcp.c ****         make_eth(buf);
 507:../SERVER/tcpip/ip_arp_udp_tcp.c ****         if (datalen>220){
 508:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 datalen=220;
 509:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 510:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // total length field in the IP header must be set:
 511:../SERVER/tcpip/ip_arp_udp_tcp.c ****         j=IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
 512:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[IP_TOTLEN_H_P]=j>>8;
 513:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[IP_TOTLEN_L_P]=j& 0xff;
 514:../SERVER/tcpip/ip_arp_udp_tcp.c ****         make_ip(buf);
 515:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // send to port:
 516:../SERVER/tcpip/ip_arp_udp_tcp.c ****         //buf[UDP_DST_PORT_H_P]=port>>8;
 517:../SERVER/tcpip/ip_arp_udp_tcp.c ****         //buf[UDP_DST_PORT_L_P]=port & 0xff;
 518:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // sent to port of sender and use "port" as own source:
 519:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[UDP_DST_PORT_H_P]=buf[UDP_SRC_PORT_H_P];
 520:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[UDP_DST_PORT_L_P]= buf[UDP_SRC_PORT_L_P];
 521:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[UDP_SRC_PORT_H_P]=port>>8;
 522:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[UDP_SRC_PORT_L_P]=port & 0xff;
 523:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // calculte the udp length:
 524:../SERVER/tcpip/ip_arp_udp_tcp.c ****         j=UDP_HEADER_LEN+datalen;
 525:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[UDP_LEN_H_P]=j>>8;
 526:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[UDP_LEN_L_P]=j& 0xff;
 527:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // zero the checksum
 528:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[UDP_CHECKSUM_H_P]=0;
 529:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[UDP_CHECKSUM_L_P]=0;
 530:../SERVER/tcpip/ip_arp_udp_tcp.c ****         j=checksum(&buf[IP_SRC_P], 16 + datalen,1);
 531:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[UDP_CHECKSUM_H_P]=j>>8;
 532:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[UDP_CHECKSUM_L_P]=j& 0xff;
 533:../SERVER/tcpip/ip_arp_udp_tcp.c ****         enc28j60PacketSend(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+datalen,buf);
 534:../SERVER/tcpip/ip_arp_udp_tcp.c **** }
 535:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
 536:../SERVER/tcpip/ip_arp_udp_tcp.c **** // you can send a max of 220 bytes of data because we use only one
 537:../SERVER/tcpip/ip_arp_udp_tcp.c **** // byte for the data but udp messages are normally small.
 538:../SERVER/tcpip/ip_arp_udp_tcp.c **** void make_udp_reply_from_request(uint8_t *buf,char *data,uint8_t datalen,uint16_t port)
 539:../SERVER/tcpip/ip_arp_udp_tcp.c **** {
 540:../SERVER/tcpip/ip_arp_udp_tcp.c ****         uint8_t i=0;
 541:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // copy the data:
 542:../SERVER/tcpip/ip_arp_udp_tcp.c ****         while(i<datalen){
 543:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[UDP_DATA_P+i]=data[i];
 544:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 i++;
 545:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 546:../SERVER/tcpip/ip_arp_udp_tcp.c ****         make_udp_reply_from_request_udpdat_ready(buf,datalen,port);
 547:../SERVER/tcpip/ip_arp_udp_tcp.c **** }
 548:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
 549:../SERVER/tcpip/ip_arp_udp_tcp.c **** #endif // UDP_server
 550:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
 551:../SERVER/tcpip/ip_arp_udp_tcp.c **** #if defined (UDP_server) || defined (WWW_server)
 552:../SERVER/tcpip/ip_arp_udp_tcp.c **** // This initializes server
 553:../SERVER/tcpip/ip_arp_udp_tcp.c **** // you must call this function once before you use any of the other functions:
 554:../SERVER/tcpip/ip_arp_udp_tcp.c **** // mymac may be NULL and can be used if you did already call init_mac
 555:../SERVER/tcpip/ip_arp_udp_tcp.c **** void init_udp_or_www_server(uint8_t *mymac,uint8_t *myip){
 556:../SERVER/tcpip/ip_arp_udp_tcp.c ****         uint8_t i=0;
 557:../SERVER/tcpip/ip_arp_udp_tcp.c ****         if (myip){
 558:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 while(i<4){
 559:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         ipaddr[i]=myip[i];
 560:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         i++;
 561:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 }
 562:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 563:../SERVER/tcpip/ip_arp_udp_tcp.c ****         if (mymac) init_mac(mymac);
 564:../SERVER/tcpip/ip_arp_udp_tcp.c **** }
 565:../SERVER/tcpip/ip_arp_udp_tcp.c **** #endif // UDP_server || WWW_server
 566:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
 567:../SERVER/tcpip/ip_arp_udp_tcp.c **** #ifdef WWW_server
 568:../SERVER/tcpip/ip_arp_udp_tcp.c **** // not needed if you want port 80 (the default is port 80):
 569:../SERVER/tcpip/ip_arp_udp_tcp.c **** void www_server_port(uint16_t port){
 20699              		.loc 1 569 0
 20700              		.cfi_startproc
 20701              		@ args = 0, pretend = 0, frame = 0
 20702              		@ frame_needed = 0, uses_anonymous_args = 0
 20703              		@ link register save eliminated.
 20704              	.LVL72:
 570:../SERVER/tcpip/ip_arp_udp_tcp.c ****         wwwport_h=(port>>8)&0xff;
 20705              		.loc 1 570 0
 20706 0000 40F20003 		movw	r3, #:lower16:.LANCHOR3
 20707 0004 C0F20003 		movt	r3, #:upper16:.LANCHOR3
 20708 0008 4FEA1022 		lsr	r2, r0, #8
 20709 000c 1A70     		strb	r2, [r3, #0]
 571:../SERVER/tcpip/ip_arp_udp_tcp.c ****         wwwport_l=(port&0xff);
 20710              		.loc 1 571 0
 20711 000e 40F20003 		movw	r3, #:lower16:.LANCHOR4
 20712 0012 C0F20003 		movt	r3, #:upper16:.LANCHOR4
 20713 0016 1870     		strb	r0, [r3, #0]
 572:../SERVER/tcpip/ip_arp_udp_tcp.c **** }
 20714              		.loc 1 572 0
 20715 0018 7047     		bx	lr
 20716              		.cfi_endproc
 20717              	.LFE52:
 20719 001a 00BF     		.section	.text.fill_buf_p,"ax",%progbits
 20720              		.align	2
 20721              		.global	fill_buf_p
 20722              		.thumb
 20723              		.thumb_func
 20725              	fill_buf_p:
 20726              	.LFB55:
 573:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
 574:../SERVER/tcpip/ip_arp_udp_tcp.c **** // this is for the server not the client:
 575:../SERVER/tcpip/ip_arp_udp_tcp.c **** void make_tcp_synack_from_syn(uint8_t *buf)
 576:../SERVER/tcpip/ip_arp_udp_tcp.c **** {
 577:../SERVER/tcpip/ip_arp_udp_tcp.c ****         uint16_t ck;
 578:../SERVER/tcpip/ip_arp_udp_tcp.c ****         make_eth(buf);
 579:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // total length field in the IP header must be set:
 580:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // 20 bytes IP + 24 bytes (20tcp+4tcp options)
 581:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[IP_TOTLEN_H_P]=0;
 582:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4;
 583:../SERVER/tcpip/ip_arp_udp_tcp.c ****         make_ip(buf);
 584:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_FLAGS_P]=TCP_FLAGS_SYNACK_V;
 585:../SERVER/tcpip/ip_arp_udp_tcp.c ****         make_tcphead(buf,1,0);
 586:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // put an inital seq number
 587:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_SEQ_H_P+0]= 0;
 588:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_SEQ_H_P+1]= 0;
 589:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // we step only the second byte, this allows us to send packts 
 590:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // with 255 bytes, 512  or 765 (step by 3) without generating
 591:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // overlapping numbers.
 592:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_SEQ_H_P+2]= seqnum; 
 593:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_SEQ_H_P+3]= 0;
 594:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // step the inititial seq num by something we will not use
 595:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // during this tcp session:
 596:../SERVER/tcpip/ip_arp_udp_tcp.c ****         seqnum+=3;
 597:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // add an mss options field with MSS to 1280:
 598:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // 1280 in hex is 0x500
 599:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_OPTIONS_P]=2;
 600:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_OPTIONS_P+1]=4;
 601:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_OPTIONS_P+2]=0x05;
 602:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_OPTIONS_P+3]=0x0;
 603:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // The tcp header length is only a 4 bit field (the upper 4 bits).
 604:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // It is calculated in units of 4 bytes.
 605:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // E.g 24 bytes: 24/4=6 => 0x60=header len field
 606:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_HEADER_LEN_P]=0x60;
 607:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // here we must just be sure that the web browser contacting us
 608:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // will send only one get packet
 609:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_WIN_SIZE]=0x0a; // was 1400=0x578, 2560=0xa00 suggested by Andras Tucsni to be able
 610:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_WIN_SIZE+1]=0; //
 611:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + 4 (one option
 612:../SERVER/tcpip/ip_arp_udp_tcp.c ****         ck=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN+4,2);
 613:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_CHECKSUM_H_P]=ck>>8;
 614:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_CHECKSUM_L_P]=ck& 0xff;
 615:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // add 4 for option mss:
 616:../SERVER/tcpip/ip_arp_udp_tcp.c ****         enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4+ETH_HEADER_LEN,buf);
 617:../SERVER/tcpip/ip_arp_udp_tcp.c **** }
 618:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
 619:../SERVER/tcpip/ip_arp_udp_tcp.c **** // you must have initialized info_data_len at some time before calling this function
 620:../SERVER/tcpip/ip_arp_udp_tcp.c **** //
 621:../SERVER/tcpip/ip_arp_udp_tcp.c **** // This info_data_len initialisation is done automatically if you call 
 622:../SERVER/tcpip/ip_arp_udp_tcp.c **** // packetloop_icmp_tcp(buf,enc28j60PacketReceive(BUFFER_SIZE, buf));
 623:../SERVER/tcpip/ip_arp_udp_tcp.c **** // and test the return value for non zero.
 624:../SERVER/tcpip/ip_arp_udp_tcp.c **** //
 625:../SERVER/tcpip/ip_arp_udp_tcp.c **** // dlen is the amount of tcp data (http data) we send in this packet
 626:../SERVER/tcpip/ip_arp_udp_tcp.c **** // You can use this function only immediately after make_tcp_ack_from_any
 627:../SERVER/tcpip/ip_arp_udp_tcp.c **** // This is because this function will NOT modify the eth/ip/tcp header except for
 628:../SERVER/tcpip/ip_arp_udp_tcp.c **** // length and checksum
 629:../SERVER/tcpip/ip_arp_udp_tcp.c **** void www_server_reply(uint8_t *buf,uint16_t dlen)
 630:../SERVER/tcpip/ip_arp_udp_tcp.c **** {
 631:../SERVER/tcpip/ip_arp_udp_tcp.c ****         make_tcp_ack_from_any(buf,info_data_len,0); // send ack for http get
 632:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // fill the header:
 633:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // This code requires that we send only one data packet
 634:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // because we keep no state information. We must therefore set
 635:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // the fin here:
 636:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_FLAGS_P]=TCP_FLAGS_ACK_V|TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V;
 637:../SERVER/tcpip/ip_arp_udp_tcp.c ****         make_tcp_ack_with_data_noflags(buf,dlen); // send data
 638:../SERVER/tcpip/ip_arp_udp_tcp.c **** }
 639:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
 640:../SERVER/tcpip/ip_arp_udp_tcp.c **** #endif // WWW_server
 641:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
 642:../SERVER/tcpip/ip_arp_udp_tcp.c **** #if defined (ALL_clients)
 643:../SERVER/tcpip/ip_arp_udp_tcp.c **** // fill buffer with a prog-mem string
 644:../SERVER/tcpip/ip_arp_udp_tcp.c **** void fill_buf_p(uint8_t *buf,uint16_t len, const char *progmem_s)
 645:../SERVER/tcpip/ip_arp_udp_tcp.c **** {
 20727              		.loc 1 645 0
 20728              		.cfi_startproc
 20729              		@ args = 0, pretend = 0, frame = 0
 20730              		@ frame_needed = 0, uses_anonymous_args = 0
 20731              		@ link register save eliminated.
 20732              	.LVL73:
 646:../SERVER/tcpip/ip_arp_udp_tcp.c ****         while (len){
 20733              		.loc 1 646 0
 20734 0000 71B1     		cbz	r1, .L77
 20735              		.loc 1 644 0
 20736 0002 01F1FF33 		add	r3, r1, #-1
 20737 0006 9BB2     		uxth	r3, r3
 20738 0008 03F10103 		add	r3, r3, #1
 20739 000c 4FF00001 		mov	r1, #0
 20740              	.LVL74:
 20741              	.L76:
 647:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 *buf= *(progmem_s);
 20742              		.loc 1 647 0
 20743 0010 12F801C0 		ldrb	ip, [r2, r1]	@ zero_extendqisi2
 20744 0014 00F801C0 		strb	ip, [r0, r1]
 20745 0018 01F10101 		add	r1, r1, #1
 20746              		.loc 1 646 0
 20747 001c 9942     		cmp	r1, r3
 20748 001e F7D1     		bne	.L76
 20749              	.LVL75:
 20750              	.L77:
 20751 0020 7047     		bx	lr
 20752              		.cfi_endproc
 20753              	.LFE55:
 20755 0022 00BF     		.section	.text.client_ntp_process_answer,"ax",%progbits
 20756              		.align	2
 20757              		.global	client_ntp_process_answer
 20758              		.thumb
 20759              		.thumb_func
 20761              	client_ntp_process_answer:
 20762              	.LFB57:
 648:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf++;
 649:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 progmem_s++;
 650:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 len--;
 651:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 652:../SERVER/tcpip/ip_arp_udp_tcp.c **** }
 653:../SERVER/tcpip/ip_arp_udp_tcp.c **** #endif 
 654:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
 655:../SERVER/tcpip/ip_arp_udp_tcp.c **** #ifdef PING_client
 656:../SERVER/tcpip/ip_arp_udp_tcp.c **** // icmp echo, matchpat is a pattern that has to be sent back by the 
 657:../SERVER/tcpip/ip_arp_udp_tcp.c **** // host answering the ping.
 658:../SERVER/tcpip/ip_arp_udp_tcp.c **** // The ping is sent to destip  and mac dstmac
 659:../SERVER/tcpip/ip_arp_udp_tcp.c **** void client_icmp_request(uint8_t *buf,uint8_t *destip,uint8_t *dstmac)
 660:../SERVER/tcpip/ip_arp_udp_tcp.c **** {
 661:../SERVER/tcpip/ip_arp_udp_tcp.c ****         uint8_t i=0;
 662:../SERVER/tcpip/ip_arp_udp_tcp.c ****         uint16_t ck;
 663:../SERVER/tcpip/ip_arp_udp_tcp.c ****         //
 664:../SERVER/tcpip/ip_arp_udp_tcp.c ****         while(i<6){
 665:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[ETH_DST_MAC +i]=dstmac[i]; // gw mac in local lan or host mac
 666:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[ETH_SRC_MAC +i]=macaddr[i];
 667:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 i++;
 668:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 669:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
 670:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
 671:../SERVER/tcpip/ip_arp_udp_tcp.c ****         fill_buf_p(&buf[IP_P],9,iphdr);
 672:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[IP_ID_L_P]=ipid; ipid++;
 673:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[IP_TOTLEN_L_P]=0x54;
 674:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[IP_PROTO_P]=IP_PROTO_ICMP_V;
 675:../SERVER/tcpip/ip_arp_udp_tcp.c ****         i=0;
 676:../SERVER/tcpip/ip_arp_udp_tcp.c ****         while(i<4){
 677:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[IP_DST_P+i]=destip[i];
 678:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[IP_SRC_P+i]=ipaddr[i];
 679:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 i++;
 680:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 681:../SERVER/tcpip/ip_arp_udp_tcp.c ****         fill_ip_hdr_checksum(buf);
 682:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[ICMP_TYPE_P]=ICMP_TYPE_ECHOREQUEST_V;
 683:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[ICMP_TYPE_P+1]=0; // code
 684:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // zero the checksum
 685:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[ICMP_CHECKSUM_H_P]=0;
 686:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[ICMP_CHECKSUM_L_P]=0;
 687:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // a possibly unique id of this host:
 688:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[ICMP_IDENT_H_P]=5; // some number 
 689:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[ICMP_IDENT_L_P]=ipaddr[3]; // last byte of my IP
 690:../SERVER/tcpip/ip_arp_udp_tcp.c ****         //
 691:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[ICMP_IDENT_L_P+1]=0; // seq number, high byte
 692:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[ICMP_IDENT_L_P+2]=1; // seq number, low byte, we send only 1 ping at a time
 693:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // copy the data:
 694:../SERVER/tcpip/ip_arp_udp_tcp.c ****         i=0;
 695:../SERVER/tcpip/ip_arp_udp_tcp.c ****         while(i<56){ 
 696:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[ICMP_DATA_P+i]=PINGPATTERN;
 697:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 i++;
 698:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 699:../SERVER/tcpip/ip_arp_udp_tcp.c ****         //
 700:../SERVER/tcpip/ip_arp_udp_tcp.c ****         ck=checksum(&buf[ICMP_TYPE_P], 56+8,0);
 701:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[ICMP_CHECKSUM_H_P]=ck>>8;
 702:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[ICMP_CHECKSUM_L_P]=ck& 0xff;
 703:../SERVER/tcpip/ip_arp_udp_tcp.c ****         enc28j60PacketSend(98,buf);
 704:../SERVER/tcpip/ip_arp_udp_tcp.c **** }
 705:../SERVER/tcpip/ip_arp_udp_tcp.c **** #endif // PING_client
 706:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
 707:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
 708:../SERVER/tcpip/ip_arp_udp_tcp.c **** #ifdef NTP_client
 709:../SERVER/tcpip/ip_arp_udp_tcp.c **** // ntp udp packet
 710:../SERVER/tcpip/ip_arp_udp_tcp.c **** // See http://tools.ietf.org/html/rfc958 for details
 711:../SERVER/tcpip/ip_arp_udp_tcp.c **** //
 712:../SERVER/tcpip/ip_arp_udp_tcp.c **** void client_ntp_request(uint8_t *buf,uint8_t *ntpip,uint8_t srcport,uint8_t *dstmac)
 713:../SERVER/tcpip/ip_arp_udp_tcp.c **** {
 714:../SERVER/tcpip/ip_arp_udp_tcp.c ****         uint8_t i=0;
 715:../SERVER/tcpip/ip_arp_udp_tcp.c ****         uint16_t ck;
 716:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
 717:../SERVER/tcpip/ip_arp_udp_tcp.c ****         while(i<6){
 718:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[ETH_DST_MAC +i]=dstmac[i]; // gw mac in local lan or host mac
 719:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[ETH_SRC_MAC +i]=macaddr[i];
 720:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 i++;
 721:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 722:../SERVER/tcpip/ip_arp_udp_tcp.c **** 				
 723:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
 724:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
 725:../SERVER/tcpip/ip_arp_udp_tcp.c ****         fill_buf_p(&buf[IP_P],9,iphdr);
 726:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[IP_ID_L_P]=ipid; ipid++;
 727:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[IP_TOTLEN_L_P]=0x4c;
 728:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[IP_PROTO_P]=IP_PROTO_UDP_V;
 729:../SERVER/tcpip/ip_arp_udp_tcp.c ****         i=0;
 730:../SERVER/tcpip/ip_arp_udp_tcp.c ****         while(i<4){
 731:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[IP_DST_P+i]=ntpip[i];
 732:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[IP_SRC_P+i]=ipaddr[i];
 733:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 i++;
 734:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 735:../SERVER/tcpip/ip_arp_udp_tcp.c ****         fill_ip_hdr_checksum(buf);
 736:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[UDP_DST_PORT_H_P]=0;
 737:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[UDP_DST_PORT_L_P]=0x7b; // ntp=123
 738:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[UDP_SRC_PORT_H_P]=10;
 739:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[UDP_SRC_PORT_L_P]=srcport; // lower 8 bit of src port
 740:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[UDP_LEN_H_P]=0;
 741:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[UDP_LEN_L_P]=56; // fixed len
 742:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // zero the checksum
 743:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[UDP_CHECKSUM_H_P]=0;
 744:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[UDP_CHECKSUM_L_P]=0;
 745:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // copy the data:
 746:../SERVER/tcpip/ip_arp_udp_tcp.c ****         i=0;
 747:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // most fields are zero, here we zero everything and fill later
 748:../SERVER/tcpip/ip_arp_udp_tcp.c ****         while(i<48){ 
 749:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[UDP_DATA_P+i]=0;
 750:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 i++;
 751:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 752:../SERVER/tcpip/ip_arp_udp_tcp.c ****         fill_buf_p(&buf[UDP_DATA_P],10,ntpreqhdr);
 753:../SERVER/tcpip/ip_arp_udp_tcp.c ****         //
 754:../SERVER/tcpip/ip_arp_udp_tcp.c ****         ck=checksum(&buf[IP_SRC_P], 16 + 48,1);
 755:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[UDP_CHECKSUM_H_P]=ck>>8;
 756:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[UDP_CHECKSUM_L_P]=ck& 0xff;
 757:../SERVER/tcpip/ip_arp_udp_tcp.c ****         enc28j60PacketSend(90,buf);
 758:../SERVER/tcpip/ip_arp_udp_tcp.c **** }
 759:../SERVER/tcpip/ip_arp_udp_tcp.c **** // process the answer from the ntp server:
 760:../SERVER/tcpip/ip_arp_udp_tcp.c **** // if dstport==0 then accept any port otherwise only answers going to dstport
 761:../SERVER/tcpip/ip_arp_udp_tcp.c **** // return 1 on sucessful processing of answer
 762:../SERVER/tcpip/ip_arp_udp_tcp.c **** uint8_t client_ntp_process_answer(uint8_t *buf,uint32_t *time,uint8_t dstport_l){
 20763              		.loc 1 762 0
 20764              		.cfi_startproc
 20765              		@ args = 0, pretend = 0, frame = 0
 20766              		@ frame_needed = 0, uses_anonymous_args = 0
 20767              		@ link register save eliminated.
 20768              	.LVL76:
 763:../SERVER/tcpip/ip_arp_udp_tcp.c ****         if (dstport_l){
 20769              		.loc 1 763 0
 20770 0000 1346     		mov	r3, r2
 20771 0002 1AB1     		cbz	r2, .L80
 764:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 if (buf[UDP_DST_PORT_L_P]!=dstport_l){ 
 20772              		.loc 1 764 0
 20773 0004 90F82520 		ldrb	r2, [r0, #37]	@ zero_extendqisi2
 20774              	.LVL77:
 20775 0008 9A42     		cmp	r2, r3
 20776 000a 1ED1     		bne	.L81
 20777              	.LVL78:
 20778              	.L80:
 765:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         return(0);
 766:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 }
 767:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 768:../SERVER/tcpip/ip_arp_udp_tcp.c ****         if (buf[UDP_LEN_H_P]!=0 || buf[UDP_LEN_L_P]!=56 || buf[UDP_SRC_PORT_L_P]!=0x7b){
 20779              		.loc 1 768 0
 20780 000c 90F82630 		ldrb	r3, [r0, #38]	@ zero_extendqisi2
 20781              	.LVL79:
 20782 0010 DBB9     		cbnz	r3, .L81
 20783 0012 90F82730 		ldrb	r3, [r0, #39]	@ zero_extendqisi2
 20784 0016 382B     		cmp	r3, #56
 20785 0018 17D1     		bne	.L81
 20786 001a 90F82330 		ldrb	r3, [r0, #35]	@ zero_extendqisi2
 20787 001e 7B2B     		cmp	r3, #123
 20788 0020 13D1     		bne	.L81
 769:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 // not ntp
 770:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 return(0);
 771:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 772:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // copy time from the transmit time stamp field:
 773:../SERVER/tcpip/ip_arp_udp_tcp.c ****         *time=((uint32_t)buf[0x52]<<24)|((uint32_t)buf[0x53]<<16)|((uint32_t)buf[0x54]<<8)|((uint32
 20789              		.loc 1 773 0
 20790 0022 90F85220 		ldrb	r2, [r0, #82]	@ zero_extendqisi2
 20791              	.LVL80:
 20792 0026 90F85330 		ldrb	r3, [r0, #83]	@ zero_extendqisi2
 20793 002a 4FEA0343 		lsl	r3, r3, #16
 20794 002e 43EA0262 		orr	r2, r3, r2, lsl #24
 20795 0032 90F85530 		ldrb	r3, [r0, #85]	@ zero_extendqisi2
 20796 0036 42EA0303 		orr	r3, r2, r3
 20797 003a 90F85420 		ldrb	r2, [r0, #84]	@ zero_extendqisi2
 20798 003e 43EA0223 		orr	r3, r3, r2, lsl #8
 20799 0042 0B60     		str	r3, [r1, #0]
 20800 0044 4FF00100 		mov	r0, #1
 20801              	.LVL81:
 774:../SERVER/tcpip/ip_arp_udp_tcp.c ****         return(1);
 20802              		.loc 1 774 0
 20803 0048 7047     		bx	lr
 20804              	.LVL82:
 20805              	.L81:
 20806 004a 4FF00000 		mov	r0, #0
 20807              	.LVL83:
 775:../SERVER/tcpip/ip_arp_udp_tcp.c **** }
 20808              		.loc 1 775 0
 20809 004e 7047     		bx	lr
 20810              		.cfi_endproc
 20811              	.LFE57:
 20813              		.section	.text.send_udp_prepare,"ax",%progbits
 20814              		.align	2
 20815              		.global	send_udp_prepare
 20816              		.thumb
 20817              		.thumb_func
 20819              	send_udp_prepare:
 20820              	.LFB58:
 776:../SERVER/tcpip/ip_arp_udp_tcp.c **** #endif
 777:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
 778:../SERVER/tcpip/ip_arp_udp_tcp.c **** #ifdef UDP_client
 779:../SERVER/tcpip/ip_arp_udp_tcp.c **** // -------------------- send a spontanious UDP packet to a server 
 780:../SERVER/tcpip/ip_arp_udp_tcp.c **** // There are two ways of using this:
 781:../SERVER/tcpip/ip_arp_udp_tcp.c **** // 1) you call send_udp_prepare, you fill the data yourself into buf starting at buf[UDP_DATA_P], 
 782:../SERVER/tcpip/ip_arp_udp_tcp.c **** // you send the packet by calling send_udp_transmit
 783:../SERVER/tcpip/ip_arp_udp_tcp.c **** //
 784:../SERVER/tcpip/ip_arp_udp_tcp.c **** // 2) You just allocate a large enough buffer for you data and you call send_udp and nothing else
 785:../SERVER/tcpip/ip_arp_udp_tcp.c **** // needs to be done.
 786:../SERVER/tcpip/ip_arp_udp_tcp.c **** //
 787:../SERVER/tcpip/ip_arp_udp_tcp.c **** void send_udp_prepare(uint8_t *buf,uint16_t sport, const uint8_t *dip, uint16_t dport,const uint8_t
 788:../SERVER/tcpip/ip_arp_udp_tcp.c **** {
 20821              		.loc 1 788 0
 20822              		.cfi_startproc
 20823              		@ args = 4, pretend = 0, frame = 0
 20824              		@ frame_needed = 0, uses_anonymous_args = 0
 20825              	.LVL84:
 20826 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 20827              	.LCFI8:
 20828              		.cfi_def_cfa_offset 24
 20829 0004 0446     		mov	r4, r0
 20830              		.cfi_offset 14, -4
 20831              		.cfi_offset 8, -8
 20832              		.cfi_offset 7, -12
 20833              		.cfi_offset 6, -16
 20834              		.cfi_offset 5, -20
 20835              		.cfi_offset 4, -24
 20836 0006 8846     		mov	r8, r1
 20837 0008 1546     		mov	r5, r2
 20838 000a 1F46     		mov	r7, r3
 20839 000c 069E     		ldr	r6, [sp, #24]
 20840              		.loc 1 788 0
 20841 000e 4FF00003 		mov	r3, #0
 20842              	.LVL85:
 789:../SERVER/tcpip/ip_arp_udp_tcp.c ****         uint8_t i=0;
 790:../SERVER/tcpip/ip_arp_udp_tcp.c ****         //
 791:../SERVER/tcpip/ip_arp_udp_tcp.c ****         while(i<6){
 792:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[ETH_DST_MAC +i]=dstmac[i]; // gw mac in local lan or host mac
 793:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[ETH_SRC_MAC +i]=macaddr[i];
 20843              		.loc 1 793 0
 20844 0012 40F20000 		movw	r0, #:lower16:.LANCHOR2
 20845              	.LVL86:
 20846 0016 C0F20000 		movt	r0, #:upper16:.LANCHOR2
 20847              	.LVL87:
 20848              	.L85:
 20849              		.loc 1 792 0
 20850 001a F25C     		ldrb	r2, [r6, r3]	@ zero_extendqisi2
 20851 001c E254     		strb	r2, [r4, r3]
 20852              		.loc 1 793 0
 20853 001e 04EB0302 		add	r2, r4, r3
 20854 0022 C15C     		ldrb	r1, [r0, r3]	@ zero_extendqisi2
 20855 0024 9171     		strb	r1, [r2, #6]
 20856 0026 03F10103 		add	r3, r3, #1
 20857              		.loc 1 791 0
 20858 002a 062B     		cmp	r3, #6
 20859 002c F5D1     		bne	.L85
 794:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 i++;
 795:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 796:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
 20860              		.loc 1 796 0
 20861 002e 4FF00803 		mov	r3, #8
 20862 0032 2373     		strb	r3, [r4, #12]
 797:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
 20863              		.loc 1 797 0
 20864 0034 4FF00006 		mov	r6, #0
 20865              	.LVL88:
 20866 0038 6673     		strb	r6, [r4, #13]
 798:../SERVER/tcpip/ip_arp_udp_tcp.c ****         fill_buf_p(&buf[IP_P],9,iphdr);
 20867              		.loc 1 798 0
 20868 003a 04F10E00 		add	r0, r4, #14
 20869 003e 4FF00901 		mov	r1, #9
 20870 0042 40F20002 		movw	r2, #:lower16:.LANCHOR5
 20871 0046 C0F20002 		movt	r2, #:upper16:.LANCHOR5
 20872 004a FFF7FEFF 		bl	fill_buf_p
 799:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[IP_ID_L_P]=ipid; ipid++;
 20873              		.loc 1 799 0
 20874 004e 40F20003 		movw	r3, #:lower16:.LANCHOR6
 20875 0052 C0F20003 		movt	r3, #:upper16:.LANCHOR6
 20876 0056 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 20877 0058 E274     		strb	r2, [r4, #19]
 20878 005a 02F10102 		add	r2, r2, #1
 20879 005e 1A70     		strb	r2, [r3, #0]
 800:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // total length field in the IP header must be set:
 801:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[IP_TOTLEN_H_P]=0;
 20880              		.loc 1 801 0
 20881 0060 2674     		strb	r6, [r4, #16]
 802:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // done in transmit: buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
 803:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[IP_PROTO_P]=IP_PROTO_UDP_V;
 20882              		.loc 1 803 0
 20883 0062 4FF01103 		mov	r3, #17
 20884 0066 E375     		strb	r3, [r4, #23]
 20885 0068 2346     		mov	r3, r4
 804:../SERVER/tcpip/ip_arp_udp_tcp.c ****         i=0;
 805:../SERVER/tcpip/ip_arp_udp_tcp.c ****         while(i<4){
 806:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[IP_DST_P+i]=dip[i];
 807:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[IP_SRC_P+i]=ipaddr[i];
 20886              		.loc 1 807 0
 20887 006a 40F20001 		movw	r1, #:lower16:.LANCHOR0
 20888 006e C0F20001 		movt	r1, #:upper16:.LANCHOR0
 20889              	.L86:
 20890              		.loc 1 806 0
 20891 0072 AA5D     		ldrb	r2, [r5, r6]	@ zero_extendqisi2
 20892 0074 9A77     		strb	r2, [r3, #30]
 20893              		.loc 1 807 0
 20894 0076 8A5D     		ldrb	r2, [r1, r6]	@ zero_extendqisi2
 20895 0078 9A76     		strb	r2, [r3, #26]
 20896 007a 06F10106 		add	r6, r6, #1
 20897 007e 03F10103 		add	r3, r3, #1
 20898              		.loc 1 805 0
 20899 0082 042E     		cmp	r6, #4
 20900 0084 F5D1     		bne	.L86
 808:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 i++;
 809:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 810:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // done in transmit: fill_ip_hdr_checksum(buf);
 811:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[UDP_DST_PORT_H_P]=(dport>>8);
 20901              		.loc 1 811 0
 20902 0086 4FEA1723 		lsr	r3, r7, #8
 20903 008a 84F82430 		strb	r3, [r4, #36]
 812:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[UDP_DST_PORT_L_P]=0xff&dport; 
 20904              		.loc 1 812 0
 20905 008e 84F82570 		strb	r7, [r4, #37]
 20906              	.LVL89:
 813:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[UDP_SRC_PORT_H_P]=(sport>>8);
 20907              		.loc 1 813 0
 20908 0092 4FEA1823 		lsr	r3, r8, #8
 20909 0096 84F82230 		strb	r3, [r4, #34]
 814:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[UDP_SRC_PORT_L_P]=sport&0xff; 
 20910              		.loc 1 814 0
 20911 009a 84F82380 		strb	r8, [r4, #35]
 815:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[UDP_LEN_H_P]=0;
 20912              		.loc 1 815 0
 20913 009e 4FF00003 		mov	r3, #0
 20914 00a2 84F82630 		strb	r3, [r4, #38]
 816:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // done in transmit: buf[UDP_LEN_L_P]=UDP_HEADER_LEN+datalen;
 817:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // zero the checksum
 818:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[UDP_CHECKSUM_H_P]=0;
 20915              		.loc 1 818 0
 20916 00a6 84F82830 		strb	r3, [r4, #40]
 819:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[UDP_CHECKSUM_L_P]=0;
 20917              		.loc 1 819 0
 20918 00aa 84F82930 		strb	r3, [r4, #41]
 820:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // copy the data:
 821:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // now starting with the first byte at buf[UDP_DATA_P]
 822:../SERVER/tcpip/ip_arp_udp_tcp.c ****         //
 823:../SERVER/tcpip/ip_arp_udp_tcp.c **** }
 20919              		.loc 1 823 0
 20920 00ae BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 20921              		.cfi_endproc
 20922              	.LFE58:
 20924 00b2 00BF     		.section	.text.get_mac_with_arp_wait,"ax",%progbits
 20925              		.align	2
 20926              		.global	get_mac_with_arp_wait
 20927              		.thumb
 20928              		.thumb_func
 20930              	get_mac_with_arp_wait:
 20931              	.LFB62:
 824:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
 825:../SERVER/tcpip/ip_arp_udp_tcp.c **** void send_udp_transmit(uint8_t *buf,uint16_t datalen)
 826:../SERVER/tcpip/ip_arp_udp_tcp.c **** {
 827:../SERVER/tcpip/ip_arp_udp_tcp.c ****         uint16_t tmp16;
 828:../SERVER/tcpip/ip_arp_udp_tcp.c ****         tmp16=IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
 829:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[IP_TOTLEN_L_P]=tmp16& 0xff;
 830:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[IP_TOTLEN_H_P]=tmp16>>8;
 831:../SERVER/tcpip/ip_arp_udp_tcp.c ****         fill_ip_hdr_checksum(buf);
 832:../SERVER/tcpip/ip_arp_udp_tcp.c ****         tmp16=UDP_HEADER_LEN+datalen;
 833:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[UDP_LEN_L_P]=tmp16& 0xff;
 834:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[UDP_LEN_H_P]=tmp16>>8;
 835:../SERVER/tcpip/ip_arp_udp_tcp.c ****         //
 836:../SERVER/tcpip/ip_arp_udp_tcp.c ****         tmp16=checksum(&buf[IP_SRC_P], 16 + datalen,1);
 837:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[UDP_CHECKSUM_L_P]=tmp16& 0xff;
 838:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[UDP_CHECKSUM_H_P]=tmp16>>8;
 839:../SERVER/tcpip/ip_arp_udp_tcp.c ****         enc28j60PacketSend(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+datalen,buf);
 840:../SERVER/tcpip/ip_arp_udp_tcp.c **** }
 841:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
 842:../SERVER/tcpip/ip_arp_udp_tcp.c **** void send_udp(uint8_t *buf,char *data,uint8_t datalen,uint16_t sport, const uint8_t *dip, uint16_t 
 843:../SERVER/tcpip/ip_arp_udp_tcp.c **** {
 844:../SERVER/tcpip/ip_arp_udp_tcp.c **** 	      uint8_t i=0;
 845:../SERVER/tcpip/ip_arp_udp_tcp.c ****         send_udp_prepare(buf,sport, dip, dport,dstmac);
 846:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
 847:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // limit the length:
 848:../SERVER/tcpip/ip_arp_udp_tcp.c ****         if (datalen>220){
 849:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 datalen=220;
 850:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 851:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // copy the data:
 852:../SERVER/tcpip/ip_arp_udp_tcp.c ****         i=0;
 853:../SERVER/tcpip/ip_arp_udp_tcp.c ****         while(i<datalen){
 854:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[UDP_DATA_P+i]=data[i];
 855:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 i++;
 856:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 857:../SERVER/tcpip/ip_arp_udp_tcp.c ****         //
 858:../SERVER/tcpip/ip_arp_udp_tcp.c ****         send_udp_transmit(buf,datalen);
 859:../SERVER/tcpip/ip_arp_udp_tcp.c **** }
 860:../SERVER/tcpip/ip_arp_udp_tcp.c **** #endif // UDP_client
 861:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
 862:../SERVER/tcpip/ip_arp_udp_tcp.c **** #ifdef WOL_client
 863:../SERVER/tcpip/ip_arp_udp_tcp.c **** // -------------------- special code to make a WOL packet
 864:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
 865:../SERVER/tcpip/ip_arp_udp_tcp.c **** // A WOL (Wake on Lan) packet is a UDP packet to the broadcast
 866:../SERVER/tcpip/ip_arp_udp_tcp.c **** // address and UDP port 9. The data part contains 6x FF followed by
 867:../SERVER/tcpip/ip_arp_udp_tcp.c **** // 16 times the mac address of the host to wake-up
 868:../SERVER/tcpip/ip_arp_udp_tcp.c **** //
 869:../SERVER/tcpip/ip_arp_udp_tcp.c **** void send_wol(uint8_t *buf,uint8_t *wolmac)
 870:../SERVER/tcpip/ip_arp_udp_tcp.c **** {
 871:../SERVER/tcpip/ip_arp_udp_tcp.c ****         uint8_t i=0;
 872:../SERVER/tcpip/ip_arp_udp_tcp.c ****         uint8_t m=0;
 873:../SERVER/tcpip/ip_arp_udp_tcp.c ****         uint8_t pos=0;
 874:../SERVER/tcpip/ip_arp_udp_tcp.c ****         uint16_t ck;
 875:../SERVER/tcpip/ip_arp_udp_tcp.c ****         //
 876:../SERVER/tcpip/ip_arp_udp_tcp.c ****         while(i<6){
 877:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[ETH_DST_MAC +i]=0xff;
 878:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[ETH_SRC_MAC +i]=macaddr[i];
 879:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 i++;
 880:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 881:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
 882:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
 883:../SERVER/tcpip/ip_arp_udp_tcp.c ****         fill_buf_p(&buf[IP_P],9,iphdr);
 884:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[IP_ID_L_P]=ipid; ipid++;
 885:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[IP_TOTLEN_L_P]=0x82; //  fixed len
 886:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[IP_PROTO_P]=IP_PROTO_UDP_V; // wol uses udp
 887:../SERVER/tcpip/ip_arp_udp_tcp.c ****         i=0;
 888:../SERVER/tcpip/ip_arp_udp_tcp.c ****         while(i<4){
 889:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[IP_SRC_P+i]=ipaddr[i];
 890:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[IP_DST_P+i]=0xff;
 891:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 i++;
 892:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 893:../SERVER/tcpip/ip_arp_udp_tcp.c ****         fill_ip_hdr_checksum(buf);
 894:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[UDP_DST_PORT_H_P]=0;
 895:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[UDP_DST_PORT_L_P]=0x9; // wol=normally 9
 896:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[UDP_SRC_PORT_H_P]=10;
 897:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[UDP_SRC_PORT_L_P]=0x42; // source port does not matter
 898:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[UDP_LEN_H_P]=0;
 899:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[UDP_LEN_L_P]=110; // fixed len
 900:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // zero the checksum
 901:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[UDP_CHECKSUM_H_P]=0;
 902:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[UDP_CHECKSUM_L_P]=0;
 903:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // copy the data (102 bytes):
 904:../SERVER/tcpip/ip_arp_udp_tcp.c ****         i=0;
 905:../SERVER/tcpip/ip_arp_udp_tcp.c ****         while(i<6){ 
 906:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[UDP_DATA_P+i]=0xff;
 907:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 i++;
 908:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 909:../SERVER/tcpip/ip_arp_udp_tcp.c ****         m=0;
 910:../SERVER/tcpip/ip_arp_udp_tcp.c ****         pos=UDP_DATA_P+6;
 911:../SERVER/tcpip/ip_arp_udp_tcp.c ****         while (m<16){
 912:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 i=0;
 913:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 while(i<6){ 
 914:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         buf[pos]=wolmac[i];
 915:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         i++;
 916:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         pos++;
 917:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 }
 918:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 m++;
 919:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 920:../SERVER/tcpip/ip_arp_udp_tcp.c ****         //
 921:../SERVER/tcpip/ip_arp_udp_tcp.c ****         ck=checksum(&buf[IP_SRC_P], 16+ 102,1);
 922:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[UDP_CHECKSUM_H_P]=ck>>8;
 923:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[UDP_CHECKSUM_L_P]=ck& 0xff;
 924:../SERVER/tcpip/ip_arp_udp_tcp.c ****         enc28j60PacketSend(pos,buf);
 925:../SERVER/tcpip/ip_arp_udp_tcp.c **** }
 926:../SERVER/tcpip/ip_arp_udp_tcp.c **** #endif // WOL_client
 927:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
 928:../SERVER/tcpip/ip_arp_udp_tcp.c **** #if defined GRATARP
 929:../SERVER/tcpip/ip_arp_udp_tcp.c **** // Send a Gratuitous arp, this is to refresh the arp
 930:../SERVER/tcpip/ip_arp_udp_tcp.c **** // cash of routers and switches. It can improve the response
 931:../SERVER/tcpip/ip_arp_udp_tcp.c **** // time in wifi networks as some wifi equipment expects the initial
 932:../SERVER/tcpip/ip_arp_udp_tcp.c **** // communication to not start from the network side. That is wrong
 933:../SERVER/tcpip/ip_arp_udp_tcp.c **** // but some consumer devices are made like this.
 934:../SERVER/tcpip/ip_arp_udp_tcp.c **** //
 935:../SERVER/tcpip/ip_arp_udp_tcp.c **** // A Gratuitous ARP can be a request or a reply.
 936:../SERVER/tcpip/ip_arp_udp_tcp.c **** // A request frame is as well called Unsolicited ARP
 937:../SERVER/tcpip/ip_arp_udp_tcp.c **** uint8_t gratutious_arp(uint8_t *buf)
 938:../SERVER/tcpip/ip_arp_udp_tcp.c **** {
 939:../SERVER/tcpip/ip_arp_udp_tcp.c ****         uint8_t i=0;
 940:../SERVER/tcpip/ip_arp_udp_tcp.c ****         if (!enc28j60linkup()){
 941:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 return(0);
 942:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 943:../SERVER/tcpip/ip_arp_udp_tcp.c ****         //
 944:../SERVER/tcpip/ip_arp_udp_tcp.c ****         while(i<6){
 945:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[ETH_DST_MAC +i]=0xff;
 946:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[ETH_SRC_MAC +i]=macaddr[i];
 947:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 i++;
 948:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 949:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[ETH_TYPE_H_P] = ETHTYPE_ARP_H_V;
 950:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[ETH_TYPE_L_P] = ETHTYPE_ARP_L_V;
 951:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // arp request and reply are the same execept for
 952:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // the opcode:
 953:../SERVER/tcpip/ip_arp_udp_tcp.c ****         fill_buf_p(&buf[ETH_ARP_P],8,arpreqhdr); 
 954:../SERVER/tcpip/ip_arp_udp_tcp.c ****         //buf[ETH_ARP_OPCODE_L_P]=ETH_ARP_OPCODE_REPLY_L_V; // reply
 955:../SERVER/tcpip/ip_arp_udp_tcp.c ****         i=0;
 956:../SERVER/tcpip/ip_arp_udp_tcp.c ****         while(i<6){
 957:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[ETH_ARP_SRC_MAC_P +i]=macaddr[i];
 958:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[ETH_ARP_DST_MAC_P+i]=0xff;
 959:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 i++;
 960:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 961:../SERVER/tcpip/ip_arp_udp_tcp.c ****         i=0;
 962:../SERVER/tcpip/ip_arp_udp_tcp.c ****         while(i<4){
 963:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[ETH_ARP_DST_IP_P+i]=ipaddr[i];
 964:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
 965:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 i++;
 966:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 967:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // 0x2a=42=len of packet
 968:../SERVER/tcpip/ip_arp_udp_tcp.c ****         enc28j60PacketSend(0x2a,buf);
 969:../SERVER/tcpip/ip_arp_udp_tcp.c ****         return(1);
 970:../SERVER/tcpip/ip_arp_udp_tcp.c **** }
 971:../SERVER/tcpip/ip_arp_udp_tcp.c **** #endif // GRATARP
 972:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
 973:../SERVER/tcpip/ip_arp_udp_tcp.c **** #if ARP_MAC_resolver_client
 974:../SERVER/tcpip/ip_arp_udp_tcp.c **** // make a arp request
 975:../SERVER/tcpip/ip_arp_udp_tcp.c **** // Note: you must have initialized the stack with 
 976:../SERVER/tcpip/ip_arp_udp_tcp.c **** // init_udp_or_www_server or client_ifconfig 
 977:../SERVER/tcpip/ip_arp_udp_tcp.c **** // before you can use this function
 978:../SERVER/tcpip/ip_arp_udp_tcp.c **** void client_arp_whohas(uint8_t *buf,uint8_t *ip_we_search)
 979:../SERVER/tcpip/ip_arp_udp_tcp.c **** {
 980:../SERVER/tcpip/ip_arp_udp_tcp.c ****         uint8_t i=0;
 981:../SERVER/tcpip/ip_arp_udp_tcp.c ****         if (ipaddr[0]==0) return; // error ipaddr not set
 982:../SERVER/tcpip/ip_arp_udp_tcp.c ****         //
 983:../SERVER/tcpip/ip_arp_udp_tcp.c ****         while(i<6){
 984:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[ETH_DST_MAC +i]=0xff;
 985:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[ETH_SRC_MAC +i]=macaddr[i];
 986:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 i++;
 987:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 988:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[ETH_TYPE_H_P] = ETHTYPE_ARP_H_V;
 989:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[ETH_TYPE_L_P] = ETHTYPE_ARP_L_V;
 990:../SERVER/tcpip/ip_arp_udp_tcp.c ****         fill_buf_p(&buf[ETH_ARP_P],8,arpreqhdr);
 991:../SERVER/tcpip/ip_arp_udp_tcp.c ****         i=0;
 992:../SERVER/tcpip/ip_arp_udp_tcp.c ****         while(i<6){
 993:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[ETH_ARP_SRC_MAC_P +i]=macaddr[i];
 994:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[ETH_ARP_DST_MAC_P+i]=0;
 995:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 i++;
 996:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
 997:../SERVER/tcpip/ip_arp_udp_tcp.c ****         i=0;
 998:../SERVER/tcpip/ip_arp_udp_tcp.c ****         while(i<4){
 999:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[ETH_ARP_DST_IP_P+i]=*(ip_we_search +i);
1000:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
1001:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 i++;
1002:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
1003:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // 0x2a=42=len of packet
1004:../SERVER/tcpip/ip_arp_udp_tcp.c ****         enc28j60PacketSend(0x2a,buf);
1005:../SERVER/tcpip/ip_arp_udp_tcp.c **** }
1006:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
1007:../SERVER/tcpip/ip_arp_udp_tcp.c **** // return zero when current transaction is finished
1008:../SERVER/tcpip/ip_arp_udp_tcp.c **** uint8_t get_mac_with_arp_wait(void)
1009:../SERVER/tcpip/ip_arp_udp_tcp.c **** {
 20932              		.loc 1 1009 0
 20933              		.cfi_startproc
 20934              		@ args = 0, pretend = 0, frame = 0
 20935              		@ frame_needed = 0, uses_anonymous_args = 0
 20936              		@ link register save eliminated.
 20937              		.loc 1 1009 0
 20938 0000 40F20003 		movw	r3, #:lower16:.LANCHOR7
 20939 0004 C0F20003 		movt	r3, #:upper16:.LANCHOR7
 20940 0008 1878     		ldrb	r0, [r3, #0]	@ zero_extendqisi2
1010:../SERVER/tcpip/ip_arp_udp_tcp.c ****         if (arpip_state == WGW_HAVE_MAC){
1011:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 return(0);
1012:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
1013:../SERVER/tcpip/ip_arp_udp_tcp.c ****         return(1);
1014:../SERVER/tcpip/ip_arp_udp_tcp.c **** }
 20941              		.loc 1 1014 0
 20942 000a 0238     		subs	r0, r0, #2
 20943 000c 18BF     		it	ne
 20944 000e 0120     		movne	r0, #1
 20945 0010 7047     		bx	lr
 20946              		.cfi_endproc
 20947              	.LFE62:
 20949 0012 00BF     		.section	.text.get_mac_with_arp,"ax",%progbits
 20950              		.align	2
 20951              		.global	get_mac_with_arp
 20952              		.thumb
 20953              		.thumb_func
 20955              	get_mac_with_arp:
 20956              	.LFB63:
1015:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
1016:../SERVER/tcpip/ip_arp_udp_tcp.c **** // reference_number is something that is just returned in the callback
1017:../SERVER/tcpip/ip_arp_udp_tcp.c **** // to make matching and waiting for a given ip/mac address pair easier
1018:../SERVER/tcpip/ip_arp_udp_tcp.c **** // Note: you must have initialized the stack with 
1019:../SERVER/tcpip/ip_arp_udp_tcp.c **** // init_udp_or_www_server or client_ifconfig 
1020:../SERVER/tcpip/ip_arp_udp_tcp.c **** // before you can use this function
1021:../SERVER/tcpip/ip_arp_udp_tcp.c **** void get_mac_with_arp(uint8_t *ip, uint8_t reference_number,void (*arp_result_callback)(uint8_t *ip
1022:../SERVER/tcpip/ip_arp_udp_tcp.c **** {
 20957              		.loc 1 1022 0
 20958              		.cfi_startproc
 20959              		@ args = 0, pretend = 0, frame = 0
 20960              		@ frame_needed = 0, uses_anonymous_args = 0
 20961              		@ link register save eliminated.
 20962              	.LVL90:
1023:../SERVER/tcpip/ip_arp_udp_tcp.c ****         uint8_t i=0;
1024:../SERVER/tcpip/ip_arp_udp_tcp.c ****         client_arp_result_callback=arp_result_callback;
 20963              		.loc 1 1024 0
 20964 0000 40F20003 		movw	r3, #:lower16:client_arp_result_callback
 20965 0004 C0F20003 		movt	r3, #:upper16:client_arp_result_callback
 20966 0008 1A60     		str	r2, [r3, #0]
1025:../SERVER/tcpip/ip_arp_udp_tcp.c ****         arpip_state=WGW_INITIAL_ARP; // causes an arp request in the packet loop
 20967              		.loc 1 1025 0
 20968 000a 40F20003 		movw	r3, #:lower16:.LANCHOR7
 20969 000e C0F20003 		movt	r3, #:upper16:.LANCHOR7
 20970 0012 4FF00102 		mov	r2, #1
 20971              	.LVL91:
 20972 0016 1A70     		strb	r2, [r3, #0]
1026:../SERVER/tcpip/ip_arp_udp_tcp.c ****         arp_reference_number=reference_number;
 20973              		.loc 1 1026 0
 20974 0018 40F20003 		movw	r3, #:lower16:.LANCHOR8
 20975 001c C0F20003 		movt	r3, #:upper16:.LANCHOR8
 20976 0020 1970     		strb	r1, [r3, #0]
 20977 0022 4FF00003 		mov	r3, #0
1027:../SERVER/tcpip/ip_arp_udp_tcp.c ****         while(i<4){
1028:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 arpip[i]=ip[i];
 20978              		.loc 1 1028 0
 20979 0026 40F20001 		movw	r1, #:lower16:.LANCHOR9
 20980              	.LVL92:
 20981 002a C0F20001 		movt	r1, #:upper16:.LANCHOR9
 20982              	.L93:
 20983 002e C25C     		ldrb	r2, [r0, r3]	@ zero_extendqisi2
 20984 0030 CA54     		strb	r2, [r1, r3]
 20985 0032 03F10103 		add	r3, r3, #1
 20986              		.loc 1 1027 0
 20987 0036 042B     		cmp	r3, #4
 20988 0038 F9D1     		bne	.L93
1029:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 i++;
1030:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
1031:../SERVER/tcpip/ip_arp_udp_tcp.c **** }
 20989              		.loc 1 1031 0
 20990 003a 7047     		bx	lr
 20991              		.cfi_endproc
 20992              	.LFE63:
 20994              		.section	.text.client_tcp_req,"ax",%progbits
 20995              		.align	2
 20996              		.global	client_tcp_req
 20997              		.thumb
 20998              		.thumb_func
 21000              	client_tcp_req:
 21001              	.LFB65:
1032:../SERVER/tcpip/ip_arp_udp_tcp.c **** #endif 
1033:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
1034:../SERVER/tcpip/ip_arp_udp_tcp.c **** #if defined (TCP_client)
1035:../SERVER/tcpip/ip_arp_udp_tcp.c **** // Make a tcp syn packet
1036:../SERVER/tcpip/ip_arp_udp_tcp.c **** void tcp_client_syn(uint8_t *buf,uint8_t srcport,uint16_t dstport)
1037:../SERVER/tcpip/ip_arp_udp_tcp.c **** {
1038:../SERVER/tcpip/ip_arp_udp_tcp.c ****         uint16_t ck;
1039:../SERVER/tcpip/ip_arp_udp_tcp.c ****         uint8_t i=0;
1040:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // -- make the main part of the eth/IP/tcp header:
1041:../SERVER/tcpip/ip_arp_udp_tcp.c ****         while(i<6){
1042:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[ETH_DST_MAC +i]=tcp_dst_mac[i]; // gw mac in local lan or host mac
1043:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[ETH_SRC_MAC +i]=macaddr[i];
1044:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 i++;
1045:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
1046:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[ETH_TYPE_H_P] = ETHTYPE_IP_H_V;
1047:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[ETH_TYPE_L_P] = ETHTYPE_IP_L_V;
1048:../SERVER/tcpip/ip_arp_udp_tcp.c ****         fill_buf_p(&buf[IP_P],9,iphdr);
1049:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[IP_TOTLEN_L_P]=44; // good for syn
1050:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[IP_ID_L_P]=ipid; ipid++;
1051:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[IP_PROTO_P]=IP_PROTO_TCP_V;
1052:../SERVER/tcpip/ip_arp_udp_tcp.c ****         i=0;
1053:../SERVER/tcpip/ip_arp_udp_tcp.c ****         while(i<4){
1054:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[IP_DST_P+i]=tcp_otherside_ip[i];
1055:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[IP_SRC_P+i]=ipaddr[i];
1056:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 i++;
1057:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
1058:../SERVER/tcpip/ip_arp_udp_tcp.c ****         fill_ip_hdr_checksum(buf);
1059:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_DST_PORT_H_P]=(dstport>>8)&0xff;
1060:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_DST_PORT_L_P]=(dstport&0xff);
1061:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_SRC_PORT_H_P]=TCPCLIENT_SRC_PORT_H;
1062:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_SRC_PORT_L_P]=srcport; // lower 8 bit of src port
1063:../SERVER/tcpip/ip_arp_udp_tcp.c ****         i=0;
1064:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // zero out sequence number and acknowledgement number
1065:../SERVER/tcpip/ip_arp_udp_tcp.c ****         while(i<8){
1066:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 buf[TCP_SEQ_H_P+i]=0;
1067:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 i++;
1068:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
1069:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // -- header ready 
1070:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // put inital seq number
1071:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // we step only the second byte, this allows us to send packts 
1072:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // with 255 bytes 512 (if we step the initial seqnum by 2)
1073:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // or 765 (step by 3)
1074:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_SEQ_H_P+2]= seqnum; 
1075:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // step the inititial seq num by something we will not use
1076:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // during this tcp session:
1077:../SERVER/tcpip/ip_arp_udp_tcp.c ****         seqnum+=3;
1078:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_HEADER_LEN_P]=0x60; // 0x60=24 len: (0x60>>4) * 4
1079:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_FLAGS_P]=TCP_FLAGS_SYN_V;
1080:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // use a low window size otherwise we have to have
1081:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // timers and can not just react on every packet.
1082:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_WIN_SIZE]=0x3; // 1024=0x400 768=0x300, initial window
1083:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_WIN_SIZE+1]=0x0;
1084:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // zero the checksum
1085:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_CHECKSUM_H_P]=0;
1086:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_CHECKSUM_L_P]=0;
1087:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // urgent pointer
1088:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_CHECKSUM_L_P+1]=0;
1089:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_CHECKSUM_L_P+2]=0;
1090:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // MSS= max IP len that we want to have:
1091:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_OPTIONS_P]=2;
1092:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_OPTIONS_P+1]=4;
1093:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_OPTIONS_P+2]=(CLIENTMSS>>8);
1094:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_OPTIONS_P+3]=CLIENTMSS & 0xff;
1095:../SERVER/tcpip/ip_arp_udp_tcp.c ****         ck=checksum(&buf[IP_SRC_P], 8 +TCP_HEADER_LEN_PLAIN+4,2);
1096:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_CHECKSUM_H_P]=ck>>8;
1097:../SERVER/tcpip/ip_arp_udp_tcp.c ****         buf[TCP_CHECKSUM_L_P]=ck& 0xff;
1098:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // 4 is the tcp mss option:
1099:../SERVER/tcpip/ip_arp_udp_tcp.c ****         enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN+4,buf);
1100:../SERVER/tcpip/ip_arp_udp_tcp.c **** }
1101:../SERVER/tcpip/ip_arp_udp_tcp.c **** #endif // TCP_client
1102:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
1103:../SERVER/tcpip/ip_arp_udp_tcp.c **** #if defined (TCP_client) 
1104:../SERVER/tcpip/ip_arp_udp_tcp.c **** // This is how to use the tcp client:
1105:../SERVER/tcpip/ip_arp_udp_tcp.c **** //
1106:../SERVER/tcpip/ip_arp_udp_tcp.c **** // Declare a callback function to get the result (tcp data from the server):
1107:../SERVER/tcpip/ip_arp_udp_tcp.c **** //
1108:../SERVER/tcpip/ip_arp_udp_tcp.c **** // uint8_t your_client_tcp_result_callback(uint8_t fd, uint8_t statuscode,uint16_t data_start_pos_i
1109:../SERVER/tcpip/ip_arp_udp_tcp.c **** //
1110:../SERVER/tcpip/ip_arp_udp_tcp.c **** // statuscode=0 means the buffer has valid data, otherwise len and pos_in_buf
1111:../SERVER/tcpip/ip_arp_udp_tcp.c **** // are invalid. That is: do to use data_start_pos_in_buf and len_of_data
1112:../SERVER/tcpip/ip_arp_udp_tcp.c **** // if statuscode!=0.
1113:../SERVER/tcpip/ip_arp_udp_tcp.c **** //
1114:../SERVER/tcpip/ip_arp_udp_tcp.c **** // This callback gives you access to the TCP data of the first
1115:../SERVER/tcpip/ip_arp_udp_tcp.c **** // packet returned from the server. You should aim to minimize the server
1116:../SERVER/tcpip/ip_arp_udp_tcp.c **** // output such that this will be the only packet.
1117:../SERVER/tcpip/ip_arp_udp_tcp.c **** //
1118:../SERVER/tcpip/ip_arp_udp_tcp.c **** // close_tcp_session=1 means close the session now. close_tcp_session=0
1119:../SERVER/tcpip/ip_arp_udp_tcp.c **** // read all data and leave it to the other side to close it. 
1120:../SERVER/tcpip/ip_arp_udp_tcp.c **** // If you connect to a web server then you want close_tcp_session=0.
1121:../SERVER/tcpip/ip_arp_udp_tcp.c **** // If you connect to a modbus/tcp equipment then you want close_tcp_session=1
1122:../SERVER/tcpip/ip_arp_udp_tcp.c **** //
1123:../SERVER/tcpip/ip_arp_udp_tcp.c **** // Declare a callback function to be called in order to fill in the 
1124:../SERVER/tcpip/ip_arp_udp_tcp.c **** //
1125:../SERVER/tcpip/ip_arp_udp_tcp.c **** // request (tcp data sent to the server):
1126:../SERVER/tcpip/ip_arp_udp_tcp.c **** // uint16_t your_client_tcp_datafill_callback(uint8_t fd){...your code;return(len_of_data_filled_in
1127:../SERVER/tcpip/ip_arp_udp_tcp.c **** //
1128:../SERVER/tcpip/ip_arp_udp_tcp.c **** // Now call: 
1129:../SERVER/tcpip/ip_arp_udp_tcp.c **** // fd=client_tcp_req(&your_client_tcp_result_callback,&your_client_tcp_datafill_callback,portnumber
1130:../SERVER/tcpip/ip_arp_udp_tcp.c **** //
1131:../SERVER/tcpip/ip_arp_udp_tcp.c **** // fd is a file descriptor like number that you get back in the fill and result
1132:../SERVER/tcpip/ip_arp_udp_tcp.c **** // function so you know to which call of client_tcp_req this callback belongs.
1133:../SERVER/tcpip/ip_arp_udp_tcp.c **** //
1134:../SERVER/tcpip/ip_arp_udp_tcp.c **** // You can not start different clients (e.g modbus and web) at the
1135:../SERVER/tcpip/ip_arp_udp_tcp.c **** // same time but you can start them one after each other. That is
1136:../SERVER/tcpip/ip_arp_udp_tcp.c **** // when the request has timed out or when the result_callback was
1137:../SERVER/tcpip/ip_arp_udp_tcp.c **** // executed then you can start a new one. The fd makes it still possible to
1138:../SERVER/tcpip/ip_arp_udp_tcp.c **** // distinguish in the callback code the different types you started.
1139:../SERVER/tcpip/ip_arp_udp_tcp.c **** //
1140:../SERVER/tcpip/ip_arp_udp_tcp.c **** // Note that you might never get called back if the other side does
1141:../SERVER/tcpip/ip_arp_udp_tcp.c **** // not answer. A timer would be needed to recongnize such a condition.
1142:../SERVER/tcpip/ip_arp_udp_tcp.c **** //
1143:../SERVER/tcpip/ip_arp_udp_tcp.c **** // We use callback functions because that saves memory and a uC is very
1144:../SERVER/tcpip/ip_arp_udp_tcp.c **** // limited in memory
1145:../SERVER/tcpip/ip_arp_udp_tcp.c **** //
1146:../SERVER/tcpip/ip_arp_udp_tcp.c **** uint8_t client_tcp_req(uint8_t (*result_callback)(uint8_t fd,uint8_t statuscode,uint16_t data_start
1147:../SERVER/tcpip/ip_arp_udp_tcp.c **** {
 21002              		.loc 1 1147 0
 21003              		.cfi_startproc
 21004              		@ args = 4, pretend = 0, frame = 0
 21005              		@ frame_needed = 0, uses_anonymous_args = 0
 21006              		@ link register save eliminated.
 21007              	.LVL93:
 21008 0000 30B4     		push	{r4, r5}
 21009              	.LCFI9:
 21010              		.cfi_def_cfa_offset 8
 21011 0002 029C     		ldr	r4, [sp, #8]
 21012              		.cfi_offset 5, -4
 21013              		.cfi_offset 4, -8
1148:../SERVER/tcpip/ip_arp_udp_tcp.c ****         uint8_t i=0;
1149:../SERVER/tcpip/ip_arp_udp_tcp.c ****         client_tcp_result_callback=result_callback;
 21014              		.loc 1 1149 0
 21015 0004 40F20005 		movw	r5, #:lower16:.LANCHOR10
 21016 0008 C0F20005 		movt	r5, #:upper16:.LANCHOR10
 21017 000c 2860     		str	r0, [r5, #0]
1150:../SERVER/tcpip/ip_arp_udp_tcp.c ****         client_tcp_datafill_callback=datafill_callback;
 21018              		.loc 1 1150 0
 21019 000e 40F20000 		movw	r0, #:lower16:.LANCHOR11
 21020              	.LVL94:
 21021 0012 C0F20000 		movt	r0, #:upper16:.LANCHOR11
 21022 0016 0160     		str	r1, [r0, #0]
 21023 0018 4FF00001 		mov	r1, #0
 21024              	.LVL95:
1151:../SERVER/tcpip/ip_arp_udp_tcp.c ****         while(i<4){tcp_otherside_ip[i]=dstip[i];i++;}
 21025              		.loc 1 1151 0
 21026 001c 40F2000C 		movw	ip, #:lower16:.LANCHOR12
 21027 0020 C0F2000C 		movt	ip, #:upper16:.LANCHOR12
 21028              	.LVL96:
 21029              	.L97:
 21030 0024 585C     		ldrb	r0, [r3, r1]	@ zero_extendqisi2
 21031 0026 0CF80100 		strb	r0, [ip, r1]
 21032 002a 01F10101 		add	r1, r1, #1
 21033 002e 0429     		cmp	r1, #4
 21034 0030 F8D1     		bne	.L97
 21035 0032 4FF00003 		mov	r3, #0
 21036              	.LVL97:
1152:../SERVER/tcpip/ip_arp_udp_tcp.c ****         i=0;
1153:../SERVER/tcpip/ip_arp_udp_tcp.c ****         while(i<6){tcp_dst_mac[i]=dstmac[i];i++;}
 21037              		.loc 1 1153 0
 21038 0036 40F20000 		movw	r0, #:lower16:.LANCHOR13
 21039 003a C0F20000 		movt	r0, #:upper16:.LANCHOR13
 21040              	.L98:
 21041 003e E15C     		ldrb	r1, [r4, r3]	@ zero_extendqisi2
 21042 0040 C154     		strb	r1, [r0, r3]
 21043 0042 03F10103 		add	r3, r3, #1
 21044 0046 062B     		cmp	r3, #6
 21045 0048 F9D1     		bne	.L98
1154:../SERVER/tcpip/ip_arp_udp_tcp.c ****         tcp_client_port=port;
 21046              		.loc 1 1154 0
 21047 004a 40F20003 		movw	r3, #:lower16:.LANCHOR14
 21048 004e C0F20003 		movt	r3, #:upper16:.LANCHOR14
 21049 0052 1A80     		strh	r2, [r3, #0]	@ movhi
1155:../SERVER/tcpip/ip_arp_udp_tcp.c ****         tcp_client_state=1; // send a syn
 21050              		.loc 1 1155 0
 21051 0054 40F20003 		movw	r3, #:lower16:.LANCHOR15
 21052 0058 C0F20003 		movt	r3, #:upper16:.LANCHOR15
 21053 005c 4FF00102 		mov	r2, #1
 21054              	.LVL98:
 21055 0060 1A70     		strb	r2, [r3, #0]
1156:../SERVER/tcpip/ip_arp_udp_tcp.c ****         tcp_fd++;
 21056              		.loc 1 1156 0
 21057 0062 40F20003 		movw	r3, #:lower16:.LANCHOR16
 21058 0066 C0F20003 		movt	r3, #:upper16:.LANCHOR16
 21059 006a 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 21060 006c 02F10102 		add	r2, r2, #1
 21061 0070 D2B2     		uxtb	r2, r2
 21062 0072 1A70     		strb	r2, [r3, #0]
1157:../SERVER/tcpip/ip_arp_udp_tcp.c ****         if (tcp_fd>7){
 21063              		.loc 1 1157 0
 21064 0074 072A     		cmp	r2, #7
1158:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 tcp_fd=0;
 21065              		.loc 1 1158 0
 21066 0076 81BF     		itttt	hi
 21067 0078 40F20003 		movwhi	r3, #:lower16:.LANCHOR16
 21068 007c C0F20003 		movthi	r3, #:upper16:.LANCHOR16
 21069 0080 0022     		movhi	r2, #0
 21070 0082 1A70     		strbhi	r2, [r3, #0]
 21071 0084 40F20003 		movw	r3, #:lower16:.LANCHOR16
 21072 0088 C0F20003 		movt	r3, #:upper16:.LANCHOR16
1159:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
1160:../SERVER/tcpip/ip_arp_udp_tcp.c ****         return(tcp_fd);
1161:../SERVER/tcpip/ip_arp_udp_tcp.c **** }
 21073              		.loc 1 1161 0
 21074 008c 1878     		ldrb	r0, [r3, #0]	@ zero_extendqisi2
 21075 008e 30BC     		pop	{r4, r5}
 21076 0090 7047     		bx	lr
 21077              		.cfi_endproc
 21078              	.LFE65:
 21080 0092 00BF     		.section	.text.register_ping_rec_callback,"ax",%progbits
 21081              		.align	2
 21082              		.global	register_ping_rec_callback
 21083              		.thumb
 21084              		.thumb_func
 21086              	register_ping_rec_callback:
 21087              	.LFB70:
1162:../SERVER/tcpip/ip_arp_udp_tcp.c **** #endif //  TCP_client
1163:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
1164:../SERVER/tcpip/ip_arp_udp_tcp.c **** #if defined (WWW_client) 
1165:../SERVER/tcpip/ip_arp_udp_tcp.c **** uint16_t www_client_internal_datafill_callback(uint8_t fd){
1166:../SERVER/tcpip/ip_arp_udp_tcp.c ****         char strbuf[5];
1167:../SERVER/tcpip/ip_arp_udp_tcp.c ****         uint16_t len=0;
1168:../SERVER/tcpip/ip_arp_udp_tcp.c ****         if (fd==www_fd){
1169:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 if (browsertype==0){
1170:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         // GET
1171:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         len=fill_tcp_data_p(bufptr,0,"GET ");
1172:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         len=fill_tcp_data_p(bufptr,len,client_urlbuf);
1173:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         len=fill_tcp_data(bufptr,len,client_urlbuf_var);
1174:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         // I would prefer http/1.0 but there is a funny
1175:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         // bug in some apache webservers which causes
1176:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         // them to send two packets (fragmented PDU)
1177:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         // if we don't use HTTP/1.1 + Connection: close
1178:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         len=fill_tcp_data_p(bufptr,len," HTTP/1.1\r\nHost: ");
1179:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         len=fill_tcp_data(bufptr,len,client_hoststr);
1180:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         len=fill_tcp_data_p(bufptr,len,"\r\nUser-Agent: tgr/1.1\r\nAccept: text/htm
1181:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 }else{
1182:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         // POST
1183:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         len=fill_tcp_data_p(bufptr,0,"POST ");
1184:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         len=fill_tcp_data_p(bufptr,len,client_urlbuf);
1185:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         len=fill_tcp_data(bufptr,len,client_urlbuf_var);
1186:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         len=fill_tcp_data_p(bufptr,len," HTTP/1.1\r\nHost: ");
1187:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         len=fill_tcp_data(bufptr,len,client_hoststr);
1188:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         if (client_additionalheaderline){
1189:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 len=fill_tcp_data_p(bufptr,len,"\r\n");
1190:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 len=fill_tcp_data_p(bufptr,len,client_additionalheaderline);
1191:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         }
1192:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         len=fill_tcp_data_p(bufptr,len,"\r\nUser-Agent: tgr/1.1\r\nAccept: */*\r\nC
1193:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         len=fill_tcp_data_p(bufptr,len,"Content-Length: ");
1194:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         itoa(strlen(client_postval),strbuf,10);
1195:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         len=fill_tcp_data(bufptr,len,strbuf);
1196:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         len=fill_tcp_data_p(bufptr,len,"\r\nContent-Type: application/x-www-form-ur
1197:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         len=fill_tcp_data(bufptr,len,client_postval);
1198:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 }
1199:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 return(len);
1200:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
1201:../SERVER/tcpip/ip_arp_udp_tcp.c ****         return(0);
1202:../SERVER/tcpip/ip_arp_udp_tcp.c **** }
1203:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
1204:../SERVER/tcpip/ip_arp_udp_tcp.c **** uint8_t www_client_internal_result_callback(uint8_t fd, uint8_t statuscode, uint16_t datapos, uint1
1205:../SERVER/tcpip/ip_arp_udp_tcp.c ****         uint16_t web_statuscode=0; // tcp status is OK but we need to check http layer too
1206:../SERVER/tcpip/ip_arp_udp_tcp.c ****         uint8_t i=0; 
1207:../SERVER/tcpip/ip_arp_udp_tcp.c ****         if (fd!=www_fd){
1208:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 (*client_browser_callback)(500,0,0);
1209:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 return(0);
1210:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
1211:../SERVER/tcpip/ip_arp_udp_tcp.c ****         if (statuscode==0 && len_of_data>12){
1212:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 // we might have a http status code
1213:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 // http status codes are 3digit numbers as ascii text. See http://www.w3.org/Protoc
1214:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 // The buffer would look like this: HTTP/1.1 200 OK\r\n
1215:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 // web_statuscode=0 means we got a corrupted answer 
1216:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 if (client_browser_callback){
1217:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         if (isblank(bufptr[datapos+8]) && isdigit(bufptr[datapos+9])&& isdigit(bufp
1218:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 while(i<2){
1219:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                         web_statuscode+=bufptr[datapos+9+i]-'0';
1220:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                         web_statuscode*=10;
1221:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                         i++;
1222:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 }
1223:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 web_statuscode+=bufptr[datapos+11]-'0';
1224:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         }
1225:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         //(*client_browser_callback)(web_statuscode,((uint16_t)TCP_SRC_PORT_H_P+(bu
1226:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         (*client_browser_callback)(web_statuscode,datapos,len_of_data);
1227:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 }
1228:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
1229:../SERVER/tcpip/ip_arp_udp_tcp.c ****         return(0);
1230:../SERVER/tcpip/ip_arp_udp_tcp.c **** }
1231:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
1232:../SERVER/tcpip/ip_arp_udp_tcp.c **** // call this function externally like this:
1233:../SERVER/tcpip/ip_arp_udp_tcp.c **** //
1234:../SERVER/tcpip/ip_arp_udp_tcp.c **** // Declare a callback function: void browserresult(uint8_t webstatuscode,uint16_t datapos,uint16_t 
1235:../SERVER/tcpip/ip_arp_udp_tcp.c **** // The variable datapos is the index in the packet buffer.
1236:../SERVER/tcpip/ip_arp_udp_tcp.c **** // Now call client_browser_url:
1237:../SERVER/tcpip/ip_arp_udp_tcp.c **** // client_browser_url(PSTR("/cgi-bin/checkip"),NULL,"tuxgraphics.org",&browserresult,other_side_ip,
1238:../SERVER/tcpip/ip_arp_udp_tcp.c **** // urlbuf_varpart is a pointer to a string buffer that contains the second
1239:../SERVER/tcpip/ip_arp_udp_tcp.c **** // non constant part of the url. You must keep this buffer allocated until the
1240:../SERVER/tcpip/ip_arp_udp_tcp.c **** // callback function is executed or until you can be sure that the server side
1241:../SERVER/tcpip/ip_arp_udp_tcp.c **** // has timed out.
1242:../SERVER/tcpip/ip_arp_udp_tcp.c **** // hoststr is the name of the host. This is needed because many sites host several
1243:../SERVER/tcpip/ip_arp_udp_tcp.c **** // sites on the same physical machine with only one IP address. The web server needs
1244:../SERVER/tcpip/ip_arp_udp_tcp.c **** // to know to which site you want to go.
1245:../SERVER/tcpip/ip_arp_udp_tcp.c **** // webstatuscode is zero if there was no proper reply from the server (garbage message total commun
1246:../SERVER/tcpip/ip_arp_udp_tcp.c **** // webstatuscode is the http status code (e.g webstatuscode=200 for 200 OK);
1247:../SERVER/tcpip/ip_arp_udp_tcp.c **** // webstatuscode is zero if there was a garbage answer received from the server.
1248:../SERVER/tcpip/ip_arp_udp_tcp.c **** // For possible status codes look at http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
1249:../SERVER/tcpip/ip_arp_udp_tcp.c **** // Basically 2xx is success and any 5xx, 4xx is a failure.
1250:../SERVER/tcpip/ip_arp_udp_tcp.c **** // The string buffers to which urlbuf_varpart and hoststr are pointing
1251:../SERVER/tcpip/ip_arp_udp_tcp.c **** // must not be changed until the callback is executed.
1252:../SERVER/tcpip/ip_arp_udp_tcp.c **** //
1253:../SERVER/tcpip/ip_arp_udp_tcp.c **** void client_browse_url(const char *urlbuf, char *urlbuf_varpart,const char *hoststr,void (*callback
1254:../SERVER/tcpip/ip_arp_udp_tcp.c **** {
1255:../SERVER/tcpip/ip_arp_udp_tcp.c ****         if (!enc28j60linkup())return;
1256:../SERVER/tcpip/ip_arp_udp_tcp.c ****         client_urlbuf=urlbuf;
1257:../SERVER/tcpip/ip_arp_udp_tcp.c ****         client_urlbuf_var=urlbuf_varpart;
1258:../SERVER/tcpip/ip_arp_udp_tcp.c ****         client_hoststr=hoststr;
1259:../SERVER/tcpip/ip_arp_udp_tcp.c ****         browsertype=0;
1260:../SERVER/tcpip/ip_arp_udp_tcp.c ****         client_browser_callback=callback;
1261:../SERVER/tcpip/ip_arp_udp_tcp.c ****         www_fd=client_tcp_req(&www_client_internal_result_callback,&www_client_internal_datafill_ca
1262:../SERVER/tcpip/ip_arp_udp_tcp.c **** }
1263:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
1264:../SERVER/tcpip/ip_arp_udp_tcp.c **** // client web browser using http POST operation:
1265:../SERVER/tcpip/ip_arp_udp_tcp.c **** // additionalheaderline must be set to NULL if not used.
1266:../SERVER/tcpip/ip_arp_udp_tcp.c **** // The string buffers to which urlbuf_varpart and hoststr are pointing
1267:../SERVER/tcpip/ip_arp_udp_tcp.c **** // must not be changed until the callback is executed.
1268:../SERVER/tcpip/ip_arp_udp_tcp.c **** // postval is a string buffer which can only be de-allocated by the caller 
1269:../SERVER/tcpip/ip_arp_udp_tcp.c **** // when the post operation was really done (e.g when callback was executed).
1270:../SERVER/tcpip/ip_arp_udp_tcp.c **** // postval must be urlencoded.
1271:../SERVER/tcpip/ip_arp_udp_tcp.c **** void client_http_post(const char *urlbuf, char *urlbuf_varpart,const char *hoststr, const char *add
1272:../SERVER/tcpip/ip_arp_udp_tcp.c **** {
1273:../SERVER/tcpip/ip_arp_udp_tcp.c ****         if (!enc28j60linkup())return;
1274:../SERVER/tcpip/ip_arp_udp_tcp.c ****         client_urlbuf=urlbuf;
1275:../SERVER/tcpip/ip_arp_udp_tcp.c ****         client_hoststr=hoststr;
1276:../SERVER/tcpip/ip_arp_udp_tcp.c ****         client_urlbuf_var=urlbuf_varpart;
1277:../SERVER/tcpip/ip_arp_udp_tcp.c ****         client_additionalheaderline=additionalheaderline;
1278:../SERVER/tcpip/ip_arp_udp_tcp.c ****         client_postval=postval;
1279:../SERVER/tcpip/ip_arp_udp_tcp.c ****         browsertype=1;
1280:../SERVER/tcpip/ip_arp_udp_tcp.c ****         client_browser_callback=callback;
1281:../SERVER/tcpip/ip_arp_udp_tcp.c ****         www_fd=client_tcp_req(&www_client_internal_result_callback,&www_client_internal_datafill_ca
1282:../SERVER/tcpip/ip_arp_udp_tcp.c **** }
1283:../SERVER/tcpip/ip_arp_udp_tcp.c **** #endif // WWW_client
1284:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
1285:../SERVER/tcpip/ip_arp_udp_tcp.c **** void register_ping_rec_callback(void (*callback)(uint8_t *srcip))
1286:../SERVER/tcpip/ip_arp_udp_tcp.c **** {
 21088              		.loc 1 1286 0
 21089              		.cfi_startproc
 21090              		@ args = 0, pretend = 0, frame = 0
 21091              		@ frame_needed = 0, uses_anonymous_args = 0
 21092              		@ link register save eliminated.
 21093              	.LVL99:
1287:../SERVER/tcpip/ip_arp_udp_tcp.c ****         icmp_callback=callback;
 21094              		.loc 1 1287 0
 21095 0000 40F20003 		movw	r3, #:lower16:.LANCHOR17
 21096 0004 C0F20003 		movt	r3, #:upper16:.LANCHOR17
 21097 0008 1860     		str	r0, [r3, #0]
1288:../SERVER/tcpip/ip_arp_udp_tcp.c **** }
 21098              		.loc 1 1288 0
 21099 000a 7047     		bx	lr
 21100              		.cfi_endproc
 21101              	.LFE70:
 21103              		.section	.text.client_http_post,"ax",%progbits
 21104              		.align	2
 21105              		.global	client_http_post
 21106              		.thumb
 21107              		.thumb_func
 21109              	client_http_post:
 21110              	.LFB69:
 21111              		.loc 1 1272 0
 21112              		.cfi_startproc
 21113              		@ args = 16, pretend = 0, frame = 0
 21114              		@ frame_needed = 0, uses_anonymous_args = 0
 21115              	.LVL100:
 21116 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 21117              	.LCFI10:
 21118              		.cfi_def_cfa_offset 20
 21119 0002 83B0     		sub	sp, sp, #12
 21120              	.LCFI11:
 21121              		.cfi_def_cfa_offset 32
 21122 0004 0546     		mov	r5, r0
 21123              		.cfi_offset 14, -4
 21124              		.cfi_offset 7, -8
 21125              		.cfi_offset 6, -12
 21126              		.cfi_offset 5, -16
 21127              		.cfi_offset 4, -20
 21128 0006 0E46     		mov	r6, r1
 21129 0008 1446     		mov	r4, r2
 21130 000a 1F46     		mov	r7, r3
 21131              		.loc 1 1273 0
 21132 000c FFF7FEFF 		bl	enc28j60linkup
 21133              	.LVL101:
 21134 0010 0028     		cmp	r0, #0
 21135 0012 3AD0     		beq	.L107
 21136              		.loc 1 1274 0
 21137 0014 40F20003 		movw	r3, #:lower16:.LANCHOR18
 21138 0018 C0F20003 		movt	r3, #:upper16:.LANCHOR18
 21139 001c 1D60     		str	r5, [r3, #0]
 21140              		.loc 1 1275 0
 21141 001e 40F20003 		movw	r3, #:lower16:.LANCHOR19
 21142 0022 C0F20003 		movt	r3, #:upper16:.LANCHOR19
 21143 0026 1C60     		str	r4, [r3, #0]
 21144              		.loc 1 1276 0
 21145 0028 40F20003 		movw	r3, #:lower16:.LANCHOR20
 21146 002c C0F20003 		movt	r3, #:upper16:.LANCHOR20
 21147 0030 1E60     		str	r6, [r3, #0]
 21148              		.loc 1 1277 0
 21149 0032 40F20003 		movw	r3, #:lower16:.LANCHOR21
 21150 0036 C0F20003 		movt	r3, #:upper16:.LANCHOR21
 21151 003a 1F60     		str	r7, [r3, #0]
 21152              		.loc 1 1278 0
 21153 003c 40F20003 		movw	r3, #:lower16:.LANCHOR22
 21154 0040 C0F20003 		movt	r3, #:upper16:.LANCHOR22
 21155 0044 089A     		ldr	r2, [sp, #32]
 21156 0046 1A60     		str	r2, [r3, #0]
 21157              		.loc 1 1279 0
 21158 0048 40F20003 		movw	r3, #:lower16:.LANCHOR23
 21159 004c C0F20003 		movt	r3, #:upper16:.LANCHOR23
 21160 0050 4FF00102 		mov	r2, #1
 21161 0054 1A70     		strb	r2, [r3, #0]
 21162              		.loc 1 1280 0
 21163 0056 40F20003 		movw	r3, #:lower16:.LANCHOR24
 21164 005a C0F20003 		movt	r3, #:upper16:.LANCHOR24
 21165 005e 099A     		ldr	r2, [sp, #36]
 21166 0060 1A60     		str	r2, [r3, #0]
 21167              		.loc 1 1281 0
 21168 0062 0B9B     		ldr	r3, [sp, #44]
 21169 0064 0093     		str	r3, [sp, #0]
 21170 0066 40F20000 		movw	r0, #:lower16:www_client_internal_result_callback
 21171 006a C0F20000 		movt	r0, #:upper16:www_client_internal_result_callback
 21172 006e 40F20001 		movw	r1, #:lower16:www_client_internal_datafill_callback
 21173 0072 C0F20001 		movt	r1, #:upper16:www_client_internal_datafill_callback
 21174 0076 4FF05002 		mov	r2, #80
 21175 007a 0A9B     		ldr	r3, [sp, #40]
 21176 007c FFF7FEFF 		bl	client_tcp_req
 21177 0080 40F20003 		movw	r3, #:lower16:.LANCHOR25
 21178 0084 C0F20003 		movt	r3, #:upper16:.LANCHOR25
 21179 0088 1870     		strb	r0, [r3, #0]
 21180              	.L107:
 21181              		.loc 1 1282 0
 21182 008a 03B0     		add	sp, sp, #12
 21183 008c F0BD     		pop	{r4, r5, r6, r7, pc}
 21184              		.cfi_endproc
 21185              	.LFE69:
 21187 008e 00BF     		.section	.text.client_browse_url,"ax",%progbits
 21188              		.align	2
 21189              		.global	client_browse_url
 21190              		.thumb
 21191              		.thumb_func
 21193              	client_browse_url:
 21194              	.LFB68:
 21195              		.loc 1 1254 0
 21196              		.cfi_startproc
 21197              		@ args = 8, pretend = 0, frame = 0
 21198              		@ frame_needed = 0, uses_anonymous_args = 0
 21199              	.LVL102:
 21200 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 21201              	.LCFI12:
 21202              		.cfi_def_cfa_offset 20
 21203 0002 83B0     		sub	sp, sp, #12
 21204              	.LCFI13:
 21205              		.cfi_def_cfa_offset 32
 21206 0004 0546     		mov	r5, r0
 21207              		.cfi_offset 14, -4
 21208              		.cfi_offset 7, -8
 21209              		.cfi_offset 6, -12
 21210              		.cfi_offset 5, -16
 21211              		.cfi_offset 4, -20
 21212 0006 0C46     		mov	r4, r1
 21213 0008 1646     		mov	r6, r2
 21214 000a 1F46     		mov	r7, r3
 21215              		.loc 1 1255 0
 21216 000c FFF7FEFF 		bl	enc28j60linkup
 21217              	.LVL103:
 21218 0010 70B3     		cbz	r0, .L110
 21219              		.loc 1 1256 0
 21220 0012 40F20003 		movw	r3, #:lower16:.LANCHOR18
 21221 0016 C0F20003 		movt	r3, #:upper16:.LANCHOR18
 21222 001a 1D60     		str	r5, [r3, #0]
 21223              		.loc 1 1257 0
 21224 001c 40F20003 		movw	r3, #:lower16:.LANCHOR20
 21225 0020 C0F20003 		movt	r3, #:upper16:.LANCHOR20
 21226 0024 1C60     		str	r4, [r3, #0]
 21227              		.loc 1 1258 0
 21228 0026 40F20003 		movw	r3, #:lower16:.LANCHOR19
 21229 002a C0F20003 		movt	r3, #:upper16:.LANCHOR19
 21230 002e 1E60     		str	r6, [r3, #0]
 21231              		.loc 1 1259 0
 21232 0030 40F20003 		movw	r3, #:lower16:.LANCHOR23
 21233 0034 C0F20003 		movt	r3, #:upper16:.LANCHOR23
 21234 0038 4FF00002 		mov	r2, #0
 21235 003c 1A70     		strb	r2, [r3, #0]
 21236              		.loc 1 1260 0
 21237 003e 40F20003 		movw	r3, #:lower16:.LANCHOR24
 21238 0042 C0F20003 		movt	r3, #:upper16:.LANCHOR24
 21239 0046 1F60     		str	r7, [r3, #0]
 21240              		.loc 1 1261 0
 21241 0048 099B     		ldr	r3, [sp, #36]
 21242 004a 0093     		str	r3, [sp, #0]
 21243 004c 40F20000 		movw	r0, #:lower16:www_client_internal_result_callback
 21244 0050 C0F20000 		movt	r0, #:upper16:www_client_internal_result_callback
 21245 0054 40F20001 		movw	r1, #:lower16:www_client_internal_datafill_callback
 21246 0058 C0F20001 		movt	r1, #:upper16:www_client_internal_datafill_callback
 21247 005c 4FF05002 		mov	r2, #80
 21248 0060 089B     		ldr	r3, [sp, #32]
 21249 0062 FFF7FEFF 		bl	client_tcp_req
 21250 0066 40F20003 		movw	r3, #:lower16:.LANCHOR25
 21251 006a C0F20003 		movt	r3, #:upper16:.LANCHOR25
 21252 006e 1870     		strb	r0, [r3, #0]
 21253              	.L110:
 21254              		.loc 1 1262 0
 21255 0070 03B0     		add	sp, sp, #12
 21256 0072 F0BD     		pop	{r4, r5, r6, r7, pc}
 21257              		.cfi_endproc
 21258              	.LFE68:
 21260              		.section	.text.www_client_internal_result_callback,"ax",%progbits
 21261              		.align	2
 21262              		.global	www_client_internal_result_callback
 21263              		.thumb
 21264              		.thumb_func
 21266              	www_client_internal_result_callback:
 21267              	.LFB67:
 21268              		.loc 1 1204 0
 21269              		.cfi_startproc
 21270              		@ args = 0, pretend = 0, frame = 0
 21271              		@ frame_needed = 0, uses_anonymous_args = 0
 21272              	.LVL104:
 21273 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 21274              	.LCFI14:
 21275              		.cfi_def_cfa_offset 24
 21276 0004 1446     		mov	r4, r2
 21277              		.cfi_offset 14, -4
 21278              		.cfi_offset 8, -8
 21279              		.cfi_offset 7, -12
 21280              		.cfi_offset 6, -16
 21281              		.cfi_offset 5, -20
 21282              		.cfi_offset 4, -24
 21283 0006 1D46     		mov	r5, r3
 21284              		.loc 1 1207 0
 21285 0008 40F20003 		movw	r3, #:lower16:.LANCHOR25
 21286              	.LVL105:
 21287 000c C0F20003 		movt	r3, #:upper16:.LANCHOR25
 21288 0010 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 21289 0012 8342     		cmp	r3, r0
 21290 0014 0BD0     		beq	.L112
 21291              	.LVL106:
 21292              		.loc 1 1208 0
 21293 0016 40F20003 		movw	r3, #:lower16:.LANCHOR24
 21294 001a C0F20003 		movt	r3, #:upper16:.LANCHOR24
 21295 001e 1B68     		ldr	r3, [r3, #0]
 21296 0020 4FF4FA70 		mov	r0, #500
 21297              	.LVL107:
 21298 0024 4FF00001 		mov	r1, #0
 21299              	.LVL108:
 21300 0028 0A46     		mov	r2, r1
 21301 002a 9847     		blx	r3
 21302              		.loc 1 1209 0
 21303 002c 4CE0     		b	.L113
 21304              	.LVL109:
 21305              	.L112:
 21306              		.loc 1 1211 0
 21307 002e 0C2D     		cmp	r5, #12
 21308 0030 94BF     		ite	ls
 21309 0032 0023     		movls	r3, #0
 21310 0034 0123     		movhi	r3, #1
 21311 0036 0029     		cmp	r1, #0
 21312 0038 14BF     		ite	ne
 21313 003a 0021     		movne	r1, #0
 21314 003c 03F00101 		andeq	r1, r3, #1
 21315              	.LVL110:
 21316 0040 0029     		cmp	r1, #0
 21317 0042 41D0     		beq	.L113
 21318              		.loc 1 1216 0
 21319 0044 40F20003 		movw	r3, #:lower16:.LANCHOR24
 21320 0048 C0F20003 		movt	r3, #:upper16:.LANCHOR24
 21321 004c 1E68     		ldr	r6, [r3, #0]
 21322 004e 002E     		cmp	r6, #0
 21323 0050 3AD0     		beq	.L113
 21324              		.loc 1 1217 0
 21325 0052 40F20003 		movw	r3, #:lower16:.LANCHOR26
 21326 0056 C0F20003 		movt	r3, #:upper16:.LANCHOR26
 21327 005a 1F68     		ldr	r7, [r3, #0]
 21328 005c 9046     		mov	r8, r2
 21329 005e 02EB0703 		add	r3, r2, r7
 21330 0062 187A     		ldrb	r0, [r3, #8]	@ zero_extendqisi2
 21331              	.LVL111:
 21332 0064 FFF7FEFF 		bl	isblank
 21333 0068 48B3     		cbz	r0, .L114
 21334 006a 40F20003 		movw	r3, #:lower16:__ctype_ptr__
 21335 006e C0F20003 		movt	r3, #:upper16:__ctype_ptr__
 21336 0072 1B68     		ldr	r3, [r3, #0]
 21337 0074 04EB0702 		add	r2, r4, r7
 21338              	.LVL112:
 21339 0078 527A     		ldrb	r2, [r2, #9]	@ zero_extendqisi2
 21340 007a 1A44     		add	r2, r3, r2
 21341 007c 5278     		ldrb	r2, [r2, #1]	@ zero_extendqisi2
 21342 007e 12F0040F 		tst	r2, #4
 21343 0082 1CD0     		beq	.L114
 21344 0084 04EB0702 		add	r2, r4, r7
 21345 0088 D27A     		ldrb	r2, [r2, #11]	@ zero_extendqisi2
 21346 008a 1344     		add	r3, r2, r3
 21347 008c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 21348 008e 13F0040F 		tst	r3, #4
 21349 0092 14D0     		beq	.L114
 21350              		.loc 1 1219 0
 21351 0094 04F10903 		add	r3, r4, #9
 21352              	.LVL113:
 21353 0098 F85C     		ldrb	r0, [r7, r3]	@ zero_extendqisi2
 21354              		.loc 1 1220 0
 21355 009a A0F13000 		sub	r0, r0, #48
 21356              	.LVL114:
 21357 009e 00EB8000 		add	r0, r0, r0, lsl #2
 21358              	.LVL115:
 21359              		.loc 1 1219 0
 21360 00a2 3B44     		add	r3, r3, r7
 21361 00a4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 21362 00a6 A3F13003 		sub	r3, r3, #48
 21363              		.loc 1 1220 0
 21364 00aa 03EB4000 		add	r0, r3, r0, lsl #1
 21365              	.LVL116:
 21366 00ae 00EB8000 		add	r0, r0, r0, lsl #2
 21367              	.LVL117:
 21368              		.loc 1 1223 0
 21369 00b2 A2F13002 		sub	r2, r2, #48
 21370 00b6 02EB4000 		add	r0, r2, r0, lsl #1
 21371 00ba 80B2     		uxth	r0, r0
 21372              	.LVL118:
 21373 00bc 01E0     		b	.L115
 21374              	.LVL119:
 21375              	.L114:
 21376 00be 4FF00000 		mov	r0, #0
 21377              	.LVL120:
 21378              	.L115:
 21379              		.loc 1 1226 0
 21380 00c2 2146     		mov	r1, r4
 21381 00c4 2A46     		mov	r2, r5
 21382 00c6 B047     		blx	r6
 21383              	.LVL121:
 21384              	.L113:
 21385              		.loc 1 1230 0
 21386 00c8 4FF00000 		mov	r0, #0
 21387              	.LVL122:
 21388 00cc BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 21389              		.cfi_endproc
 21390              	.LFE67:
 21392              		.section	.text.fill_tcp_data,"ax",%progbits
 21393              		.align	2
 21394              		.global	fill_tcp_data
 21395              		.thumb
 21396              		.thumb_func
 21398              	fill_tcp_data:
 21399              	.LFB46:
 21400              		.loc 1 437 0
 21401              		.cfi_startproc
 21402              		@ args = 0, pretend = 0, frame = 0
 21403              		@ frame_needed = 0, uses_anonymous_args = 0
 21404              	.LVL123:
 21405 0000 70B5     		push	{r4, r5, r6, lr}
 21406              	.LCFI15:
 21407              		.cfi_def_cfa_offset 16
 21408 0002 0546     		mov	r5, r0
 21409              		.cfi_offset 14, -4
 21410              		.cfi_offset 6, -8
 21411              		.cfi_offset 5, -12
 21412              		.cfi_offset 4, -16
 21413 0004 0E46     		mov	r6, r1
 21414 0006 1446     		mov	r4, r2
 21415              		.loc 1 438 0
 21416 0008 1046     		mov	r0, r2
 21417              	.LVL124:
 21418 000a FFF7FEFF 		bl	strlen
 21419              	.LVL125:
 21420 000e 83B2     		uxth	r3, r0
 21421 0010 2846     		mov	r0, r5
 21422 0012 3146     		mov	r1, r6
 21423 0014 2246     		mov	r2, r4
 21424 0016 FFF7FEFF 		bl	fill_tcp_data_len
 21425              		.loc 1 439 0
 21426 001a 70BD     		pop	{r4, r5, r6, pc}
 21427              		.cfi_endproc
 21428              	.LFE46:
 21430              		.section	.text.www_client_internal_datafill_callback,"ax",%progbits
 21431              		.align	2
 21432              		.global	www_client_internal_datafill_callback
 21433              		.thumb
 21434              		.thumb_func
 21436              	www_client_internal_datafill_callback:
 21437              	.LFB66:
 21438              		.loc 1 1165 0
 21439              		.cfi_startproc
 21440              		@ args = 0, pretend = 0, frame = 8
 21441              		@ frame_needed = 0, uses_anonymous_args = 0
 21442              	.LVL126:
 21443 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 21444              	.LCFI16:
 21445              		.cfi_def_cfa_offset 20
 21446 0002 83B0     		sub	sp, sp, #12
 21447              	.LCFI17:
 21448              		.cfi_def_cfa_offset 32
 21449              		.loc 1 1168 0
 21450 0004 40F20003 		movw	r3, #:lower16:.LANCHOR25
 21451 0008 C0F20003 		movt	r3, #:upper16:.LANCHOR25
 21452 000c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 21453 000e 8342     		cmp	r3, r0
 21454 0010 18BF     		it	ne
 21455 0012 0020     		movne	r0, #0
 21456              	.LVL127:
 21457 0014 40F0BE80 		bne	.L121
 21458              		.cfi_offset 14, -4
 21459              		.cfi_offset 7, -8
 21460              		.cfi_offset 6, -12
 21461              		.cfi_offset 5, -16
 21462              		.cfi_offset 4, -20
 21463              		.loc 1 1169 0
 21464 0018 40F20003 		movw	r3, #:lower16:.LANCHOR23
 21465 001c C0F20003 		movt	r3, #:upper16:.LANCHOR23
 21466 0020 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 21467 0022 002B     		cmp	r3, #0
 21468 0024 39D1     		bne	.L122
 21469              		.loc 1 1171 0
 21470 0026 40F20003 		movw	r3, #:lower16:.LANCHOR26
 21471 002a C0F20003 		movt	r3, #:upper16:.LANCHOR26
 21472 002e 1C68     		ldr	r4, [r3, #0]
 21473 0030 2046     		mov	r0, r4
 21474              	.LVL128:
 21475 0032 4FF00001 		mov	r1, #0
 21476 0036 40F20002 		movw	r2, #:lower16:.LC0
 21477 003a C0F20002 		movt	r2, #:upper16:.LC0
 21478 003e FFF7FEFF 		bl	fill_tcp_data_p
 21479 0042 0146     		mov	r1, r0
 21480              		.loc 1 1172 0
 21481 0044 40F20003 		movw	r3, #:lower16:.LANCHOR18
 21482 0048 C0F20003 		movt	r3, #:upper16:.LANCHOR18
 21483 004c 2046     		mov	r0, r4
 21484 004e 1A68     		ldr	r2, [r3, #0]
 21485 0050 FFF7FEFF 		bl	fill_tcp_data_p
 21486 0054 0146     		mov	r1, r0
 21487              		.loc 1 1173 0
 21488 0056 40F20003 		movw	r3, #:lower16:.LANCHOR20
 21489 005a C0F20003 		movt	r3, #:upper16:.LANCHOR20
 21490 005e 2046     		mov	r0, r4
 21491 0060 1A68     		ldr	r2, [r3, #0]
 21492 0062 FFF7FEFF 		bl	fill_tcp_data
 21493 0066 0146     		mov	r1, r0
 21494              		.loc 1 1178 0
 21495 0068 2046     		mov	r0, r4
 21496 006a 40F20002 		movw	r2, #:lower16:.LC1
 21497 006e C0F20002 		movt	r2, #:upper16:.LC1
 21498 0072 FFF7FEFF 		bl	fill_tcp_data_p
 21499 0076 0146     		mov	r1, r0
 21500              		.loc 1 1179 0
 21501 0078 40F20003 		movw	r3, #:lower16:.LANCHOR19
 21502 007c C0F20003 		movt	r3, #:upper16:.LANCHOR19
 21503 0080 2046     		mov	r0, r4
 21504 0082 1A68     		ldr	r2, [r3, #0]
 21505 0084 FFF7FEFF 		bl	fill_tcp_data
 21506 0088 0146     		mov	r1, r0
 21507              		.loc 1 1180 0
 21508 008a 2046     		mov	r0, r4
 21509 008c 40F20002 		movw	r2, #:lower16:.LC2
 21510 0090 C0F20002 		movt	r2, #:upper16:.LC2
 21511 0094 FFF7FEFF 		bl	fill_tcp_data_p
 21512 0098 7CE0     		b	.L121
 21513              	.LVL129:
 21514              	.L122:
 21515              		.loc 1 1183 0
 21516 009a 40F20003 		movw	r3, #:lower16:.LANCHOR26
 21517 009e C0F20003 		movt	r3, #:upper16:.LANCHOR26
 21518 00a2 1C68     		ldr	r4, [r3, #0]
 21519 00a4 2046     		mov	r0, r4
 21520              	.LVL130:
 21521 00a6 4FF00001 		mov	r1, #0
 21522 00aa 40F20002 		movw	r2, #:lower16:.LC3
 21523 00ae C0F20002 		movt	r2, #:upper16:.LC3
 21524 00b2 FFF7FEFF 		bl	fill_tcp_data_p
 21525 00b6 0146     		mov	r1, r0
 21526              		.loc 1 1184 0
 21527 00b8 40F20003 		movw	r3, #:lower16:.LANCHOR18
 21528 00bc C0F20003 		movt	r3, #:upper16:.LANCHOR18
 21529 00c0 2046     		mov	r0, r4
 21530 00c2 1A68     		ldr	r2, [r3, #0]
 21531 00c4 FFF7FEFF 		bl	fill_tcp_data_p
 21532 00c8 0146     		mov	r1, r0
 21533              		.loc 1 1185 0
 21534 00ca 40F20003 		movw	r3, #:lower16:.LANCHOR20
 21535 00ce C0F20003 		movt	r3, #:upper16:.LANCHOR20
 21536 00d2 2046     		mov	r0, r4
 21537 00d4 1A68     		ldr	r2, [r3, #0]
 21538 00d6 FFF7FEFF 		bl	fill_tcp_data
 21539 00da 0146     		mov	r1, r0
 21540              		.loc 1 1186 0
 21541 00dc 2046     		mov	r0, r4
 21542 00de 40F20002 		movw	r2, #:lower16:.LC1
 21543 00e2 C0F20002 		movt	r2, #:upper16:.LC1
 21544 00e6 FFF7FEFF 		bl	fill_tcp_data_p
 21545 00ea 0146     		mov	r1, r0
 21546              		.loc 1 1187 0
 21547 00ec 40F20003 		movw	r3, #:lower16:.LANCHOR19
 21548 00f0 C0F20003 		movt	r3, #:upper16:.LANCHOR19
 21549 00f4 2046     		mov	r0, r4
 21550 00f6 1A68     		ldr	r2, [r3, #0]
 21551 00f8 FFF7FEFF 		bl	fill_tcp_data
 21552 00fc 0146     		mov	r1, r0
 21553              	.LVL131:
 21554              		.loc 1 1188 0
 21555 00fe 40F20003 		movw	r3, #:lower16:.LANCHOR21
 21556 0102 C0F20003 		movt	r3, #:upper16:.LANCHOR21
 21557 0106 1B68     		ldr	r3, [r3, #0]
 21558 0108 83B1     		cbz	r3, .L123
 21559              		.loc 1 1189 0
 21560 010a 2046     		mov	r0, r4
 21561 010c 40F20002 		movw	r2, #:lower16:.LC4
 21562 0110 C0F20002 		movt	r2, #:upper16:.LC4
 21563 0114 FFF7FEFF 		bl	fill_tcp_data_p
 21564              	.LVL132:
 21565 0118 0146     		mov	r1, r0
 21566              		.loc 1 1190 0
 21567 011a 40F20003 		movw	r3, #:lower16:.LANCHOR21
 21568 011e C0F20003 		movt	r3, #:upper16:.LANCHOR21
 21569 0122 2046     		mov	r0, r4
 21570 0124 1A68     		ldr	r2, [r3, #0]
 21571 0126 FFF7FEFF 		bl	fill_tcp_data_p
 21572 012a 0146     		mov	r1, r0
 21573              	.LVL133:
 21574              	.L123:
 21575              		.loc 1 1192 0
 21576 012c 2046     		mov	r0, r4
 21577 012e 40F20002 		movw	r2, #:lower16:.LC5
 21578 0132 C0F20002 		movt	r2, #:upper16:.LC5
 21579 0136 FFF7FEFF 		bl	fill_tcp_data_p
 21580              	.LVL134:
 21581 013a 0146     		mov	r1, r0
 21582              		.loc 1 1193 0
 21583 013c 2046     		mov	r0, r4
 21584 013e 40F20002 		movw	r2, #:lower16:.LC6
 21585 0142 C0F20002 		movt	r2, #:upper16:.LC6
 21586 0146 FFF7FEFF 		bl	fill_tcp_data_p
 21587 014a 0746     		mov	r7, r0
 21588              		.loc 1 1194 0
 21589 014c 40F20004 		movw	r4, #:lower16:.LANCHOR22
 21590 0150 C0F20004 		movt	r4, #:upper16:.LANCHOR22
 21591 0154 2068     		ldr	r0, [r4, #0]
 21592 0156 FFF7FEFF 		bl	strlen
 21593 015a 6E46     		mov	r6, sp
 21594 015c 6946     		mov	r1, sp
 21595 015e 4FF00A02 		mov	r2, #10
 21596 0162 FFF7FEFF 		bl	itoa
 21597              		.loc 1 1195 0
 21598 0166 40F20003 		movw	r3, #:lower16:.LANCHOR26
 21599 016a C0F20003 		movt	r3, #:upper16:.LANCHOR26
 21600 016e 1D68     		ldr	r5, [r3, #0]
 21601 0170 2846     		mov	r0, r5
 21602 0172 3946     		mov	r1, r7
 21603 0174 6A46     		mov	r2, sp
 21604 0176 FFF7FEFF 		bl	fill_tcp_data
 21605 017a 0146     		mov	r1, r0
 21606              		.loc 1 1196 0
 21607 017c 2846     		mov	r0, r5
 21608 017e 40F20002 		movw	r2, #:lower16:.LC7
 21609 0182 C0F20002 		movt	r2, #:upper16:.LC7
 21610 0186 FFF7FEFF 		bl	fill_tcp_data_p
 21611 018a 0146     		mov	r1, r0
 21612              		.loc 1 1197 0
 21613 018c 2846     		mov	r0, r5
 21614 018e 2268     		ldr	r2, [r4, #0]
 21615 0190 FFF7FEFF 		bl	fill_tcp_data
 21616              	.LVL135:
 21617              	.L121:
 21618              	.LVL136:
 21619              		.loc 1 1202 0
 21620 0194 03B0     		add	sp, sp, #12
 21621 0196 F0BD     		pop	{r4, r5, r6, r7, pc}
 21622              		.cfi_endproc
 21623              	.LFE66:
 21625              		.section	.text.tcp_client_syn,"ax",%progbits
 21626              		.align	2
 21627              		.global	tcp_client_syn
 21628              		.thumb
 21629              		.thumb_func
 21631              	tcp_client_syn:
 21632              	.LFB64:
 21633              		.loc 1 1037 0
 21634              		.cfi_startproc
 21635              		@ args = 0, pretend = 0, frame = 0
 21636              		@ frame_needed = 0, uses_anonymous_args = 0
 21637              	.LVL137:
 21638 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 21639              	.LCFI18:
 21640              		.cfi_def_cfa_offset 24
 21641 0002 0446     		mov	r4, r0
 21642              		.cfi_offset 14, -4
 21643              		.cfi_offset 7, -8
 21644              		.cfi_offset 6, -12
 21645              		.cfi_offset 5, -16
 21646              		.cfi_offset 4, -20
 21647              		.cfi_offset 3, -24
 21648 0004 0F46     		mov	r7, r1
 21649 0006 1646     		mov	r6, r2
 21650              		.loc 1 1037 0
 21651 0008 4FF00003 		mov	r3, #0
 21652              		.loc 1 1042 0
 21653 000c 40F2000C 		movw	ip, #:lower16:.LANCHOR13
 21654 0010 C0F2000C 		movt	ip, #:upper16:.LANCHOR13
 21655              		.loc 1 1043 0
 21656 0014 40F20000 		movw	r0, #:lower16:.LANCHOR2
 21657              	.LVL138:
 21658 0018 C0F20000 		movt	r0, #:upper16:.LANCHOR2
 21659              	.LVL139:
 21660              	.L126:
 21661              		.loc 1 1042 0
 21662 001c 1CF80320 		ldrb	r2, [ip, r3]	@ zero_extendqisi2
 21663 0020 E254     		strb	r2, [r4, r3]
 21664              		.loc 1 1043 0
 21665 0022 04EB0302 		add	r2, r4, r3
 21666 0026 C15C     		ldrb	r1, [r0, r3]	@ zero_extendqisi2
 21667 0028 9171     		strb	r1, [r2, #6]
 21668 002a 03F10103 		add	r3, r3, #1
 21669              		.loc 1 1041 0
 21670 002e 062B     		cmp	r3, #6
 21671 0030 F4D1     		bne	.L126
 21672              		.loc 1 1046 0
 21673 0032 4FF00803 		mov	r3, #8
 21674 0036 2373     		strb	r3, [r4, #12]
 21675              		.loc 1 1047 0
 21676 0038 4FF00005 		mov	r5, #0
 21677 003c 6573     		strb	r5, [r4, #13]
 21678              		.loc 1 1048 0
 21679 003e 04F10E00 		add	r0, r4, #14
 21680 0042 4FF00901 		mov	r1, #9
 21681 0046 40F20002 		movw	r2, #:lower16:.LANCHOR5
 21682 004a C0F20002 		movt	r2, #:upper16:.LANCHOR5
 21683 004e FFF7FEFF 		bl	fill_buf_p
 21684              		.loc 1 1049 0
 21685 0052 4FF02C03 		mov	r3, #44
 21686 0056 6374     		strb	r3, [r4, #17]
 21687              		.loc 1 1050 0
 21688 0058 40F20003 		movw	r3, #:lower16:.LANCHOR6
 21689 005c C0F20003 		movt	r3, #:upper16:.LANCHOR6
 21690 0060 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 21691 0062 E274     		strb	r2, [r4, #19]
 21692 0064 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 21693 0066 02F10102 		add	r2, r2, #1
 21694 006a 1A70     		strb	r2, [r3, #0]
 21695              		.loc 1 1051 0
 21696 006c 4FF00603 		mov	r3, #6
 21697 0070 E375     		strb	r3, [r4, #23]
 21698 0072 2346     		mov	r3, r4
 21699              		.loc 1 1054 0
 21700 0074 40F20000 		movw	r0, #:lower16:.LANCHOR12
 21701 0078 C0F20000 		movt	r0, #:upper16:.LANCHOR12
 21702              		.loc 1 1055 0
 21703 007c 40F20001 		movw	r1, #:lower16:.LANCHOR0
 21704 0080 C0F20001 		movt	r1, #:upper16:.LANCHOR0
 21705              	.L127:
 21706              		.loc 1 1054 0
 21707 0084 425D     		ldrb	r2, [r0, r5]	@ zero_extendqisi2
 21708 0086 9A77     		strb	r2, [r3, #30]
 21709              		.loc 1 1055 0
 21710 0088 4A5D     		ldrb	r2, [r1, r5]	@ zero_extendqisi2
 21711 008a 9A76     		strb	r2, [r3, #26]
 21712 008c 05F10105 		add	r5, r5, #1
 21713 0090 03F10103 		add	r3, r3, #1
 21714              		.loc 1 1053 0
 21715 0094 042D     		cmp	r5, #4
 21716 0096 F5D1     		bne	.L127
 21717              		.loc 1 1058 0
 21718 0098 2046     		mov	r0, r4
 21719 009a FFF7FEFF 		bl	fill_ip_hdr_checksum
 21720              		.loc 1 1059 0
 21721 009e 4FEA1623 		lsr	r3, r6, #8
 21722 00a2 84F82430 		strb	r3, [r4, #36]
 21723              		.loc 1 1060 0
 21724 00a6 84F82560 		strb	r6, [r4, #37]
 21725              		.loc 1 1061 0
 21726 00aa 4FF00B03 		mov	r3, #11
 21727 00ae 84F82230 		strb	r3, [r4, #34]
 21728              		.loc 1 1062 0
 21729 00b2 84F82370 		strb	r7, [r4, #35]
 21730              	.LVL140:
 21731 00b6 4FF00003 		mov	r3, #0
 21732              		.loc 1 1066 0
 21733 00ba 1946     		mov	r1, r3
 21734              	.L128:
 21735 00bc 04EB0302 		add	r2, r4, r3
 21736 00c0 82F82610 		strb	r1, [r2, #38]
 21737 00c4 03F10103 		add	r3, r3, #1
 21738              		.loc 1 1065 0
 21739 00c8 082B     		cmp	r3, #8
 21740 00ca F7D1     		bne	.L128
 21741              		.loc 1 1074 0
 21742 00cc 40F20003 		movw	r3, #:lower16:.LANCHOR27
 21743 00d0 C0F20003 		movt	r3, #:upper16:.LANCHOR27
 21744 00d4 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 21745 00d6 84F82820 		strb	r2, [r4, #40]
 21746              		.loc 1 1077 0
 21747 00da 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 21748 00dc 02F10302 		add	r2, r2, #3
 21749 00e0 1A70     		strb	r2, [r3, #0]
 21750              		.loc 1 1078 0
 21751 00e2 4FF06003 		mov	r3, #96
 21752 00e6 84F82E30 		strb	r3, [r4, #46]
 21753              		.loc 1 1079 0
 21754 00ea 4FF00202 		mov	r2, #2
 21755 00ee 84F82F20 		strb	r2, [r4, #47]
 21756              		.loc 1 1082 0
 21757 00f2 4FF00303 		mov	r3, #3
 21758 00f6 84F83030 		strb	r3, [r4, #48]
 21759              		.loc 1 1083 0
 21760 00fa 4FF00003 		mov	r3, #0
 21761 00fe 84F83130 		strb	r3, [r4, #49]
 21762              		.loc 1 1085 0
 21763 0102 2546     		mov	r5, r4
 21764 0104 05F8323F 		strb	r3, [r5, #50]!
 21765              		.loc 1 1086 0
 21766 0108 2646     		mov	r6, r4
 21767              	.LVL141:
 21768 010a 06F8333F 		strb	r3, [r6, #51]!
 21769              		.loc 1 1088 0
 21770 010e 84F83430 		strb	r3, [r4, #52]
 21771              		.loc 1 1089 0
 21772 0112 84F83530 		strb	r3, [r4, #53]
 21773              		.loc 1 1091 0
 21774 0116 84F83620 		strb	r2, [r4, #54]
 21775              		.loc 1 1092 0
 21776 011a 4FF00403 		mov	r3, #4
 21777 011e 84F83730 		strb	r3, [r4, #55]
 21778              		.loc 1 1093 0
 21779 0122 84F83820 		strb	r2, [r4, #56]
 21780              		.loc 1 1094 0
 21781 0126 6FF01103 		mvn	r3, #17
 21782 012a 84F83930 		strb	r3, [r4, #57]
 21783              		.loc 1 1095 0
 21784 012e 04F11A00 		add	r0, r4, #26
 21785 0132 4FF02001 		mov	r1, #32
 21786 0136 FFF7FEFF 		bl	checksum
 21787              		.loc 1 1096 0
 21788 013a 4FEA1023 		lsr	r3, r0, #8
 21789 013e 2B70     		strb	r3, [r5, #0]
 21790              		.loc 1 1097 0
 21791 0140 3070     		strb	r0, [r6, #0]
 21792              		.loc 1 1099 0
 21793 0142 4FF03A00 		mov	r0, #58
 21794 0146 2146     		mov	r1, r4
 21795 0148 FFF7FEFF 		bl	enc28j60PacketSend
 21796              		.loc 1 1100 0
 21797 014c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 21798              		.cfi_endproc
 21799              	.LFE64:
 21801 014e 00BF     		.section	.text.client_arp_whohas,"ax",%progbits
 21802              		.align	2
 21803              		.global	client_arp_whohas
 21804              		.thumb
 21805              		.thumb_func
 21807              	client_arp_whohas:
 21808              	.LFB61:
 21809              		.loc 1 979 0
 21810              		.cfi_startproc
 21811              		@ args = 0, pretend = 0, frame = 0
 21812              		@ frame_needed = 0, uses_anonymous_args = 0
 21813              	.LVL142:
 21814 0000 38B5     		push	{r3, r4, r5, lr}
 21815              	.LCFI19:
 21816              		.cfi_def_cfa_offset 16
 21817 0002 0446     		mov	r4, r0
 21818              		.cfi_offset 14, -4
 21819              		.cfi_offset 5, -8
 21820              		.cfi_offset 4, -12
 21821              		.cfi_offset 3, -16
 21822 0004 0D46     		mov	r5, r1
 21823              		.loc 1 981 0
 21824 0006 40F20003 		movw	r3, #:lower16:.LANCHOR0
 21825 000a C0F20003 		movt	r3, #:upper16:.LANCHOR0
 21826 000e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 21827 0010 002B     		cmp	r3, #0
 21828 0012 47D0     		beq	.L138
 21829              	.LVL143:
 21830 0014 4FF00003 		mov	r3, #0
 21831              		.loc 1 984 0
 21832 0018 4FF0FF3C 		mov	ip, #-1
 21833              		.loc 1 985 0
 21834 001c 40F20000 		movw	r0, #:lower16:.LANCHOR2
 21835 0020 C0F20000 		movt	r0, #:upper16:.LANCHOR2
 21836              	.L135:
 21837              		.loc 1 984 0
 21838 0024 04F803C0 		strb	ip, [r4, r3]
 21839              		.loc 1 985 0
 21840 0028 04EB0302 		add	r2, r4, r3
 21841 002c C15C     		ldrb	r1, [r0, r3]	@ zero_extendqisi2
 21842 002e 9171     		strb	r1, [r2, #6]
 21843 0030 03F10103 		add	r3, r3, #1
 21844              		.loc 1 983 0
 21845 0034 062B     		cmp	r3, #6
 21846 0036 F5D1     		bne	.L135
 21847              		.loc 1 988 0
 21848 0038 4FF00801 		mov	r1, #8
 21849 003c 2173     		strb	r1, [r4, #12]
 21850              		.loc 1 989 0
 21851 003e 6373     		strb	r3, [r4, #13]
 21852              		.loc 1 990 0
 21853 0040 04F10E00 		add	r0, r4, #14
 21854 0044 40F20002 		movw	r2, #:lower16:.LANCHOR28
 21855 0048 C0F20002 		movt	r2, #:upper16:.LANCHOR28
 21856 004c FFF7FEFF 		bl	fill_buf_p
 21857 0050 2146     		mov	r1, r4
 21858 0052 2246     		mov	r2, r4
 21859 0054 4FF00003 		mov	r3, #0
 21860              		.loc 1 993 0
 21861 0058 40F2000C 		movw	ip, #:lower16:.LANCHOR2
 21862 005c C0F2000C 		movt	ip, #:upper16:.LANCHOR2
 21863              		.loc 1 994 0
 21864 0060 9E46     		mov	lr, r3
 21865              	.L136:
 21866              		.loc 1 993 0
 21867 0062 1CF80300 		ldrb	r0, [ip, r3]	@ zero_extendqisi2
 21868 0066 9075     		strb	r0, [r2, #22]
 21869              		.loc 1 994 0
 21870 0068 82F820E0 		strb	lr, [r2, #32]
 21871 006c 03F10103 		add	r3, r3, #1
 21872 0070 02F10102 		add	r2, r2, #1
 21873              		.loc 1 992 0
 21874 0074 062B     		cmp	r3, #6
 21875 0076 F4D1     		bne	.L136
 21876 0078 4FF00003 		mov	r3, #0
 21877              		.loc 1 1000 0
 21878 007c 40F20000 		movw	r0, #:lower16:.LANCHOR0
 21879 0080 C0F20000 		movt	r0, #:upper16:.LANCHOR0
 21880              	.L137:
 21881              		.loc 1 999 0
 21882 0084 EA5C     		ldrb	r2, [r5, r3]	@ zero_extendqisi2
 21883 0086 81F82620 		strb	r2, [r1, #38]
 21884              		.loc 1 1000 0
 21885 008a C25C     		ldrb	r2, [r0, r3]	@ zero_extendqisi2
 21886 008c 0A77     		strb	r2, [r1, #28]
 21887 008e 03F10103 		add	r3, r3, #1
 21888 0092 01F10101 		add	r1, r1, #1
 21889              		.loc 1 998 0
 21890 0096 042B     		cmp	r3, #4
 21891 0098 F4D1     		bne	.L137
 21892              		.loc 1 1004 0
 21893 009a 4FF02A00 		mov	r0, #42
 21894 009e 2146     		mov	r1, r4
 21895 00a0 FFF7FEFF 		bl	enc28j60PacketSend
 21896              	.LVL144:
 21897              	.L138:
 21898 00a4 38BD     		pop	{r3, r4, r5, pc}
 21899              		.cfi_endproc
 21900              	.LFE61:
 21902 00a6 00BF     		.section	.text.send_udp_transmit,"ax",%progbits
 21903              		.align	2
 21904              		.global	send_udp_transmit
 21905              		.thumb
 21906              		.thumb_func
 21908              	send_udp_transmit:
 21909              	.LFB59:
 21910              		.loc 1 826 0
 21911              		.cfi_startproc
 21912              		@ args = 0, pretend = 0, frame = 0
 21913              		@ frame_needed = 0, uses_anonymous_args = 0
 21914              	.LVL145:
 21915 0000 38B5     		push	{r3, r4, r5, lr}
 21916              	.LCFI20:
 21917              		.cfi_def_cfa_offset 16
 21918 0002 0446     		mov	r4, r0
 21919              		.cfi_offset 14, -4
 21920              		.cfi_offset 5, -8
 21921              		.cfi_offset 4, -12
 21922              		.cfi_offset 3, -16
 21923 0004 0D46     		mov	r5, r1
 21924              		.loc 1 828 0
 21925 0006 01F11C03 		add	r3, r1, #28
 21926 000a 9BB2     		uxth	r3, r3
 21927              	.LVL146:
 21928              		.loc 1 829 0
 21929 000c 4374     		strb	r3, [r0, #17]
 21930              		.loc 1 830 0
 21931 000e 4FEA1323 		lsr	r3, r3, #8
 21932              	.LVL147:
 21933 0012 0374     		strb	r3, [r0, #16]
 21934              		.loc 1 831 0
 21935 0014 FFF7FEFF 		bl	fill_ip_hdr_checksum
 21936              	.LVL148:
 21937              		.loc 1 832 0
 21938 0018 05F10803 		add	r3, r5, #8
 21939 001c 9BB2     		uxth	r3, r3
 21940              	.LVL149:
 21941              		.loc 1 833 0
 21942 001e 84F82730 		strb	r3, [r4, #39]
 21943              		.loc 1 834 0
 21944 0022 4FEA1323 		lsr	r3, r3, #8
 21945              	.LVL150:
 21946 0026 84F82630 		strb	r3, [r4, #38]
 21947              		.loc 1 836 0
 21948 002a 05F11001 		add	r1, r5, #16
 21949 002e 04F11A00 		add	r0, r4, #26
 21950 0032 89B2     		uxth	r1, r1
 21951 0034 4FF00102 		mov	r2, #1
 21952 0038 FFF7FEFF 		bl	checksum
 21953              		.loc 1 837 0
 21954 003c 84F82900 		strb	r0, [r4, #41]
 21955              		.loc 1 838 0
 21956 0040 4FEA1020 		lsr	r0, r0, #8
 21957 0044 84F82800 		strb	r0, [r4, #40]
 21958              		.loc 1 839 0
 21959 0048 05F12A00 		add	r0, r5, #42
 21960 004c 80B2     		uxth	r0, r0
 21961 004e 2146     		mov	r1, r4
 21962 0050 FFF7FEFF 		bl	enc28j60PacketSend
 21963              		.loc 1 840 0
 21964 0054 38BD     		pop	{r3, r4, r5, pc}
 21965              		.cfi_endproc
 21966              	.LFE59:
 21968 0056 00BF     		.section	.text.send_udp,"ax",%progbits
 21969              		.align	2
 21970              		.global	send_udp
 21971              		.thumb
 21972              		.thumb_func
 21974              	send_udp:
 21975              	.LFB60:
 21976              		.loc 1 843 0
 21977              		.cfi_startproc
 21978              		@ args = 12, pretend = 0, frame = 0
 21979              		@ frame_needed = 0, uses_anonymous_args = 0
 21980              	.LVL151:
 21981 0000 70B5     		push	{r4, r5, r6, lr}
 21982              	.LCFI21:
 21983              		.cfi_def_cfa_offset 16
 21984 0002 82B0     		sub	sp, sp, #8
 21985              	.LCFI22:
 21986              		.cfi_def_cfa_offset 24
 21987 0004 0446     		mov	r4, r0
 21988              		.cfi_offset 14, -4
 21989              		.cfi_offset 6, -8
 21990              		.cfi_offset 5, -12
 21991              		.cfi_offset 4, -16
 21992 0006 0D46     		mov	r5, r1
 21993 0008 1646     		mov	r6, r2
 21994 000a BDF81CC0 		ldrh	ip, [sp, #28]
 21995              	.LVL152:
 21996              		.loc 1 845 0
 21997 000e 089A     		ldr	r2, [sp, #32]
 21998              	.LVL153:
 21999 0010 0092     		str	r2, [sp, #0]
 22000 0012 1946     		mov	r1, r3
 22001              	.LVL154:
 22002 0014 069A     		ldr	r2, [sp, #24]
 22003 0016 6346     		mov	r3, ip
 22004              	.LVL155:
 22005 0018 FFF7FEFF 		bl	send_udp_prepare
 22006              	.LVL156:
 22007 001c DC2E     		cmp	r6, #220
 22008 001e 34BF     		ite	cc
 22009 0020 3146     		movcc	r1, r6
 22010 0022 DC21     		movcs	r1, #220
 22011              	.LVL157:
 22012 0024 8C46     		mov	ip, r1
 22013              		.loc 1 853 0
 22014 0026 51B1     		cbz	r1, .L145
 22015 0028 4FF00003 		mov	r3, #0
 22016              	.L146:
 22017              		.loc 1 854 0
 22018 002c 04EB0302 		add	r2, r4, r3
 22019 0030 E85C     		ldrb	r0, [r5, r3]	@ zero_extendqisi2
 22020 0032 82F82A00 		strb	r0, [r2, #42]
 22021 0036 03F10103 		add	r3, r3, #1
 22022              		.loc 1 853 0
 22023 003a 6345     		cmp	r3, ip
 22024 003c F6DB     		blt	.L146
 22025              	.L145:
 22026              		.loc 1 858 0
 22027 003e 2046     		mov	r0, r4
 22028 0040 FFF7FEFF 		bl	send_udp_transmit
 22029              	.LVL158:
 22030              		.loc 1 859 0
 22031 0044 02B0     		add	sp, sp, #8
 22032 0046 70BD     		pop	{r4, r5, r6, pc}
 22033              		.cfi_endproc
 22034              	.LFE60:
 22036              		.section	.text.client_ntp_request,"ax",%progbits
 22037              		.align	2
 22038              		.global	client_ntp_request
 22039              		.thumb
 22040              		.thumb_func
 22042              	client_ntp_request:
 22043              	.LFB56:
 22044              		.loc 1 713 0
 22045              		.cfi_startproc
 22046              		@ args = 0, pretend = 0, frame = 0
 22047              		@ frame_needed = 0, uses_anonymous_args = 0
 22048              	.LVL159:
 22049 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 22050              	.LCFI23:
 22051              		.cfi_def_cfa_offset 24
 22052              	.LVL160:
 22053 0002 0446     		mov	r4, r0
 22054              		.cfi_offset 14, -4
 22055              		.cfi_offset 7, -8
 22056              		.cfi_offset 6, -12
 22057              		.cfi_offset 5, -16
 22058              		.cfi_offset 4, -20
 22059              		.cfi_offset 3, -24
 22060 0004 0D46     		mov	r5, r1
 22061 0006 1746     		mov	r7, r2
 22062              		.loc 1 713 0
 22063 0008 4FF00002 		mov	r2, #0
 22064              	.LVL161:
 22065              		.loc 1 719 0
 22066 000c 40F2000C 		movw	ip, #:lower16:.LANCHOR2
 22067 0010 C0F2000C 		movt	ip, #:upper16:.LANCHOR2
 22068              	.LVL162:
 22069              	.L150:
 22070              		.loc 1 718 0
 22071 0014 995C     		ldrb	r1, [r3, r2]	@ zero_extendqisi2
 22072              	.LVL163:
 22073 0016 A154     		strb	r1, [r4, r2]
 22074              		.loc 1 719 0
 22075 0018 04EB0201 		add	r1, r4, r2
 22076 001c 1CF80200 		ldrb	r0, [ip, r2]	@ zero_extendqisi2
 22077 0020 8871     		strb	r0, [r1, #6]
 22078 0022 02F10102 		add	r2, r2, #1
 22079              		.loc 1 717 0
 22080 0026 062A     		cmp	r2, #6
 22081 0028 F4D1     		bne	.L150
 22082              		.loc 1 723 0
 22083 002a 4FF00803 		mov	r3, #8
 22084              	.LVL164:
 22085 002e 2373     		strb	r3, [r4, #12]
 22086              		.loc 1 724 0
 22087 0030 4FF00006 		mov	r6, #0
 22088 0034 6673     		strb	r6, [r4, #13]
 22089              		.loc 1 725 0
 22090 0036 04F10E00 		add	r0, r4, #14
 22091 003a 4FF00901 		mov	r1, #9
 22092 003e 40F20002 		movw	r2, #:lower16:.LANCHOR5
 22093 0042 C0F20002 		movt	r2, #:upper16:.LANCHOR5
 22094 0046 FFF7FEFF 		bl	fill_buf_p
 22095              		.loc 1 726 0
 22096 004a 40F20003 		movw	r3, #:lower16:.LANCHOR6
 22097 004e C0F20003 		movt	r3, #:upper16:.LANCHOR6
 22098 0052 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 22099 0054 E274     		strb	r2, [r4, #19]
 22100 0056 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 22101 0058 02F10102 		add	r2, r2, #1
 22102 005c 1A70     		strb	r2, [r3, #0]
 22103              		.loc 1 727 0
 22104 005e 4FF04C03 		mov	r3, #76
 22105 0062 6374     		strb	r3, [r4, #17]
 22106              		.loc 1 728 0
 22107 0064 4FF01103 		mov	r3, #17
 22108 0068 E375     		strb	r3, [r4, #23]
 22109 006a 2346     		mov	r3, r4
 22110              		.loc 1 732 0
 22111 006c 40F20001 		movw	r1, #:lower16:.LANCHOR0
 22112 0070 C0F20001 		movt	r1, #:upper16:.LANCHOR0
 22113              	.L151:
 22114              		.loc 1 731 0
 22115 0074 AA5D     		ldrb	r2, [r5, r6]	@ zero_extendqisi2
 22116 0076 9A77     		strb	r2, [r3, #30]
 22117              		.loc 1 732 0
 22118 0078 8A5D     		ldrb	r2, [r1, r6]	@ zero_extendqisi2
 22119 007a 9A76     		strb	r2, [r3, #26]
 22120 007c 06F10106 		add	r6, r6, #1
 22121 0080 03F10103 		add	r3, r3, #1
 22122              		.loc 1 730 0
 22123 0084 042E     		cmp	r6, #4
 22124 0086 F5D1     		bne	.L151
 22125              		.loc 1 735 0
 22126 0088 2046     		mov	r0, r4
 22127 008a FFF7FEFF 		bl	fill_ip_hdr_checksum
 22128              		.loc 1 736 0
 22129 008e 4FF00003 		mov	r3, #0
 22130 0092 84F82430 		strb	r3, [r4, #36]
 22131              		.loc 1 737 0
 22132 0096 4FF07B02 		mov	r2, #123
 22133 009a 84F82520 		strb	r2, [r4, #37]
 22134              		.loc 1 738 0
 22135 009e 4FF00A02 		mov	r2, #10
 22136 00a2 84F82220 		strb	r2, [r4, #34]
 22137              		.loc 1 739 0
 22138 00a6 84F82370 		strb	r7, [r4, #35]
 22139              	.LVL165:
 22140              		.loc 1 740 0
 22141 00aa 84F82630 		strb	r3, [r4, #38]
 22142              		.loc 1 741 0
 22143 00ae 4FF03802 		mov	r2, #56
 22144 00b2 84F82720 		strb	r2, [r4, #39]
 22145              		.loc 1 743 0
 22146 00b6 2546     		mov	r5, r4
 22147              	.LVL166:
 22148 00b8 05F8283F 		strb	r3, [r5, #40]!
 22149              		.loc 1 744 0
 22150 00bc 2646     		mov	r6, r4
 22151 00be 06F8293F 		strb	r3, [r6, #41]!
 22152              		.loc 1 749 0
 22153 00c2 1946     		mov	r1, r3
 22154              	.L152:
 22155 00c4 04EB0302 		add	r2, r4, r3
 22156 00c8 82F82A10 		strb	r1, [r2, #42]
 22157 00cc 03F10103 		add	r3, r3, #1
 22158              		.loc 1 748 0
 22159 00d0 302B     		cmp	r3, #48
 22160 00d2 F7D1     		bne	.L152
 22161              		.loc 1 752 0
 22162 00d4 04F12A00 		add	r0, r4, #42
 22163 00d8 4FF00A01 		mov	r1, #10
 22164 00dc 40F20002 		movw	r2, #:lower16:.LANCHOR29
 22165 00e0 C0F20002 		movt	r2, #:upper16:.LANCHOR29
 22166 00e4 FFF7FEFF 		bl	fill_buf_p
 22167              		.loc 1 754 0
 22168 00e8 04F11A00 		add	r0, r4, #26
 22169 00ec 4FF04001 		mov	r1, #64
 22170 00f0 4FF00102 		mov	r2, #1
 22171 00f4 FFF7FEFF 		bl	checksum
 22172              		.loc 1 755 0
 22173 00f8 4FEA1023 		lsr	r3, r0, #8
 22174 00fc 2B70     		strb	r3, [r5, #0]
 22175              		.loc 1 756 0
 22176 00fe 3070     		strb	r0, [r6, #0]
 22177              		.loc 1 757 0
 22178 0100 4FF05A00 		mov	r0, #90
 22179 0104 2146     		mov	r1, r4
 22180 0106 FFF7FEFF 		bl	enc28j60PacketSend
 22181              		.loc 1 758 0
 22182 010a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 22183              		.cfi_endproc
 22184              	.LFE56:
 22186              		.section	.text.make_tcp_synack_from_syn,"ax",%progbits
 22187              		.align	2
 22188              		.global	make_tcp_synack_from_syn
 22189              		.thumb
 22190              		.thumb_func
 22192              	make_tcp_synack_from_syn:
 22193              	.LFB53:
 22194              		.loc 1 576 0
 22195              		.cfi_startproc
 22196              		@ args = 0, pretend = 0, frame = 0
 22197              		@ frame_needed = 0, uses_anonymous_args = 0
 22198              	.LVL167:
 22199 0000 38B5     		push	{r3, r4, r5, lr}
 22200              	.LCFI24:
 22201              		.cfi_def_cfa_offset 16
 22202 0002 0446     		mov	r4, r0
 22203              		.cfi_offset 14, -4
 22204              		.cfi_offset 5, -8
 22205              		.cfi_offset 4, -12
 22206              		.cfi_offset 3, -16
 22207              		.loc 1 578 0
 22208 0004 FFF7FEFF 		bl	make_eth
 22209              	.LVL168:
 22210              		.loc 1 581 0
 22211 0008 4FF00005 		mov	r5, #0
 22212 000c 2574     		strb	r5, [r4, #16]
 22213              		.loc 1 582 0
 22214 000e 4FF02C03 		mov	r3, #44
 22215 0012 6374     		strb	r3, [r4, #17]
 22216              		.loc 1 583 0
 22217 0014 2046     		mov	r0, r4
 22218 0016 FFF7FEFF 		bl	make_ip
 22219              		.loc 1 584 0
 22220 001a 4FF01203 		mov	r3, #18
 22221 001e 84F82F30 		strb	r3, [r4, #47]
 22222              		.loc 1 585 0
 22223 0022 2046     		mov	r0, r4
 22224 0024 4FF00101 		mov	r1, #1
 22225 0028 2A46     		mov	r2, r5
 22226 002a FFF7FEFF 		bl	make_tcphead
 22227              		.loc 1 587 0
 22228 002e 84F82650 		strb	r5, [r4, #38]
 22229              		.loc 1 588 0
 22230 0032 84F82750 		strb	r5, [r4, #39]
 22231              		.loc 1 592 0
 22232 0036 40F20003 		movw	r3, #:lower16:.LANCHOR27
 22233 003a C0F20003 		movt	r3, #:upper16:.LANCHOR27
 22234 003e 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 22235 0040 84F82820 		strb	r2, [r4, #40]
 22236              		.loc 1 593 0
 22237 0044 84F82950 		strb	r5, [r4, #41]
 22238              		.loc 1 596 0
 22239 0048 02F10302 		add	r2, r2, #3
 22240 004c 1A70     		strb	r2, [r3, #0]
 22241              		.loc 1 599 0
 22242 004e 4FF00202 		mov	r2, #2
 22243 0052 84F83620 		strb	r2, [r4, #54]
 22244              		.loc 1 600 0
 22245 0056 4FF00403 		mov	r3, #4
 22246 005a 84F83730 		strb	r3, [r4, #55]
 22247              		.loc 1 601 0
 22248 005e 4FF00503 		mov	r3, #5
 22249 0062 84F83830 		strb	r3, [r4, #56]
 22250              		.loc 1 602 0
 22251 0066 84F83950 		strb	r5, [r4, #57]
 22252              		.loc 1 606 0
 22253 006a 4FF06003 		mov	r3, #96
 22254 006e 84F82E30 		strb	r3, [r4, #46]
 22255              		.loc 1 609 0
 22256 0072 4FF00A03 		mov	r3, #10
 22257 0076 84F83030 		strb	r3, [r4, #48]
 22258              		.loc 1 610 0
 22259 007a 84F83150 		strb	r5, [r4, #49]
 22260              		.loc 1 612 0
 22261 007e 04F11A00 		add	r0, r4, #26
 22262 0082 4FF02001 		mov	r1, #32
 22263 0086 FFF7FEFF 		bl	checksum
 22264              		.loc 1 613 0
 22265 008a 4FEA1023 		lsr	r3, r0, #8
 22266 008e 84F83230 		strb	r3, [r4, #50]
 22267              		.loc 1 614 0
 22268 0092 84F83300 		strb	r0, [r4, #51]
 22269              		.loc 1 616 0
 22270 0096 4FF03A00 		mov	r0, #58
 22271 009a 2146     		mov	r1, r4
 22272 009c FFF7FEFF 		bl	enc28j60PacketSend
 22273              		.loc 1 617 0
 22274 00a0 38BD     		pop	{r3, r4, r5, pc}
 22275              		.cfi_endproc
 22276              	.LFE53:
 22278 00a2 00BF     		.section	.text.make_udp_reply_from_request_udpdat_ready,"ax",%progbits
 22279              		.align	2
 22280              		.global	make_udp_reply_from_request_udpdat_ready
 22281              		.thumb
 22282              		.thumb_func
 22284              	make_udp_reply_from_request_udpdat_ready:
 22285              	.LFB49:
 22286              		.loc 1 504 0
 22287              		.cfi_startproc
 22288              		@ args = 0, pretend = 0, frame = 0
 22289              		@ frame_needed = 0, uses_anonymous_args = 0
 22290              	.LVL169:
 22291 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 22292              	.LCFI25:
 22293              		.cfi_def_cfa_offset 24
 22294 0002 0446     		mov	r4, r0
 22295              		.cfi_offset 14, -4
 22296              		.cfi_offset 7, -8
 22297              		.cfi_offset 6, -12
 22298              		.cfi_offset 5, -16
 22299              		.cfi_offset 4, -20
 22300              		.cfi_offset 3, -24
 22301 0004 0D46     		mov	r5, r1
 22302 0006 1646     		mov	r6, r2
 22303              		.loc 1 506 0
 22304 0008 FFF7FEFF 		bl	make_eth
 22305              	.LVL170:
 22306 000c DC2D     		cmp	r5, #220
 22307 000e 28BF     		it	cs
 22308 0010 DC25     		movcs	r5, #220
 22309              	.LVL171:
 22310              		.loc 1 511 0
 22311 0012 05F11C03 		add	r3, r5, #28
 22312 0016 9BB2     		uxth	r3, r3
 22313              	.LVL172:
 22314              		.loc 1 512 0
 22315 0018 4FEA1322 		lsr	r2, r3, #8
 22316 001c 2274     		strb	r2, [r4, #16]
 22317              		.loc 1 513 0
 22318 001e 6374     		strb	r3, [r4, #17]
 22319              		.loc 1 514 0
 22320 0020 2046     		mov	r0, r4
 22321 0022 FFF7FEFF 		bl	make_ip
 22322              	.LVL173:
 22323              		.loc 1 519 0
 22324 0026 2246     		mov	r2, r4
 22325 0028 12F8223F 		ldrb	r3, [r2, #34]!	@ zero_extendqisi2
 22326 002c 84F82430 		strb	r3, [r4, #36]
 22327              		.loc 1 520 0
 22328 0030 2346     		mov	r3, r4
 22329 0032 13F8231F 		ldrb	r1, [r3, #35]!	@ zero_extendqisi2
 22330 0036 84F82510 		strb	r1, [r4, #37]
 22331              		.loc 1 521 0
 22332 003a 4FEA1621 		lsr	r1, r6, #8
 22333 003e 1170     		strb	r1, [r2, #0]
 22334              		.loc 1 522 0
 22335 0040 1E70     		strb	r6, [r3, #0]
 22336              		.loc 1 524 0
 22337 0042 05F10803 		add	r3, r5, #8
 22338 0046 9BB2     		uxth	r3, r3
 22339              	.LVL174:
 22340              		.loc 1 525 0
 22341 0048 4FEA1322 		lsr	r2, r3, #8
 22342 004c 84F82620 		strb	r2, [r4, #38]
 22343              		.loc 1 526 0
 22344 0050 84F82730 		strb	r3, [r4, #39]
 22345              		.loc 1 528 0
 22346 0054 2646     		mov	r6, r4
 22347              	.LVL175:
 22348 0056 4FF00003 		mov	r3, #0
 22349              	.LVL176:
 22350 005a 06F8283F 		strb	r3, [r6, #40]!
 22351              		.loc 1 529 0
 22352 005e 2746     		mov	r7, r4
 22353 0060 07F8293F 		strb	r3, [r7, #41]!
 22354              		.loc 1 530 0
 22355 0064 05F11001 		add	r1, r5, #16
 22356 0068 04F11A00 		add	r0, r4, #26
 22357 006c 89B2     		uxth	r1, r1
 22358 006e 4FF00102 		mov	r2, #1
 22359 0072 FFF7FEFF 		bl	checksum
 22360              		.loc 1 531 0
 22361 0076 4FEA1023 		lsr	r3, r0, #8
 22362 007a 3370     		strb	r3, [r6, #0]
 22363              		.loc 1 532 0
 22364 007c 3870     		strb	r0, [r7, #0]
 22365              		.loc 1 533 0
 22366 007e 05F12A00 		add	r0, r5, #42
 22367 0082 80B2     		uxth	r0, r0
 22368 0084 2146     		mov	r1, r4
 22369 0086 FFF7FEFF 		bl	enc28j60PacketSend
 22370              		.loc 1 534 0
 22371 008a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 22372              		.cfi_endproc
 22373              	.LFE49:
 22375              		.section	.text.make_udp_reply_from_request,"ax",%progbits
 22376              		.align	2
 22377              		.global	make_udp_reply_from_request
 22378              		.thumb
 22379              		.thumb_func
 22381              	make_udp_reply_from_request:
 22382              	.LFB50:
 22383              		.loc 1 539 0
 22384              		.cfi_startproc
 22385              		@ args = 0, pretend = 0, frame = 0
 22386              		@ frame_needed = 0, uses_anonymous_args = 0
 22387              	.LVL177:
 22388 0000 38B5     		push	{r3, r4, r5, lr}
 22389              	.LCFI26:
 22390              		.cfi_def_cfa_offset 16
 22391              	.LVL178:
 22392              		.loc 1 539 0
 22393 0002 1546     		mov	r5, r2
 22394              		.cfi_offset 14, -4
 22395              		.cfi_offset 5, -8
 22396              		.cfi_offset 4, -12
 22397              		.cfi_offset 3, -16
 22398              		.loc 1 542 0
 22399 0004 5AB1     		cbz	r2, .L162
 22400 0006 4FF0000C 		mov	ip, #0
 22401              	.L163:
 22402              		.loc 1 543 0
 22403 000a 00EB0C04 		add	r4, r0, ip
 22404 000e 11F80CE0 		ldrb	lr, [r1, ip]	@ zero_extendqisi2
 22405 0012 84F82AE0 		strb	lr, [r4, #42]
 22406 0016 0CF1010C 		add	ip, ip, #1
 22407              		.loc 1 542 0
 22408 001a AC45     		cmp	ip, r5
 22409 001c F5DB     		blt	.L163
 22410              	.L162:
 22411              		.loc 1 546 0
 22412 001e 1146     		mov	r1, r2
 22413              	.LVL179:
 22414 0020 1A46     		mov	r2, r3
 22415              	.LVL180:
 22416 0022 FFF7FEFF 		bl	make_udp_reply_from_request_udpdat_ready
 22417              	.LVL181:
 22418              		.loc 1 547 0
 22419 0026 38BD     		pop	{r3, r4, r5, pc}
 22420              		.cfi_endproc
 22421              	.LFE50:
 22423              		.section	.text.make_tcp_ack_with_data_noflags,"ax",%progbits
 22424              		.align	2
 22425              		.global	make_tcp_ack_with_data_noflags
 22426              		.thumb
 22427              		.thumb_func
 22429              	make_tcp_ack_with_data_noflags:
 22430              	.LFB48:
 22431              		.loc 1 483 0
 22432              		.cfi_startproc
 22433              		@ args = 0, pretend = 0, frame = 0
 22434              		@ frame_needed = 0, uses_anonymous_args = 0
 22435              	.LVL182:
 22436 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 22437              	.LCFI27:
 22438              		.cfi_def_cfa_offset 24
 22439 0002 0446     		mov	r4, r0
 22440              		.cfi_offset 14, -4
 22441              		.cfi_offset 7, -8
 22442              		.cfi_offset 6, -12
 22443              		.cfi_offset 5, -16
 22444              		.cfi_offset 4, -20
 22445              		.cfi_offset 3, -24
 22446 0004 0F46     		mov	r7, r1
 22447              		.loc 1 487 0
 22448 0006 01F12803 		add	r3, r1, #40
 22449 000a 9BB2     		uxth	r3, r3
 22450              	.LVL183:
 22451              		.loc 1 488 0
 22452 000c 4FEA1322 		lsr	r2, r3, #8
 22453 0010 0274     		strb	r2, [r0, #16]
 22454              		.loc 1 489 0
 22455 0012 4374     		strb	r3, [r0, #17]
 22456              		.loc 1 490 0
 22457 0014 FFF7FEFF 		bl	fill_ip_hdr_checksum
 22458              	.LVL184:
 22459              		.loc 1 492 0
 22460 0018 2546     		mov	r5, r4
 22461 001a 4FF00003 		mov	r3, #0
 22462 001e 05F8323F 		strb	r3, [r5, #50]!
 22463              		.loc 1 493 0
 22464 0022 2646     		mov	r6, r4
 22465 0024 06F8333F 		strb	r3, [r6, #51]!
 22466              		.loc 1 495 0
 22467 0028 07F11C01 		add	r1, r7, #28
 22468 002c 04F11A00 		add	r0, r4, #26
 22469 0030 89B2     		uxth	r1, r1
 22470 0032 4FF00202 		mov	r2, #2
 22471 0036 FFF7FEFF 		bl	checksum
 22472              		.loc 1 496 0
 22473 003a 4FEA1023 		lsr	r3, r0, #8
 22474 003e 2B70     		strb	r3, [r5, #0]
 22475              		.loc 1 497 0
 22476 0040 3070     		strb	r0, [r6, #0]
 22477              		.loc 1 498 0
 22478 0042 07F13600 		add	r0, r7, #54
 22479 0046 80B2     		uxth	r0, r0
 22480 0048 2146     		mov	r1, r4
 22481 004a FFF7FEFF 		bl	enc28j60PacketSend
 22482              		.loc 1 499 0
 22483 004e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 22484              		.cfi_endproc
 22485              	.LFE48:
 22487              		.section	.text.make_tcp_ack_from_any,"ax",%progbits
 22488              		.align	2
 22489              		.global	make_tcp_ack_from_any
 22490              		.thumb
 22491              		.thumb_func
 22493              	make_tcp_ack_from_any:
 22494              	.LFB47:
 22495              		.loc 1 444 0
 22496              		.cfi_startproc
 22497              		@ args = 0, pretend = 0, frame = 0
 22498              		@ frame_needed = 0, uses_anonymous_args = 0
 22499              	.LVL185:
 22500 0000 70B5     		push	{r4, r5, r6, lr}
 22501              	.LCFI28:
 22502              		.cfi_def_cfa_offset 16
 22503 0002 0446     		mov	r4, r0
 22504              		.cfi_offset 14, -4
 22505              		.cfi_offset 6, -8
 22506              		.cfi_offset 5, -12
 22507              		.cfi_offset 4, -16
 22508 0004 0D46     		mov	r5, r1
 22509 0006 1646     		mov	r6, r2
 22510              		.loc 1 446 0
 22511 0008 FFF7FEFF 		bl	make_eth
 22512              	.LVL186:
 22513              		.loc 1 448 0
 22514 000c 46F01003 		orr	r3, r6, #16
 22515 0010 84F82F30 		strb	r3, [r4, #47]
 22516              		.loc 1 449 0
 22517 0014 042E     		cmp	r6, #4
 22518 0016 06D1     		bne	.L169
 22519              		.loc 1 450 0
 22520 0018 2046     		mov	r0, r4
 22521 001a A9B2     		uxth	r1, r5
 22522 001c 4FF00102 		mov	r2, #1
 22523 0020 FFF7FEFF 		bl	make_tcphead
 22524 0024 08E0     		b	.L170
 22525              	.L169:
 22526              		.loc 1 452 0
 22527 0026 002D     		cmp	r5, #0
 22528 0028 08BF     		it	eq
 22529 002a 0125     		moveq	r5, #1
 22530              	.LVL187:
 22531              		.loc 1 457 0
 22532 002c 2046     		mov	r0, r4
 22533 002e A9B2     		uxth	r1, r5
 22534 0030 4FF00102 		mov	r2, #1
 22535 0034 FFF7FEFF 		bl	make_tcphead
 22536              	.L170:
 22537              		.loc 1 462 0
 22538 0038 4FF00005 		mov	r5, #0
 22539              	.LVL188:
 22540 003c 2574     		strb	r5, [r4, #16]
 22541              		.loc 1 463 0
 22542 003e 4FF02803 		mov	r3, #40
 22543 0042 6374     		strb	r3, [r4, #17]
 22544              		.loc 1 464 0
 22545 0044 2046     		mov	r0, r4
 22546 0046 FFF7FEFF 		bl	make_ip
 22547              		.loc 1 467 0
 22548 004a 4FF00403 		mov	r3, #4
 22549 004e 84F83030 		strb	r3, [r4, #48]
 22550              		.loc 1 468 0
 22551 0052 84F83150 		strb	r5, [r4, #49]
 22552              		.loc 1 470 0
 22553 0056 04F11A00 		add	r0, r4, #26
 22554 005a 4FF01C01 		mov	r1, #28
 22555 005e 4FF00202 		mov	r2, #2
 22556 0062 FFF7FEFF 		bl	checksum
 22557              		.loc 1 471 0
 22558 0066 4FEA1023 		lsr	r3, r0, #8
 22559 006a 84F83230 		strb	r3, [r4, #50]
 22560              		.loc 1 472 0
 22561 006e 84F83300 		strb	r0, [r4, #51]
 22562              		.loc 1 473 0
 22563 0072 4FF03600 		mov	r0, #54
 22564 0076 2146     		mov	r1, r4
 22565 0078 FFF7FEFF 		bl	enc28j60PacketSend
 22566              		.loc 1 474 0
 22567 007c 70BD     		pop	{r4, r5, r6, pc}
 22568              		.cfi_endproc
 22569              	.LFE47:
 22571 007e 00BF     		.section	.text.www_server_reply,"ax",%progbits
 22572              		.align	2
 22573              		.global	www_server_reply
 22574              		.thumb
 22575              		.thumb_func
 22577              	www_server_reply:
 22578              	.LFB54:
 22579              		.loc 1 630 0
 22580              		.cfi_startproc
 22581              		@ args = 0, pretend = 0, frame = 0
 22582              		@ frame_needed = 0, uses_anonymous_args = 0
 22583              	.LVL189:
 22584 0000 38B5     		push	{r3, r4, r5, lr}
 22585              	.LCFI29:
 22586              		.cfi_def_cfa_offset 16
 22587 0002 0446     		mov	r4, r0
 22588              		.cfi_offset 14, -4
 22589              		.cfi_offset 5, -8
 22590              		.cfi_offset 4, -12
 22591              		.cfi_offset 3, -16
 22592 0004 0D46     		mov	r5, r1
 22593              		.loc 1 631 0
 22594 0006 40F20003 		movw	r3, #:lower16:.LANCHOR30
 22595 000a C0F20003 		movt	r3, #:upper16:.LANCHOR30
 22596 000e B3F90010 		ldrsh	r1, [r3, #0]
 22597              	.LVL190:
 22598 0012 4FF00002 		mov	r2, #0
 22599 0016 FFF7FEFF 		bl	make_tcp_ack_from_any
 22600              	.LVL191:
 22601              		.loc 1 636 0
 22602 001a 4FF01903 		mov	r3, #25
 22603 001e 84F82F30 		strb	r3, [r4, #47]
 22604              		.loc 1 637 0
 22605 0022 2046     		mov	r0, r4
 22606 0024 2946     		mov	r1, r5
 22607 0026 FFF7FEFF 		bl	make_tcp_ack_with_data_noflags
 22608              		.loc 1 638 0
 22609 002a 38BD     		pop	{r3, r4, r5, pc}
 22610              		.cfi_endproc
 22611              	.LFE54:
 22613              		.section	.text.make_echo_reply_from_request,"ax",%progbits
 22614              		.align	2
 22615              		.global	make_echo_reply_from_request
 22616              		.thumb
 22617              		.thumb_func
 22619              	make_echo_reply_from_request:
 22620              	.LFB42:
 22621              		.loc 1 374 0
 22622              		.cfi_startproc
 22623              		@ args = 0, pretend = 0, frame = 0
 22624              		@ frame_needed = 0, uses_anonymous_args = 0
 22625              	.LVL192:
 22626 0000 38B5     		push	{r3, r4, r5, lr}
 22627              	.LCFI30:
 22628              		.cfi_def_cfa_offset 16
 22629 0002 0446     		mov	r4, r0
 22630              		.cfi_offset 14, -4
 22631              		.cfi_offset 5, -8
 22632              		.cfi_offset 4, -12
 22633              		.cfi_offset 3, -16
 22634 0004 0D46     		mov	r5, r1
 22635              		.loc 1 375 0
 22636 0006 FFF7FEFF 		bl	make_eth
 22637              	.LVL193:
 22638              		.loc 1 376 0
 22639 000a 2046     		mov	r0, r4
 22640 000c FFF7FEFF 		bl	make_ip
 22641              		.loc 1 377 0
 22642 0010 4FF00003 		mov	r3, #0
 22643 0014 84F82230 		strb	r3, [r4, #34]
 22644              		.loc 1 380 0
 22645 0018 2346     		mov	r3, r4
 22646 001a 13F8242F 		ldrb	r2, [r3, #36]!	@ zero_extendqisi2
 22647 001e F72A     		cmp	r2, #247
 22648              		.loc 1 381 0
 22649 0020 81BF     		itttt	hi
 22650 0022 2246     		movhi	r2, r4
 22651 0024 12F8251F 		ldrbhi	r1, [r2, #37]!	@ zero_extendqisi2
 22652 0028 0131     		addhi	r1, r1, #1
 22653 002a 1170     		strbhi	r1, [r2, #0]
 22654              		.loc 1 383 0
 22655 002c 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 22656 002e 02F10802 		add	r2, r2, #8
 22657 0032 1A70     		strb	r2, [r3, #0]
 22658              		.loc 1 385 0
 22659 0034 2846     		mov	r0, r5
 22660 0036 2146     		mov	r1, r4
 22661 0038 FFF7FEFF 		bl	enc28j60PacketSend
 22662              		.loc 1 386 0
 22663 003c 38BD     		pop	{r3, r4, r5, pc}
 22664              		.cfi_endproc
 22665              	.LFE42:
 22667 003e 00BF     		.section	.text.make_arp_answer_from_request,"ax",%progbits
 22668              		.align	2
 22669              		.global	make_arp_answer_from_request
 22670              		.thumb
 22671              		.thumb_func
 22673              	make_arp_answer_from_request:
 22674              	.LFB41:
 22675              		.loc 1 351 0
 22676              		.cfi_startproc
 22677              		@ args = 0, pretend = 0, frame = 0
 22678              		@ frame_needed = 0, uses_anonymous_args = 0
 22679              	.LVL194:
 22680 0000 10B5     		push	{r4, lr}
 22681              	.LCFI31:
 22682              		.cfi_def_cfa_offset 8
 22683 0002 0446     		mov	r4, r0
 22684              		.cfi_offset 14, -4
 22685              		.cfi_offset 4, -8
 22686              		.loc 1 354 0
 22687 0004 FFF7FEFF 		bl	make_eth
 22688              	.LVL195:
 22689              		.loc 1 355 0
 22690 0008 4FF00002 		mov	r2, #0
 22691 000c 2275     		strb	r2, [r4, #20]
 22692              		.loc 1 356 0
 22693 000e 4FF00203 		mov	r3, #2
 22694 0012 6375     		strb	r3, [r4, #21]
 22695 0014 2146     		mov	r1, r4
 22696 0016 2346     		mov	r3, r4
 22697              		.loc 1 360 0
 22698 0018 40F20000 		movw	r0, #:lower16:.LANCHOR2
 22699 001c C0F20000 		movt	r0, #:upper16:.LANCHOR2
 22700              	.L179:
 22701              		.loc 1 359 0
 22702 0020 93F816C0 		ldrb	ip, [r3, #22]	@ zero_extendqisi2
 22703 0024 83F820C0 		strb	ip, [r3, #32]
 22704              		.loc 1 360 0
 22705 0028 10F802C0 		ldrb	ip, [r0, r2]	@ zero_extendqisi2
 22706 002c 83F816C0 		strb	ip, [r3, #22]
 22707 0030 02F10102 		add	r2, r2, #1
 22708 0034 03F10103 		add	r3, r3, #1
 22709              		.loc 1 358 0
 22710 0038 062A     		cmp	r2, #6
 22711 003a F1D1     		bne	.L179
 22712 003c 4FF00003 		mov	r3, #0
 22713              		.loc 1 366 0
 22714 0040 40F20002 		movw	r2, #:lower16:.LANCHOR0
 22715 0044 C0F20002 		movt	r2, #:upper16:.LANCHOR0
 22716              	.L180:
 22717              		.loc 1 365 0
 22718 0048 087F     		ldrb	r0, [r1, #28]	@ zero_extendqisi2
 22719 004a 81F82600 		strb	r0, [r1, #38]
 22720              		.loc 1 366 0
 22721 004e D05C     		ldrb	r0, [r2, r3]	@ zero_extendqisi2
 22722 0050 0877     		strb	r0, [r1, #28]
 22723 0052 03F10103 		add	r3, r3, #1
 22724 0056 01F10101 		add	r1, r1, #1
 22725              		.loc 1 364 0
 22726 005a 042B     		cmp	r3, #4
 22727 005c F4D1     		bne	.L180
 22728              		.loc 1 370 0
 22729 005e 4FF02A00 		mov	r0, #42
 22730 0062 2146     		mov	r1, r4
 22731 0064 FFF7FEFF 		bl	enc28j60PacketSend
 22732              		.loc 1 371 0
 22733 0068 10BD     		pop	{r4, pc}
 22734              		.cfi_endproc
 22735              	.LFE41:
 22737 006a 00BF     		.section	.text.packetloop_arp_icmp_tcp,"ax",%progbits
 22738              		.align	2
 22739              		.global	packetloop_arp_icmp_tcp
 22740              		.thumb
 22741              		.thumb_func
 22743              	packetloop_arp_icmp_tcp:
 22744              	.LFB71:
1289:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
1290:../SERVER/tcpip/ip_arp_udp_tcp.c **** #ifdef PING_client
1291:../SERVER/tcpip/ip_arp_udp_tcp.c **** // loop over this to check if we get a ping reply:
1292:../SERVER/tcpip/ip_arp_udp_tcp.c **** uint8_t packetloop_icmp_checkreply(uint8_t *buf,uint8_t *ip_monitoredhost)
1293:../SERVER/tcpip/ip_arp_udp_tcp.c **** {
1294:../SERVER/tcpip/ip_arp_udp_tcp.c ****         if(buf[IP_PROTO_P]==IP_PROTO_ICMP_V && buf[ICMP_TYPE_P]==ICMP_TYPE_ECHOREPLY_V){
1295:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 if (buf[ICMP_DATA_P]== PINGPATTERN){
1296:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         if (check_ip_message_is_from(buf,ip_monitoredhost)){
1297:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 return(1);
1298:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 // ping reply is from monitored host and ping was from us
1299:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         }
1300:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 }
1301:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
1302:../SERVER/tcpip/ip_arp_udp_tcp.c ****         return(0);
1303:../SERVER/tcpip/ip_arp_udp_tcp.c **** }
1304:../SERVER/tcpip/ip_arp_udp_tcp.c **** #endif // PING_client
1305:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
1306:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
1307:../SERVER/tcpip/ip_arp_udp_tcp.c **** // return 0 to just continue in the packet loop and return the position 
1308:../SERVER/tcpip/ip_arp_udp_tcp.c **** // of the tcp data if there is tcp data part
1309:../SERVER/tcpip/ip_arp_udp_tcp.c **** uint16_t packetloop_arp_icmp_tcp(uint8_t *buf,uint16_t plen)
1310:../SERVER/tcpip/ip_arp_udp_tcp.c **** {
 22745              		.loc 1 1310 0
 22746              		.cfi_startproc
 22747              		@ args = 0, pretend = 0, frame = 0
 22748              		@ frame_needed = 0, uses_anonymous_args = 0
 22749              	.LVL196:
 22750 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 22751              	.LCFI32:
 22752              		.cfi_def_cfa_offset 24
 22753 0004 0446     		mov	r4, r0
 22754              		.cfi_offset 14, -4
 22755              		.cfi_offset 8, -8
 22756              		.cfi_offset 7, -12
 22757              		.cfi_offset 6, -16
 22758              		.cfi_offset 5, -20
 22759              		.cfi_offset 4, -24
1311:../SERVER/tcpip/ip_arp_udp_tcp.c ****         uint16_t len;
1312:../SERVER/tcpip/ip_arp_udp_tcp.c **** #if defined (TCP_client)
1313:../SERVER/tcpip/ip_arp_udp_tcp.c ****         uint8_t send_fin=0;
1314:../SERVER/tcpip/ip_arp_udp_tcp.c ****         uint16_t tcpstart;
1315:../SERVER/tcpip/ip_arp_udp_tcp.c ****         uint16_t save_len;
1316:../SERVER/tcpip/ip_arp_udp_tcp.c **** #endif
1317:../SERVER/tcpip/ip_arp_udp_tcp.c **** #ifdef ARP_MAC_resolver_client
1318:../SERVER/tcpip/ip_arp_udp_tcp.c ****         //plen will be unequal to zero if there is a valid 
1319:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // packet (without crc error):
1320:../SERVER/tcpip/ip_arp_udp_tcp.c ****         if(plen==0){
 22760              		.loc 1 1320 0
 22761 0006 0D46     		mov	r5, r1
 22762 0008 0029     		cmp	r1, #0
 22763 000a 72D1     		bne	.L185
 22764              	.LVL197:
1321:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 if (arpip_state == (WGW_ACCEPT_ARP_REPLY|WGW_INITIAL_ARP) && arp_delaycnt==0 ){
 22765              		.loc 1 1321 0
 22766 000c 40F20003 		movw	r3, #:lower16:.LANCHOR7
 22767 0010 C0F20003 		movt	r3, #:upper16:.LANCHOR7
 22768 0014 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 22769 0016 092B     		cmp	r3, #9
 22770 0018 10D1     		bne	.L186
 22771 001a 40F20003 		movw	r3, #:lower16:.LANCHOR31
 22772 001e C0F20003 		movt	r3, #:upper16:.LANCHOR31
 22773 0022 B3F90030 		ldrsh	r3, [r3, #0]
 22774 0026 4BB9     		cbnz	r3, .L186
1322:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         // arp_delaycnt has wrapped no arp reply yet
1323:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         if (enc28j60linkup()) client_arp_whohas(buf,arpip);
 22775              		.loc 1 1323 0
 22776 0028 FFF7FEFF 		bl	enc28j60linkup
 22777              	.LVL198:
 22778 002c 30B1     		cbz	r0, .L186
 22779 002e 2046     		mov	r0, r4
 22780 0030 40F20001 		movw	r1, #:lower16:.LANCHOR9
 22781 0034 C0F20001 		movt	r1, #:upper16:.LANCHOR9
 22782 0038 FFF7FEFF 		bl	client_arp_whohas
 22783              	.LVL199:
 22784              	.L186:
1324:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 }
1325:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 if (arpip_state == WGW_INITIAL_ARP && enc28j60linkup()){
 22785              		.loc 1 1325 0
 22786 003c 40F20003 		movw	r3, #:lower16:.LANCHOR7
 22787 0040 C0F20003 		movt	r3, #:upper16:.LANCHOR7
 22788 0044 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 22789 0046 012B     		cmp	r3, #1
 22790 0048 18D1     		bne	.L187
 22791 004a FFF7FEFF 		bl	enc28j60linkup
 22792 004e A8B1     		cbz	r0, .L187
1326:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         client_arp_whohas(buf,arpip);
 22793              		.loc 1 1326 0
 22794 0050 2046     		mov	r0, r4
 22795 0052 40F20001 		movw	r1, #:lower16:.LANCHOR9
 22796 0056 C0F20001 		movt	r1, #:upper16:.LANCHOR9
 22797 005a FFF7FEFF 		bl	client_arp_whohas
1327:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         arpip_state|=WGW_ACCEPT_ARP_REPLY; // WGW_INITIAL_ARP and WGW_ACCEPT_ARP_RE
 22798              		.loc 1 1327 0
 22799 005e 40F20003 		movw	r3, #:lower16:.LANCHOR7
 22800 0062 C0F20003 		movt	r3, #:upper16:.LANCHOR7
 22801 0066 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 22802 0068 42F00802 		orr	r2, r2, #8
 22803 006c 1A70     		strb	r2, [r3, #0]
1328:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         arp_delaycnt=0; // this is like a timer, not so precise but good enough, it
 22804              		.loc 1 1328 0
 22805 006e 40F20003 		movw	r3, #:lower16:.LANCHOR31
 22806 0072 C0F20003 		movt	r3, #:upper16:.LANCHOR31
 22807 0076 4FF00002 		mov	r2, #0	@ movhi
 22808 007a 1A80     		strh	r2, [r3, #0]	@ movhi
 22809              	.LVL200:
 22810              	.L187:
1329:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 }
1330:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 arp_delaycnt++;
 22811              		.loc 1 1330 0
 22812 007c 40F20003 		movw	r3, #:lower16:.LANCHOR31
 22813 0080 C0F20003 		movt	r3, #:upper16:.LANCHOR31
 22814 0084 1A88     		ldrh	r2, [r3, #0]
 22815 0086 02F10102 		add	r2, r2, #1
 22816 008a 1A80     		strh	r2, [r3, #0]	@ movhi
1331:../SERVER/tcpip/ip_arp_udp_tcp.c **** #if defined (TCP_client)
1332:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 if (tcp_client_state==1 && enc28j60linkup()){ // send a syn
 22817              		.loc 1 1332 0
 22818 008c 40F20003 		movw	r3, #:lower16:.LANCHOR15
 22819 0090 C0F20003 		movt	r3, #:upper16:.LANCHOR15
 22820 0094 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 22821 0096 012B     		cmp	r3, #1
 22822 0098 40F0D181 		bne	.L188
 22823 009c FFF7FEFF 		bl	enc28j60linkup
 22824 00a0 0028     		cmp	r0, #0
 22825 00a2 00F0CC81 		beq	.L188
1333:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         tcp_client_state=2;
 22826              		.loc 1 1333 0
 22827 00a6 40F20003 		movw	r3, #:lower16:.LANCHOR15
 22828 00aa C0F20003 		movt	r3, #:upper16:.LANCHOR15
 22829 00ae 4FF00202 		mov	r2, #2
 22830 00b2 1A70     		strb	r2, [r3, #0]
1334:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         tcpclient_src_port_l++; // allocate a new port
 22831              		.loc 1 1334 0
 22832 00b4 40F20003 		movw	r3, #:lower16:.LANCHOR32
 22833 00b8 C0F20003 		movt	r3, #:upper16:.LANCHOR32
 22834 00bc 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 22835 00be 02F10102 		add	r2, r2, #1
 22836 00c2 D2B2     		uxtb	r2, r2
 22837 00c4 1A70     		strb	r2, [r3, #0]
1335:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         // we encode our 3 bit fd into the src port this
1336:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         // way we get it back in every message that comes
1337:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         // from the server:
1338:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         tcp_client_syn(buf,((tcp_fd<<5) | (0x1f & tcpclient_src_port_l)),tcp_client
 22838              		.loc 1 1338 0
 22839 00c6 40F20003 		movw	r3, #:lower16:.LANCHOR16
 22840 00ca C0F20003 		movt	r3, #:upper16:.LANCHOR16
 22841 00ce 1978     		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 22842 00d0 02F01F02 		and	r2, r2, #31
 22843 00d4 42EA4111 		orr	r1, r2, r1, lsl #5
 22844 00d8 40F20003 		movw	r3, #:lower16:.LANCHOR14
 22845 00dc C0F20003 		movt	r3, #:upper16:.LANCHOR14
 22846 00e0 2046     		mov	r0, r4
 22847 00e2 C9B2     		uxtb	r1, r1
 22848 00e4 1A88     		ldrh	r2, [r3, #0]
 22849 00e6 FFF7FEFF 		bl	tcp_client_syn
 22850 00ea 4FF00000 		mov	r0, #0
 22851              	.LVL201:
 22852 00ee BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 22853              	.LVL202:
 22854              	.L185:
1339:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 }
1340:../SERVER/tcpip/ip_arp_udp_tcp.c **** #endif
1341:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 return(0);
1342:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
1343:../SERVER/tcpip/ip_arp_udp_tcp.c **** #endif // ARP_MAC_resolver_client
1344:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // arp is broadcast if unknown but a host may also
1345:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // verify the mac address by sending it to 
1346:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // a unicast address.
1347:../SERVER/tcpip/ip_arp_udp_tcp.c ****         if(eth_type_is_arp_and_my_ip(buf,plen)){
 22855              		.loc 1 1347 0
 22856 00f2 FFF7FEFF 		bl	eth_type_is_arp_and_my_ip
 22857              	.LVL203:
 22858 00f6 0028     		cmp	r0, #0
 22859 00f8 3DD0     		beq	.L190
1348:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 if (buf[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCODE_REQ_L_V){
 22860              		.loc 1 1348 0
 22861 00fa 2546     		mov	r5, r4
 22862              	.LVL204:
 22863 00fc 15F8153F 		ldrb	r3, [r5, #21]!	@ zero_extendqisi2
 22864 0100 012B     		cmp	r3, #1
 22865 0102 02D1     		bne	.L191
1349:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         // is it an arp request 
1350:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         make_arp_answer_from_request(buf);
 22866              		.loc 1 1350 0
 22867 0104 2046     		mov	r0, r4
 22868 0106 FFF7FEFF 		bl	make_arp_answer_from_request
 22869              	.L191:
1351:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 }
1352:../SERVER/tcpip/ip_arp_udp_tcp.c **** #ifdef ARP_MAC_resolver_client
1353:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 if ((arpip_state & WGW_ACCEPT_ARP_REPLY) && (buf[ETH_ARP_OPCODE_L_P]==ETH_ARP_OPCOD
 22870              		.loc 1 1353 0
 22871 010a 40F20003 		movw	r3, #:lower16:.LANCHOR7
 22872 010e C0F20003 		movt	r3, #:upper16:.LANCHOR7
 22873 0112 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 22874 0114 13F0080F 		tst	r3, #8
 22875 0118 00F09181 		beq	.L188
 22876 011c 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 22877 011e 022B     		cmp	r3, #2
 22878 0120 40F08D81 		bne	.L188
1354:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         // is it an arp reply 
1355:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         if (memcmp(&buf[ETH_ARP_SRC_IP_P],arpip,4)!=0) return(0); // not an arp rep
 22879              		.loc 1 1355 0
 22880 0124 04F11C00 		add	r0, r4, #28
 22881 0128 40F20001 		movw	r1, #:lower16:.LANCHOR9
 22882 012c C0F20001 		movt	r1, #:upper16:.LANCHOR9
 22883 0130 4FF00402 		mov	r2, #4
 22884 0134 FFF7FEFF 		bl	memcmp
 22885 0138 0028     		cmp	r0, #0
 22886 013a 40F08081 		bne	.L188
1356:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         (*client_arp_result_callback)(arpip,arp_reference_number,buf+ETH_ARP_SRC_MA
 22887              		.loc 1 1356 0
 22888 013e 40F20003 		movw	r3, #:lower16:client_arp_result_callback
 22889 0142 C0F20003 		movt	r3, #:upper16:client_arp_result_callback
 22890 0146 40F20002 		movw	r2, #:lower16:.LANCHOR8
 22891 014a C0F20002 		movt	r2, #:upper16:.LANCHOR8
 22892 014e 1B68     		ldr	r3, [r3, #0]
 22893 0150 40F20000 		movw	r0, #:lower16:.LANCHOR9
 22894 0154 C0F20000 		movt	r0, #:upper16:.LANCHOR9
 22895 0158 1178     		ldrb	r1, [r2, #0]	@ zero_extendqisi2
 22896 015a 04F11602 		add	r2, r4, #22
 22897 015e 9847     		blx	r3
1357:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         arpip_state=WGW_HAVE_MAC;
 22898              		.loc 1 1357 0
 22899 0160 40F20003 		movw	r3, #:lower16:.LANCHOR7
 22900 0164 C0F20003 		movt	r3, #:upper16:.LANCHOR7
 22901 0168 4FF00202 		mov	r2, #2
 22902 016c 1A70     		strb	r2, [r3, #0]
 22903 016e 4FF00000 		mov	r0, #0
 22904              	.LVL205:
 22905 0172 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 22906              	.LVL206:
 22907              	.L190:
1358:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 }
1359:../SERVER/tcpip/ip_arp_udp_tcp.c **** #endif // ARP_MAC_resolver_client
1360:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 return(0);
1361:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
1362:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
1363:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // check if ip packets are for us:
1364:../SERVER/tcpip/ip_arp_udp_tcp.c ****         if(eth_type_is_ip_and_my_ip(buf,plen)==0){
 22908              		.loc 1 1364 0
 22909 0176 2046     		mov	r0, r4
 22910 0178 2946     		mov	r1, r5
 22911 017a FFF7FEFF 		bl	eth_type_is_ip_and_my_ip
 22912 017e 0028     		cmp	r0, #0
 22913 0180 00F05D81 		beq	.L188
1365:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 return(0);
1366:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
1367:../SERVER/tcpip/ip_arp_udp_tcp.c ****         if(buf[IP_PROTO_P]==IP_PROTO_ICMP_V && buf[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V){
 22914              		.loc 1 1367 0
 22915 0184 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 22916 0186 012B     		cmp	r3, #1
 22917 0188 14D1     		bne	.L192
 22918 018a 94F82220 		ldrb	r2, [r4, #34]	@ zero_extendqisi2
 22919 018e 082A     		cmp	r2, #8
 22920 0190 10D1     		bne	.L192
1368:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 if (icmp_callback){
 22921              		.loc 1 1368 0
 22922 0192 40F20003 		movw	r3, #:lower16:.LANCHOR17
 22923 0196 C0F20003 		movt	r3, #:upper16:.LANCHOR17
 22924 019a 1B68     		ldr	r3, [r3, #0]
 22925 019c 13B1     		cbz	r3, .L193
1369:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         (*icmp_callback)(&(buf[IP_SRC_P]));
 22926              		.loc 1 1369 0
 22927 019e 04F11A00 		add	r0, r4, #26
 22928 01a2 9847     		blx	r3
 22929              	.L193:
1370:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 }
1371:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 // a ping packet, let's send pong
1372:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 make_echo_reply_from_request(buf,plen);
 22930              		.loc 1 1372 0
 22931 01a4 2046     		mov	r0, r4
 22932 01a6 2946     		mov	r1, r5
 22933 01a8 FFF7FEFF 		bl	make_echo_reply_from_request
 22934 01ac 4FF00000 		mov	r0, #0
 22935              	.LVL207:
1373:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 return(0);
 22936              		.loc 1 1373 0
 22937 01b0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 22938              	.LVL208:
 22939              	.L192:
1374:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
1375:../SERVER/tcpip/ip_arp_udp_tcp.c ****         if (plen<54 && buf[IP_PROTO_P]!=IP_PROTO_TCP_V ){
 22940              		.loc 1 1375 0
 22941 01b4 352D     		cmp	r5, #53
 22942 01b6 02D8     		bhi	.L194
 22943 01b8 062B     		cmp	r3, #6
 22944 01ba 40F04081 		bne	.L188
 22945              	.L194:
1376:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 // smaller than the smallest TCP packet and not tcp port
1377:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 return(0);
1378:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
1379:../SERVER/tcpip/ip_arp_udp_tcp.c **** #if defined (TCP_client)
1380:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // a message for the tcp client, tcp_client_state is zero if client was never used
1381:../SERVER/tcpip/ip_arp_udp_tcp.c ****         if ( buf[TCP_DST_PORT_H_P]==TCPCLIENT_SRC_PORT_H){
 22946              		.loc 1 1381 0
 22947 01be 94F82420 		ldrb	r2, [r4, #36]	@ zero_extendqisi2
 22948 01c2 0B2A     		cmp	r2, #11
 22949 01c4 40F0F580 		bne	.L195
1382:../SERVER/tcpip/ip_arp_udp_tcp.c **** #if defined (WWW_client)
1383:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 // workaround to pass pointer to www_client_internal..
1384:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 bufptr=buf; 
 22950              		.loc 1 1384 0
 22951 01c8 40F20003 		movw	r3, #:lower16:.LANCHOR26
 22952 01cc C0F20003 		movt	r3, #:upper16:.LANCHOR26
 22953 01d0 1C60     		str	r4, [r3, #0]
1385:../SERVER/tcpip/ip_arp_udp_tcp.c **** #endif // WWW_client
1386:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 if (check_ip_message_is_from(buf,tcp_otherside_ip)==0){
 22954              		.loc 1 1386 0
 22955 01d2 2046     		mov	r0, r4
 22956 01d4 40F20001 		movw	r1, #:lower16:.LANCHOR12
 22957 01d8 C0F20001 		movt	r1, #:upper16:.LANCHOR12
 22958 01dc FFF7FEFF 		bl	check_ip_message_is_from
 22959 01e0 0028     		cmp	r0, #0
 22960 01e2 00F02C81 		beq	.L188
1387:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         return(0);
1388:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 }
1389:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 // if we get a reset:
1390:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 if (buf[TCP_FLAGS_P] & TCP_FLAGS_RST_V){
 22961              		.loc 1 1390 0
 22962 01e6 2646     		mov	r6, r4
 22963 01e8 16F82F8F 		ldrb	r8, [r6, #47]!	@ zero_extendqisi2
 22964 01ec 18F0040F 		tst	r8, #4
 22965 01f0 1AD0     		beq	.L196
1391:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         if (client_tcp_result_callback){
 22966              		.loc 1 1391 0
 22967 01f2 40F20003 		movw	r3, #:lower16:.LANCHOR10
 22968 01f6 C0F20003 		movt	r3, #:upper16:.LANCHOR10
 22969 01fa 1D68     		ldr	r5, [r3, #0]
 22970              	.LVL209:
 22971 01fc 4DB1     		cbz	r5, .L197
1392:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 // parameters in client_tcp_result_callback: fd, status, buf_start,
1393:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 (*client_tcp_result_callback)((buf[TCP_DST_PORT_L_P]>>5)&0x7,3,0,0)
 22972              		.loc 1 1393 0
 22973 01fe 94F82500 		ldrb	r0, [r4, #37]	@ zero_extendqisi2
 22974 0202 4FEA5010 		lsr	r0, r0, #5
 22975 0206 4FF00301 		mov	r1, #3
 22976 020a 4FF00002 		mov	r2, #0
 22977 020e 1346     		mov	r3, r2
 22978 0210 A847     		blx	r5
 22979              	.L197:
1394:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         }
1395:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         tcp_client_state=5;
 22980              		.loc 1 1395 0
 22981 0212 40F20003 		movw	r3, #:lower16:.LANCHOR15
 22982 0216 C0F20003 		movt	r3, #:upper16:.LANCHOR15
 22983 021a 4FF00502 		mov	r2, #5
 22984 021e 1A70     		strb	r2, [r3, #0]
 22985 0220 4FF00000 		mov	r0, #0
 22986              	.LVL210:
1396:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         return(0);
 22987              		.loc 1 1396 0
 22988 0224 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 22989              	.LVL211:
 22990              	.L196:
1397:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 }
1398:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 len=get_tcp_data_len(buf);
 22991              		.loc 1 1398 0
 22992 0228 2046     		mov	r0, r4
 22993 022a FFF7FEFF 		bl	get_tcp_data_len
 22994 022e 0746     		mov	r7, r0
 22995              	.LVL212:
1399:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 if (tcp_client_state==2){
 22996              		.loc 1 1399 0
 22997 0230 40F20003 		movw	r3, #:lower16:.LANCHOR15
 22998 0234 C0F20003 		movt	r3, #:upper16:.LANCHOR15
 22999 0238 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 23000 023a 022B     		cmp	r3, #2
 23001 023c 42D1     		bne	.L198
1400:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         if ((buf[TCP_FLAGS_P] & TCP_FLAGS_SYN_V) && (buf[TCP_FLAGS_P] &TCP_FLAGS_AC
 23002              		.loc 1 1400 0
 23003 023e 08F01208 		and	r8, r8, #18
 23004 0242 B8F1120F 		cmp	r8, #18
 23005 0246 25D1     		bne	.L199
1401:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 // synack, answer with ack
1402:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 make_tcp_ack_from_any(buf,0,0);
 23006              		.loc 1 1402 0
 23007 0248 2046     		mov	r0, r4
 23008 024a 4FF00001 		mov	r1, #0
 23009 024e 0A46     		mov	r2, r1
 23010 0250 FFF7FEFF 		bl	make_tcp_ack_from_any
1403:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 buf[TCP_FLAGS_P]=TCP_FLAGS_ACK_V|TCP_FLAGS_PUSH_V;
 23011              		.loc 1 1403 0
 23012 0254 4FF01803 		mov	r3, #24
 23013 0258 3370     		strb	r3, [r6, #0]
1404:../SERVER/tcpip/ip_arp_udp_tcp.c **** 
1405:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 // Make a tcp message with data. When calling this function we must
1406:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 // still have a valid tcp-ack in the buffer. In other words
1407:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 // you have just called make_tcp_ack_from_any(buf,0).
1408:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 if (client_tcp_datafill_callback){
 23014              		.loc 1 1408 0
 23015 025a 40F20003 		movw	r3, #:lower16:.LANCHOR11
 23016 025e C0F20003 		movt	r3, #:upper16:.LANCHOR11
 23017 0262 1B68     		ldr	r3, [r3, #0]
 23018 0264 13B9     		cbnz	r3, .L200
 23019 0266 4FF00001 		mov	r1, #0
 23020              	.LVL213:
 23021 026a 05E0     		b	.L201
 23022              	.LVL214:
 23023              	.L200:
1409:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                         // in this case it is src port because the above 
1410:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                         // make_tcp_ack_from_any swaps the dst and src port:
1411:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                         len=(*client_tcp_datafill_callback)((buf[TCP_SRC_PORT_L_P]>
 23024              		.loc 1 1411 0
 23025 026c 94F82300 		ldrb	r0, [r4, #35]	@ zero_extendqisi2
 23026 0270 4FEA5010 		lsr	r0, r0, #5
 23027 0274 9847     		blx	r3
 23028 0276 0146     		mov	r1, r0
 23029              	.LVL215:
 23030              	.L201:
1412:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 }else{
1413:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                         // this is just to prevent a crash
1414:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                         len=0;
1415:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 }
1416:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 tcp_client_state=3;
 23031              		.loc 1 1416 0
 23032 0278 40F20003 		movw	r3, #:lower16:.LANCHOR15
 23033 027c C0F20003 		movt	r3, #:upper16:.LANCHOR15
 23034 0280 4FF00302 		mov	r2, #3
 23035 0284 1A70     		strb	r2, [r3, #0]
1417:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 make_tcp_ack_with_data_noflags(buf,len);
 23036              		.loc 1 1417 0
 23037 0286 2046     		mov	r0, r4
 23038 0288 FFF7FEFF 		bl	make_tcp_ack_with_data_noflags
 23039              	.LVL216:
 23040 028c 4FF00000 		mov	r0, #0
 23041              	.LVL217:
1418:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 return(0);
 23042              		.loc 1 1418 0
 23043 0290 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 23044              	.LVL218:
 23045              	.L199:
1419:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         }else{
1420:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 // reset only if we have sent a syn and don't get syn-ack back.
1421:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 // If we connect to a non listen port then we get a RST
1422:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 // which will be handeled above. In other words there is
1423:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 // normally no danger for an endless loop.
1424:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 tcp_client_state=1; // retry
 23046              		.loc 1 1424 0
 23047 0294 40F20003 		movw	r3, #:lower16:.LANCHOR15
 23048 0298 C0F20003 		movt	r3, #:upper16:.LANCHOR15
 23049 029c 4FF00102 		mov	r2, #1
 23050 02a0 1A70     		strb	r2, [r3, #0]
1425:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 // do not inform application layer as we retry.
1426:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 len++;
1427:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
 23051              		.loc 1 1427 0
 23052 02a2 3378     		ldrb	r3, [r6, #0]	@ zero_extendqisi2
 23053 02a4 13F0100F 		tst	r3, #16
 23054 02a8 12BF     		itee	ne
 23055 02aa 0021     		movne	r1, #0
 23056              	.LVL219:
 23057              		.loc 1 1426 0
 23058 02ac 411C     		addeq	r1, r0, #1
 23059              	.LVL220:
 23060 02ae 89B2     		uxtheq	r1, r1
 23061              	.LVL221:
1428:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                         // if packet was an ack then do not step the ack number
1429:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                         len=0;
1430:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 }
1431:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 // refuse and reset the connection
1432:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 make_tcp_ack_from_any(buf,len,TCP_FLAGS_RST_V);
 23062              		.loc 1 1432 0
 23063 02b0 2046     		mov	r0, r4
 23064 02b2 09B2     		sxth	r1, r1
 23065              	.LVL222:
 23066 02b4 4FF00402 		mov	r2, #4
 23067 02b8 FFF7FEFF 		bl	make_tcp_ack_from_any
 23068 02bc 4FF00000 		mov	r0, #0
 23069              	.LVL223:
1433:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 return(0);
 23070              		.loc 1 1433 0
 23071 02c0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 23072              	.LVL224:
 23073              	.L198:
1434:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         }
1435:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 }
1436:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 // in tcp_client_state==3 we will normally first get an empty
1437:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 // ack-packet and then a ack-packet with data.
1438:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 if (tcp_client_state==3 && len>0){ 
 23074              		.loc 1 1438 0
 23075 02c4 B0F10008 		subs	r8, r0, #0
 23076 02c8 18BF     		it	ne
 23077 02ca 4FF00108 		movne	r8, #1
 23078 02ce 032B     		cmp	r3, #3
 23079 02d0 14BF     		ite	ne
 23080 02d2 0023     		movne	r3, #0
 23081 02d4 08F00103 		andeq	r3, r8, #1
 23082 02d8 002B     		cmp	r3, #0
 23083 02da 3FD0     		beq	.L204
 23084              	.LVL225:
1439:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         // our first real data packet
1440:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         tcp_client_state=4;
 23085              		.loc 1 1440 0
 23086 02dc 40F20003 		movw	r3, #:lower16:.LANCHOR15
 23087 02e0 C0F20003 		movt	r3, #:upper16:.LANCHOR15
 23088 02e4 4FF00402 		mov	r2, #4
 23089 02e8 1A70     		strb	r2, [r3, #0]
1441:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         // return the data we received
1442:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         if (client_tcp_result_callback){
 23090              		.loc 1 1442 0
 23091 02ea 40F20003 		movw	r3, #:lower16:.LANCHOR10
 23092 02ee C0F20003 		movt	r3, #:upper16:.LANCHOR10
 23093 02f2 D3F800C0 		ldr	ip, [r3, #0]
 23094 02f6 BCF1000F 		cmp	ip, #0
 23095 02fa 36D0     		beq	.L205
1443:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 tcpstart=TCP_DATA_START; // TCP_DATA_START is a formula
 23096              		.loc 1 1443 0
 23097 02fc 94F82E20 		ldrb	r2, [r4, #46]	@ zero_extendqisi2
 23098 0300 4FEA1212 		lsr	r2, r2, #4
 23099 0304 4FEA8202 		lsl	r2, r2, #2
 23100 0308 02F12202 		add	r2, r2, #34
 23101 030c 92B2     		uxth	r2, r2
 23102              	.LVL226:
1444:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 // out of buffer bounds check, needed in case of fragmented IP pack
1445:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 if (tcpstart>plen-8){
 23103              		.loc 1 1445 0
 23104 030e A5F10803 		sub	r3, r5, #8
 23105 0312 9A42     		cmp	r2, r3
1446:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                         tcpstart=plen-8; // dummy but save
 23106              		.loc 1 1446 0
 23107 0314 C4BF     		itt	gt
 23108 0316 1A46     		movgt	r2, r3
 23109              	.LVL227:
 23110 0318 92B2     		uxthgt	r2, r2
 23111              	.LVL228:
1447:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 }
1448:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 save_len=len;
1449:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 if (tcpstart+len>plen){
 23112              		.loc 1 1449 0
 23113 031a 02EB0003 		add	r3, r2, r0
 23114 031e 9D42     		cmp	r5, r3
 23115              	.LVL229:
 23116 0320 AEBF     		itee	ge
 23117 0322 0346     		movge	r3, r0
 23118              	.LVL230:
1450:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                         save_len=plen-tcpstart;
 23119              		.loc 1 1450 0
 23120 0324 C2EB0503 		rsblt	r3, r2, r5
 23121              	.LVL231:
 23122 0328 9BB2     		uxthlt	r3, r3
 23123              	.LVL232:
1451:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 }
1452:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 send_fin=(*client_tcp_result_callback)((buf[TCP_DST_PORT_L_P]>>5)&0
 23124              		.loc 1 1452 0
 23125 032a 94F82500 		ldrb	r0, [r4, #37]	@ zero_extendqisi2
 23126              	.LVL233:
 23127 032e 4FEA5010 		lsr	r0, r0, #5
 23128 0332 4FF00001 		mov	r1, #0
 23129 0336 E047     		blx	ip
 23130              	.LVL234:
1453:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         }
1454:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         if (send_fin){
 23131              		.loc 1 1454 0
 23132 0338 80B1     		cbz	r0, .L204
1455:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 make_tcp_ack_from_any(buf,len,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
 23133              		.loc 1 1455 0
 23134 033a 2046     		mov	r0, r4
 23135 033c 39B2     		sxth	r1, r7
 23136              	.LVL235:
 23137 033e 4FF00902 		mov	r2, #9
 23138 0342 FFF7FEFF 		bl	make_tcp_ack_from_any
1456:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 tcp_client_state=5;
 23139              		.loc 1 1456 0
 23140 0346 40F20003 		movw	r3, #:lower16:.LANCHOR15
 23141 034a C0F20003 		movt	r3, #:upper16:.LANCHOR15
 23142 034e 4FF00502 		mov	r2, #5
 23143 0352 1A70     		strb	r2, [r3, #0]
 23144 0354 4FF00000 		mov	r0, #0
 23145              	.LVL236:
1457:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 return(0);
 23146              		.loc 1 1457 0
 23147 0358 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 23148              	.LVL237:
 23149              	.L204:
1458:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         }
1459:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 }
1460:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 if(tcp_client_state==5){
 23150              		.loc 1 1460 0
 23151 035c 40F20003 		movw	r3, #:lower16:.LANCHOR15
 23152 0360 C0F20003 		movt	r3, #:upper16:.LANCHOR15
 23153 0364 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 23154 0366 052B     		cmp	r3, #5
 23155 0368 69D0     		beq	.L188
 23156              	.L205:
1461:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         // no more ack
1462:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         return(0);
1463:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 }
1464:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 if (buf[TCP_FLAGS_P] & TCP_FLAGS_FIN_V){
 23157              		.loc 1 1464 0
 23158 036a 3378     		ldrb	r3, [r6, #0]	@ zero_extendqisi2
 23159 036c 13F0010F 		tst	r3, #1
 23160 0370 12D0     		beq	.L209
1465:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         make_tcp_ack_from_any(buf,len+1,TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V);
 23161              		.loc 1 1465 0
 23162 0372 07F10101 		add	r1, r7, #1
 23163 0376 2046     		mov	r0, r4
 23164 0378 09B2     		sxth	r1, r1
 23165 037a 4FF00902 		mov	r2, #9
 23166 037e FFF7FEFF 		bl	make_tcp_ack_from_any
1466:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         tcp_client_state=5; // connection terminated
 23167              		.loc 1 1466 0
 23168 0382 40F20003 		movw	r3, #:lower16:.LANCHOR15
 23169 0386 C0F20003 		movt	r3, #:upper16:.LANCHOR15
 23170 038a 4FF00502 		mov	r2, #5
 23171 038e 1A70     		strb	r2, [r3, #0]
 23172 0390 4FF00000 		mov	r0, #0
 23173              	.LVL238:
1467:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         return(0);
 23174              		.loc 1 1467 0
 23175 0394 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 23176              	.LVL239:
 23177              	.L209:
1468:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 }
1469:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 // ack all data (the web page may be long):
1470:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 // if we just get a fragment then len will be zero
1471:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 // and we ack only once we have the full packet
1472:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 if (len>0){
 23178              		.loc 1 1472 0
 23179 0398 B8F1000F 		cmp	r8, #0
 23180 039c 4FD0     		beq	.L188
1473:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         make_tcp_ack_from_any(buf,len,0);
 23181              		.loc 1 1473 0
 23182 039e 2046     		mov	r0, r4
 23183 03a0 39B2     		sxth	r1, r7
 23184              	.LVL240:
 23185 03a2 4FF00002 		mov	r2, #0
 23186 03a6 FFF7FEFF 		bl	make_tcp_ack_from_any
 23187 03aa 4FF00000 		mov	r0, #0
 23188              	.LVL241:
 23189 03ae BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 23190              	.LVL242:
 23191              	.L195:
1474:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 }
1475:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 return(0);
1476:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
1477:../SERVER/tcpip/ip_arp_udp_tcp.c **** #endif // TCP_client
1478:../SERVER/tcpip/ip_arp_udp_tcp.c ****         //
1479:../SERVER/tcpip/ip_arp_udp_tcp.c **** #ifdef WWW_server
1480:../SERVER/tcpip/ip_arp_udp_tcp.c ****         // tcp port web server start
1481:../SERVER/tcpip/ip_arp_udp_tcp.c ****         if (buf[IP_PROTO_P]==IP_PROTO_TCP_V && buf[TCP_DST_PORT_H_P]==wwwport_h && buf[TCP_DST_PORT
 23192              		.loc 1 1481 0
 23193 03b2 062B     		cmp	r3, #6
 23194 03b4 43D1     		bne	.L188
 23195 03b6 40F20003 		movw	r3, #:lower16:.LANCHOR3
 23196 03ba C0F20003 		movt	r3, #:upper16:.LANCHOR3
 23197 03be 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 23198 03c0 9342     		cmp	r3, r2
 23199 03c2 3CD1     		bne	.L188
 23200 03c4 40F20003 		movw	r3, #:lower16:.LANCHOR4
 23201 03c8 C0F20003 		movt	r3, #:upper16:.LANCHOR4
 23202 03cc 94F82520 		ldrb	r2, [r4, #37]	@ zero_extendqisi2
 23203 03d0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 23204 03d2 9A42     		cmp	r2, r3
 23205 03d4 33D1     		bne	.L188
1482:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 if (buf[TCP_FLAGS_P] & TCP_FLAGS_SYN_V){
 23206              		.loc 1 1482 0
 23207 03d6 2646     		mov	r6, r4
 23208 03d8 16F82F3F 		ldrb	r3, [r6, #47]!	@ zero_extendqisi2
 23209 03dc 13F0020F 		tst	r3, #2
 23210 03e0 06D0     		beq	.L210
1483:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         make_tcp_synack_from_syn(buf);
 23211              		.loc 1 1483 0
 23212 03e2 2046     		mov	r0, r4
 23213 03e4 FFF7FEFF 		bl	make_tcp_synack_from_syn
 23214 03e8 4FF00000 		mov	r0, #0
 23215              	.LVL243:
1484:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         // make_tcp_synack_from_syn does already send the syn,ack
1485:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         return(0);
 23216              		.loc 1 1485 0
 23217 03ec BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 23218              	.LVL244:
 23219              	.L210:
1486:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 }
1487:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
 23220              		.loc 1 1487 0
 23221 03f0 13F0100F 		tst	r3, #16
 23222 03f4 23D0     		beq	.L188
1488:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         info_data_len=get_tcp_data_len(buf);
 23223              		.loc 1 1488 0
 23224 03f6 2046     		mov	r0, r4
 23225 03f8 FFF7FEFF 		bl	get_tcp_data_len
 23226 03fc 40F20003 		movw	r3, #:lower16:.LANCHOR30
 23227 0400 C0F20003 		movt	r3, #:upper16:.LANCHOR30
 23228 0404 1880     		strh	r0, [r3, #0]	@ movhi
1489:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         // we can possibly have no data, just ack:
1490:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         // Here we misuse plen for something else to save a variable.
1491:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         // plen is now the position of start of the tcp user data.
1492:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         if (info_data_len==0){
 23229              		.loc 1 1492 0
 23230 0406 68B9     		cbnz	r0, .L211
1493:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 if (buf[TCP_FLAGS_P] & TCP_FLAGS_FIN_V){
 23231              		.loc 1 1493 0
 23232 0408 3378     		ldrb	r3, [r6, #0]	@ zero_extendqisi2
 23233 040a 13F0010F 		tst	r3, #1
 23234 040e 16D0     		beq	.L188
1494:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                         // finack, answer with ack
1495:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                         make_tcp_ack_from_any(buf,0,0);
 23235              		.loc 1 1495 0
 23236 0410 2046     		mov	r0, r4
 23237 0412 4FF00001 		mov	r1, #0
 23238 0416 0A46     		mov	r2, r1
 23239 0418 FFF7FEFF 		bl	make_tcp_ack_from_any
 23240 041c 4FF00000 		mov	r0, #0
 23241              	.LVL245:
 23242 0420 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 23243              	.LVL246:
 23244              	.L211:
1496:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 }
1497:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 // just an ack with no data, wait for next packet
1498:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 return(0);
1499:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         }
1500:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         // Here we misuse len for something else to save a variable
1501:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         len=TCP_DATA_START; // TCP_DATA_START is a formula
 23245              		.loc 1 1501 0
 23246 0424 94F82E00 		ldrb	r0, [r4, #46]	@ zero_extendqisi2
 23247 0428 4FEA1010 		lsr	r0, r0, #4
 23248 042c 4FEA8000 		lsl	r0, r0, #2
 23249 0430 00F12200 		add	r0, r0, #34
 23250 0434 80B2     		uxth	r0, r0
 23251              	.LVL247:
1502:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         // check for data corruption
1503:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         if (len>plen-8){
 23252              		.loc 1 1503 0
 23253 0436 A5F10805 		sub	r5, r5, #8
 23254              	.LVL248:
 23255 043a A842     		cmp	r0, r5
 23256 043c 01DD     		ble	.L189
 23257              	.LVL249:
 23258              	.L188:
 23259 043e 4FF00000 		mov	r0, #0
 23260              	.LVL250:
 23261              	.L189:
 23262              	.LVL251:
1504:../SERVER/tcpip/ip_arp_udp_tcp.c ****                                 return(0);
1505:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         }
1506:../SERVER/tcpip/ip_arp_udp_tcp.c ****                         return(len);
1507:../SERVER/tcpip/ip_arp_udp_tcp.c ****                 }
1508:../SERVER/tcpip/ip_arp_udp_tcp.c ****         }
1509:../SERVER/tcpip/ip_arp_udp_tcp.c **** #endif // WWW_server
1510:../SERVER/tcpip/ip_arp_udp_tcp.c ****         return(0);
1511:../SERVER/tcpip/ip_arp_udp_tcp.c **** }
 23263              		.loc 1 1511 0
 23264 0442 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 23265              		.cfi_endproc
 23266              	.LFE71:
 23268 0446 00BF     		.section	.text.init_mac,"ax",%progbits
 23269              		.align	2
 23270              		.global	init_mac
 23271              		.thumb
 23272              		.thumb_func
 23274              	init_mac:
 23275              	.LFB30:
 23276              		.loc 1 170 0
 23277              		.cfi_startproc
 23278              		@ args = 0, pretend = 0, frame = 0
 23279              		@ frame_needed = 0, uses_anonymous_args = 0
 23280              	.LVL252:
 23281 0000 08B5     		push	{r3, lr}
 23282              	.LCFI33:
 23283              		.cfi_def_cfa_offset 8
 23284              		.loc 1 171 0
 23285 0002 0146     		mov	r1, r0
 23286 0004 38B1     		cbz	r0, .L215
 23287              		.cfi_offset 14, -4
 23288              		.cfi_offset 3, -8
 23289              		.loc 1 172 0
 23290 0006 40F20000 		movw	r0, #:lower16:.LANCHOR2
 23291              	.LVL253:
 23292 000a C0F20000 		movt	r0, #:upper16:.LANCHOR2
 23293 000e 4FF00602 		mov	r2, #6
 23294 0012 FFF7FEFF 		bl	memcpy
 23295              	.LVL254:
 23296              	.L215:
 23297 0016 08BD     		pop	{r3, pc}
 23298              		.cfi_endproc
 23299              	.LFE30:
 23301              		.section	.text.init_udp_or_www_server,"ax",%progbits
 23302              		.align	2
 23303              		.global	init_udp_or_www_server
 23304              		.thumb
 23305              		.thumb_func
 23307              	init_udp_or_www_server:
 23308              	.LFB51:
 23309              		.loc 1 555 0
 23310              		.cfi_startproc
 23311              		@ args = 0, pretend = 0, frame = 0
 23312              		@ frame_needed = 0, uses_anonymous_args = 0
 23313              	.LVL255:
 23314 0000 08B5     		push	{r3, lr}
 23315              	.LCFI34:
 23316              		.cfi_def_cfa_offset 8
 23317              		.loc 1 557 0
 23318 0002 0B46     		mov	r3, r1
 23319              		.cfi_offset 14, -4
 23320              		.cfi_offset 3, -8
 23321 0004 61B1     		cbz	r1, .L217
 23322 0006 4FF00002 		mov	r2, #0
 23323              		.loc 1 559 0
 23324 000a 40F2000C 		movw	ip, #:lower16:.LANCHOR0
 23325 000e C0F2000C 		movt	ip, #:upper16:.LANCHOR0
 23326              	.L218:
 23327 0012 995C     		ldrb	r1, [r3, r2]	@ zero_extendqisi2
 23328              	.LVL256:
 23329 0014 0CF80210 		strb	r1, [ip, r2]
 23330 0018 02F10102 		add	r2, r2, #1
 23331              		.loc 1 558 0
 23332 001c 042A     		cmp	r2, #4
 23333 001e F8D1     		bne	.L218
 23334              	.LVL257:
 23335              	.L217:
 23336              		.loc 1 563 0
 23337 0020 08B1     		cbz	r0, .L220
 23338 0022 FFF7FEFF 		bl	init_mac
 23339              	.LVL258:
 23340              	.L220:
 23341 0026 08BD     		pop	{r3, pc}
 23342              		.cfi_endproc
 23343              	.LFE51:
 23345              		.global	iphdr
 23346              		.global	arpreqhdr
 23347              		.global	ntpreqhdr
 23348              		.comm	client_arp_result_callback,4,4
 23349              		.section	.bss.client_tcp_datafill_callback,"aw",%nobits
 23350              		.align	2
 23351              		.set	.LANCHOR11,. + 0
 23354              	client_tcp_datafill_callback:
 23355 0000 00000000 		.space	4
 23356              		.section	.bss.client_tcp_result_callback,"aw",%nobits
 23357              		.align	2
 23358              		.set	.LANCHOR10,. + 0
 23361              	client_tcp_result_callback:
 23362 0000 00000000 		.space	4
 23363              		.section	.rodata.iphdr,"a",%progbits
 23364              		.align	2
 23365              		.set	.LANCHOR5,. + 0
 23368              	iphdr:
 23369 0000 45       		.byte	69
 23370 0001 00       		.byte	0
 23371 0002 00       		.byte	0
 23372 0003 82       		.byte	-126
 23373 0004 00       		.byte	0
 23374 0005 00       		.byte	0
 23375 0006 40       		.byte	64
 23376 0007 00       		.byte	0
 23377 0008 20       		.byte	32
 23378 0009 000000   		.section	.bss.client_hoststr,"aw",%nobits
 23379              		.align	2
 23380              		.set	.LANCHOR19,. + 0
 23383              	client_hoststr:
 23384 0000 00000000 		.space	4
 23385              		.section	.bss.info_data_len,"aw",%nobits
 23386              		.align	1
 23387              		.set	.LANCHOR30,. + 0
 23390              	info_data_len:
 23391 0000 0000     		.space	2
 23392              		.section	.bss.wwwport_h,"aw",%nobits
 23393              		.set	.LANCHOR3,. + 0
 23396              	wwwport_h:
 23397 0000 00       		.space	1
 23398              		.section	.bss.tcp_client_state,"aw",%nobits
 23399              		.set	.LANCHOR15,. + 0
 23402              	tcp_client_state:
 23403 0000 00       		.space	1
 23404              		.section	.bss.client_additionalheaderline,"aw",%nobits
 23405              		.align	2
 23406              		.set	.LANCHOR21,. + 0
 23409              	client_additionalheaderline:
 23410 0000 00000000 		.space	4
 23411              		.section	.bss.ipaddr,"aw",%nobits
 23412              		.align	2
 23413              		.set	.LANCHOR0,. + 0
 23416              	ipaddr:
 23417 0000 00000000 		.space	4
 23418              		.section	.bss.bufptr,"aw",%nobits
 23419              		.align	2
 23420              		.set	.LANCHOR26,. + 0
 23423              	bufptr:
 23424 0000 00000000 		.space	4
 23425              		.section	.bss.icmp_callback,"aw",%nobits
 23426              		.align	2
 23427              		.set	.LANCHOR17,. + 0
 23430              	icmp_callback:
 23431 0000 00000000 		.space	4
 23432              		.section	.data.tcpclient_src_port_l,"aw",%progbits
 23433              		.set	.LANCHOR32,. + 0
 23436              	tcpclient_src_port_l:
 23437 0000 01       		.byte	1
 23438              		.section	.bss.browsertype,"aw",%nobits
 23439              		.set	.LANCHOR23,. + 0
 23442              	browsertype:
 23443 0000 00       		.space	1
 23444              		.section	.bss.arpip,"aw",%nobits
 23445              		.align	2
 23446              		.set	.LANCHOR9,. + 0
 23449              	arpip:
 23450 0000 00000000 		.space	4
 23451              		.section	.rodata.str1.4,"aMS",%progbits,1
 23452              		.align	2
 23453              	.LC0:
 23454 0000 47455420 		.ascii	"GET \000"
 23454      00
 23455 0005 000000   		.space	3
 23456              	.LC1:
 23457 0008 20485454 		.ascii	" HTTP/1.1\015\012Host: \000"
 23457      502F312E 
 23457      310D0A48 
 23457      6F73743A 
 23457      2000
 23458 001a 0000     		.space	2
 23459              	.LC2:
 23460 001c 0D0A5573 		.ascii	"\015\012User-Agent: tgr/1.1\015\012Accept: text/htm"
 23460      65722D41 
 23460      67656E74 
 23460      3A207467 
 23460      722F312E 
 23461 0043 6C0D0A43 		.ascii	"l\015\012Connection: close\015\012\015\012\000"
 23461      6F6E6E65 
 23461      6374696F 
 23461      6E3A2063 
 23461      6C6F7365 
 23462              	.LC3:
 23463 005c 504F5354 		.ascii	"POST \000"
 23463      2000
 23464 0062 0000     		.space	2
 23465              	.LC4:
 23466 0064 0D0A00   		.ascii	"\015\012\000"
 23467 0067 00       		.space	1
 23468              	.LC5:
 23469 0068 0D0A5573 		.ascii	"\015\012User-Agent: tgr/1.1\015\012Accept: */*\015\012"
 23469      65722D41 
 23469      67656E74 
 23469      3A207467 
 23469      722F312E 
 23470 008c 436F6E6E 		.ascii	"Connection: close\015\012\000"
 23470      65637469 
 23470      6F6E3A20 
 23470      636C6F73 
 23470      650D0A00 
 23471              	.LC6:
 23472 00a0 436F6E74 		.ascii	"Content-Length: \000"
 23472      656E742D 
 23472      4C656E67 
 23472      74683A20 
 23472      00
 23473 00b1 000000   		.space	3
 23474              	.LC7:
 23475 00b4 0D0A436F 		.ascii	"\015\012Content-Type: application/x-www-form-urlenc"
 23475      6E74656E 
 23475      742D5479 
 23475      70653A20 
 23475      6170706C 
 23476 00e1 6F646564 		.ascii	"oded\015\012\015\012\000"
 23476      0D0A0D0A 
 23476      00
 23477 00ea 0000     		.section	.bss.client_urlbuf,"aw",%nobits
 23478              		.align	2
 23479              		.set	.LANCHOR18,. + 0
 23482              	client_urlbuf:
 23483 0000 00000000 		.space	4
 23484              		.section	.data.arp_delaycnt,"aw",%progbits
 23485              		.align	1
 23486              		.set	.LANCHOR31,. + 0
 23489              	arp_delaycnt:
 23490 0000 0100     		.short	1
 23491              		.section	.data.seqnum,"aw",%progbits
 23492              		.set	.LANCHOR27,. + 0
 23495              	seqnum:
 23496 0000 0A       		.byte	10
 23497              		.section	.bss.arp_reference_number,"aw",%nobits
 23498              		.set	.LANCHOR8,. + 0
 23501              	arp_reference_number:
 23502 0000 00       		.space	1
 23503              		.section	.bss.tcp_fd,"aw",%nobits
 23504              		.set	.LANCHOR16,. + 0
 23507              	tcp_fd:
 23508 0000 00       		.space	1
 23509              		.section	.data.ipid,"aw",%progbits
 23510              		.set	.LANCHOR6,. + 0
 23513              	ipid:
 23514 0000 02       		.byte	2
 23515              		.section	.data.wwwport_l,"aw",%progbits
 23516              		.set	.LANCHOR4,. + 0
 23519              	wwwport_l:
 23520 0000 50       		.byte	80
 23521              		.section	.bss.www_fd,"aw",%nobits
 23522              		.set	.LANCHOR25,. + 0
 23525              	www_fd:
 23526 0000 00       		.space	1
 23527              		.section	.bss.tcp_client_port,"aw",%nobits
 23528              		.align	1
 23529              		.set	.LANCHOR14,. + 0
 23532              	tcp_client_port:
 23533 0000 0000     		.space	2
 23534              		.section	.bss.client_browser_callback,"aw",%nobits
 23535              		.align	2
 23536              		.set	.LANCHOR24,. + 0
 23539              	client_browser_callback:
 23540 0000 00000000 		.space	4
 23541              		.section	.bss.client_urlbuf_var,"aw",%nobits
 23542              		.align	2
 23543              		.set	.LANCHOR20,. + 0
 23546              	client_urlbuf_var:
 23547 0000 00000000 		.space	4
 23548              		.section	.data.ipnetmask,"aw",%progbits
 23549              		.align	2
 23550              		.set	.LANCHOR1,. + 0
 23553              	ipnetmask:
 23554 0000 FF       		.byte	-1
 23555 0001 FF       		.byte	-1
 23556 0002 FF       		.byte	-1
 23557 0003 FF       		.byte	-1
 23558              		.section	.bss.tcp_dst_mac,"aw",%nobits
 23559              		.align	2
 23560              		.set	.LANCHOR13,. + 0
 23563              	tcp_dst_mac:
 23564 0000 00000000 		.space	6
 23564      0000
 23565 0006 0000     		.section	.bss.client_postval,"aw",%nobits
 23566              		.align	2
 23567              		.set	.LANCHOR22,. + 0
 23570              	client_postval:
 23571 0000 00000000 		.space	4
 23572              		.section	.rodata.ntpreqhdr,"a",%progbits
 23573              		.align	2
 23574              		.set	.LANCHOR29,. + 0
 23577              	ntpreqhdr:
 23578 0000 E3       		.byte	-29
 23579 0001 00       		.byte	0
 23580 0002 04       		.byte	4
 23581 0003 FA       		.byte	-6
 23582 0004 00       		.byte	0
 23583 0005 01       		.byte	1
 23584 0006 00       		.byte	0
 23585 0007 00       		.byte	0
 23586 0008 00       		.byte	0
 23587 0009 01       		.byte	1
 23588 000a 0000     		.section	.bss.arpip_state,"aw",%nobits
 23589              		.set	.LANCHOR7,. + 0
 23592              	arpip_state:
 23593 0000 00       		.space	1
 23594              		.section	.bss.tcp_otherside_ip,"aw",%nobits
 23595              		.align	2
 23596              		.set	.LANCHOR12,. + 0
 23599              	tcp_otherside_ip:
 23600 0000 00000000 		.space	4
 23601              		.section	.rodata.arpreqhdr,"a",%progbits
 23602              		.align	2
 23603              		.set	.LANCHOR28,. + 0
 23606              	arpreqhdr:
 23607 0000 00       		.byte	0
 23608 0001 01       		.byte	1
 23609 0002 08       		.byte	8
 23610 0003 00       		.byte	0
 23611 0004 06       		.byte	6
 23612 0005 04       		.byte	4
 23613 0006 00       		.byte	0
 23614 0007 01       		.byte	1
 23615              		.section	.bss.macaddr,"aw",%nobits
 23616              		.align	2
 23617              		.set	.LANCHOR2,. + 0
 23620              	macaddr:
 23621 0000 00000000 		.space	6
 23621      0000
 23622 0006 0000     		.text
 23623              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 ip_arp_udp_tcp.c
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:19923  .text.checksum:00000000 $t
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:19928  .text.checksum:00000000 checksum
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:20019  .text.client_ifconfig:00000000 $t
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:20024  .text.client_ifconfig:00000000 client_ifconfig
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23413  .bss.ipaddr:00000000 .LANCHOR0
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23550  .data.ipnetmask:00000000 .LANCHOR1
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:20069  .text.route_via_gw:00000000 $t
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:20074  .text.route_via_gw:00000000 route_via_gw
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:20128  .text.check_ip_message_is_from:00000000 $t
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:20133  .text.check_ip_message_is_from:00000000 check_ip_message_is_from
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:20170  .text.eth_type_is_arp_and_my_ip:00000000 $t
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:20175  .text.eth_type_is_arp_and_my_ip:00000000 eth_type_is_arp_and_my_ip
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:20233  .text.eth_type_is_ip_and_my_ip:00000000 $t
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:20238  .text.eth_type_is_ip_and_my_ip:00000000 eth_type_is_ip_and_my_ip
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:20299  .text.make_eth:00000000 $t
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:20304  .text.make_eth:00000000 make_eth
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23617  .bss.macaddr:00000000 .LANCHOR2
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:20336  .text.fill_ip_hdr_checksum:00000000 $t
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:20341  .text.fill_ip_hdr_checksum:00000000 fill_ip_hdr_checksum
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:20385  .text.make_ip:00000000 $t
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:20390  .text.make_ip:00000000 make_ip
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:20429  .text.step_seq:00000000 $t
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:20434  .text.step_seq:00000000 step_seq
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:20494  .text.make_tcphead:00000000 $t
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:20499  .text.make_tcphead:00000000 make_tcphead
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:20551  .text.get_tcp_data_len:00000000 $t
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:20556  .text.get_tcp_data_len:00000000 get_tcp_data_len
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:20586  .text.fill_tcp_data_p:00000000 $t
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:20591  .text.fill_tcp_data_p:00000000 fill_tcp_data_p
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:20633  .text.fill_tcp_data_len:00000000 $t
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:20638  .text.fill_tcp_data_len:00000000 fill_tcp_data_len
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:20692  .text.www_server_port:00000000 $t
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:20697  .text.www_server_port:00000000 www_server_port
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23393  .bss.wwwport_h:00000000 .LANCHOR3
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23516  .data.wwwport_l:00000000 .LANCHOR4
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:20720  .text.fill_buf_p:00000000 $t
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:20725  .text.fill_buf_p:00000000 fill_buf_p
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:20756  .text.client_ntp_process_answer:00000000 $t
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:20761  .text.client_ntp_process_answer:00000000 client_ntp_process_answer
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:20814  .text.send_udp_prepare:00000000 $t
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:20819  .text.send_udp_prepare:00000000 send_udp_prepare
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23365  .rodata.iphdr:00000000 .LANCHOR5
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23510  .data.ipid:00000000 .LANCHOR6
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:20925  .text.get_mac_with_arp_wait:00000000 $t
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:20930  .text.get_mac_with_arp_wait:00000000 get_mac_with_arp_wait
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23589  .bss.arpip_state:00000000 .LANCHOR7
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:20950  .text.get_mac_with_arp:00000000 $t
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:20955  .text.get_mac_with_arp:00000000 get_mac_with_arp
                            *COM*:00000004 client_arp_result_callback
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23498  .bss.arp_reference_number:00000000 .LANCHOR8
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23446  .bss.arpip:00000000 .LANCHOR9
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:20995  .text.client_tcp_req:00000000 $t
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:21000  .text.client_tcp_req:00000000 client_tcp_req
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23358  .bss.client_tcp_result_callback:00000000 .LANCHOR10
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23351  .bss.client_tcp_datafill_callback:00000000 .LANCHOR11
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23596  .bss.tcp_otherside_ip:00000000 .LANCHOR12
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23560  .bss.tcp_dst_mac:00000000 .LANCHOR13
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23529  .bss.tcp_client_port:00000000 .LANCHOR14
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23399  .bss.tcp_client_state:00000000 .LANCHOR15
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23504  .bss.tcp_fd:00000000 .LANCHOR16
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:21081  .text.register_ping_rec_callback:00000000 $t
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:21086  .text.register_ping_rec_callback:00000000 register_ping_rec_callback
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23427  .bss.icmp_callback:00000000 .LANCHOR17
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:21104  .text.client_http_post:00000000 $t
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:21109  .text.client_http_post:00000000 client_http_post
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23479  .bss.client_urlbuf:00000000 .LANCHOR18
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23380  .bss.client_hoststr:00000000 .LANCHOR19
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23543  .bss.client_urlbuf_var:00000000 .LANCHOR20
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23406  .bss.client_additionalheaderline:00000000 .LANCHOR21
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23567  .bss.client_postval:00000000 .LANCHOR22
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23439  .bss.browsertype:00000000 .LANCHOR23
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23536  .bss.client_browser_callback:00000000 .LANCHOR24
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:21266  .text.www_client_internal_result_callback:00000000 www_client_internal_result_callback
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:21436  .text.www_client_internal_datafill_callback:00000000 www_client_internal_datafill_callback
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23522  .bss.www_fd:00000000 .LANCHOR25
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:21188  .text.client_browse_url:00000000 $t
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:21193  .text.client_browse_url:00000000 client_browse_url
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:21261  .text.www_client_internal_result_callback:00000000 $t
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23420  .bss.bufptr:00000000 .LANCHOR26
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:21393  .text.fill_tcp_data:00000000 $t
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:21398  .text.fill_tcp_data:00000000 fill_tcp_data
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:21431  .text.www_client_internal_datafill_callback:00000000 $t
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23453  .rodata.str1.4:00000000 .LC0
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23456  .rodata.str1.4:00000008 .LC1
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23459  .rodata.str1.4:0000001c .LC2
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23462  .rodata.str1.4:0000005c .LC3
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23465  .rodata.str1.4:00000064 .LC4
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23468  .rodata.str1.4:00000068 .LC5
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23471  .rodata.str1.4:000000a0 .LC6
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23474  .rodata.str1.4:000000b4 .LC7
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:21626  .text.tcp_client_syn:00000000 $t
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:21631  .text.tcp_client_syn:00000000 tcp_client_syn
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23492  .data.seqnum:00000000 .LANCHOR27
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:21802  .text.client_arp_whohas:00000000 $t
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:21807  .text.client_arp_whohas:00000000 client_arp_whohas
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23603  .rodata.arpreqhdr:00000000 .LANCHOR28
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:21903  .text.send_udp_transmit:00000000 $t
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:21908  .text.send_udp_transmit:00000000 send_udp_transmit
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:21969  .text.send_udp:00000000 $t
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:21974  .text.send_udp:00000000 send_udp
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:22037  .text.client_ntp_request:00000000 $t
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:22042  .text.client_ntp_request:00000000 client_ntp_request
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23574  .rodata.ntpreqhdr:00000000 .LANCHOR29
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:22187  .text.make_tcp_synack_from_syn:00000000 $t
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:22192  .text.make_tcp_synack_from_syn:00000000 make_tcp_synack_from_syn
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:22279  .text.make_udp_reply_from_request_udpdat_ready:00000000 $t
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:22284  .text.make_udp_reply_from_request_udpdat_ready:00000000 make_udp_reply_from_request_udpdat_ready
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:22376  .text.make_udp_reply_from_request:00000000 $t
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:22381  .text.make_udp_reply_from_request:00000000 make_udp_reply_from_request
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:22424  .text.make_tcp_ack_with_data_noflags:00000000 $t
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:22429  .text.make_tcp_ack_with_data_noflags:00000000 make_tcp_ack_with_data_noflags
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:22488  .text.make_tcp_ack_from_any:00000000 $t
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:22493  .text.make_tcp_ack_from_any:00000000 make_tcp_ack_from_any
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:22572  .text.www_server_reply:00000000 $t
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:22577  .text.www_server_reply:00000000 www_server_reply
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23387  .bss.info_data_len:00000000 .LANCHOR30
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:22614  .text.make_echo_reply_from_request:00000000 $t
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:22619  .text.make_echo_reply_from_request:00000000 make_echo_reply_from_request
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:22668  .text.make_arp_answer_from_request:00000000 $t
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:22673  .text.make_arp_answer_from_request:00000000 make_arp_answer_from_request
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:22738  .text.packetloop_arp_icmp_tcp:00000000 $t
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:22743  .text.packetloop_arp_icmp_tcp:00000000 packetloop_arp_icmp_tcp
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23486  .data.arp_delaycnt:00000000 .LANCHOR31
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23433  .data.tcpclient_src_port_l:00000000 .LANCHOR32
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23269  .text.init_mac:00000000 $t
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23274  .text.init_mac:00000000 init_mac
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23302  .text.init_udp_or_www_server:00000000 $t
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23307  .text.init_udp_or_www_server:00000000 init_udp_or_www_server
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23368  .rodata.iphdr:00000000 iphdr
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23606  .rodata.arpreqhdr:00000000 arpreqhdr
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23577  .rodata.ntpreqhdr:00000000 ntpreqhdr
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23350  .bss.client_tcp_datafill_callback:00000000 $d
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23354  .bss.client_tcp_datafill_callback:00000000 client_tcp_datafill_callback
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23357  .bss.client_tcp_result_callback:00000000 $d
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23361  .bss.client_tcp_result_callback:00000000 client_tcp_result_callback
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23364  .rodata.iphdr:00000000 $d
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23379  .bss.client_hoststr:00000000 $d
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23383  .bss.client_hoststr:00000000 client_hoststr
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23386  .bss.info_data_len:00000000 $d
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23390  .bss.info_data_len:00000000 info_data_len
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23396  .bss.wwwport_h:00000000 wwwport_h
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23397  .bss.wwwport_h:00000000 $d
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23402  .bss.tcp_client_state:00000000 tcp_client_state
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23403  .bss.tcp_client_state:00000000 $d
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23405  .bss.client_additionalheaderline:00000000 $d
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23409  .bss.client_additionalheaderline:00000000 client_additionalheaderline
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23412  .bss.ipaddr:00000000 $d
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23416  .bss.ipaddr:00000000 ipaddr
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23419  .bss.bufptr:00000000 $d
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23423  .bss.bufptr:00000000 bufptr
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23426  .bss.icmp_callback:00000000 $d
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23430  .bss.icmp_callback:00000000 icmp_callback
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23436  .data.tcpclient_src_port_l:00000000 tcpclient_src_port_l
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23442  .bss.browsertype:00000000 browsertype
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23443  .bss.browsertype:00000000 $d
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23445  .bss.arpip:00000000 $d
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23449  .bss.arpip:00000000 arpip
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23452  .rodata.str1.4:00000000 $d
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23478  .bss.client_urlbuf:00000000 $d
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23482  .bss.client_urlbuf:00000000 client_urlbuf
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23485  .data.arp_delaycnt:00000000 $d
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23489  .data.arp_delaycnt:00000000 arp_delaycnt
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23495  .data.seqnum:00000000 seqnum
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23501  .bss.arp_reference_number:00000000 arp_reference_number
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23502  .bss.arp_reference_number:00000000 $d
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23507  .bss.tcp_fd:00000000 tcp_fd
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23508  .bss.tcp_fd:00000000 $d
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23513  .data.ipid:00000000 ipid
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23519  .data.wwwport_l:00000000 wwwport_l
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23525  .bss.www_fd:00000000 www_fd
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23526  .bss.www_fd:00000000 $d
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23528  .bss.tcp_client_port:00000000 $d
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23532  .bss.tcp_client_port:00000000 tcp_client_port
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23535  .bss.client_browser_callback:00000000 $d
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23539  .bss.client_browser_callback:00000000 client_browser_callback
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23542  .bss.client_urlbuf_var:00000000 $d
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23546  .bss.client_urlbuf_var:00000000 client_urlbuf_var
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23549  .data.ipnetmask:00000000 $d
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23553  .data.ipnetmask:00000000 ipnetmask
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23559  .bss.tcp_dst_mac:00000000 $d
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23563  .bss.tcp_dst_mac:00000000 tcp_dst_mac
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23566  .bss.client_postval:00000000 $d
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23570  .bss.client_postval:00000000 client_postval
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23573  .rodata.ntpreqhdr:00000000 $d
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23592  .bss.arpip_state:00000000 arpip_state
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23593  .bss.arpip_state:00000000 $d
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23595  .bss.tcp_otherside_ip:00000000 $d
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23599  .bss.tcp_otherside_ip:00000000 tcp_otherside_ip
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23602  .rodata.arpreqhdr:00000000 $d
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23616  .bss.macaddr:00000000 $d
C:\Users\user\AppData\Local\Temp\ccgqq4Ql.s:23620  .bss.macaddr:00000000 macaddr
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
enc28j60linkup
isblank
__ctype_ptr__
strlen
itoa
enc28j60PacketSend
memcmp
memcpy
